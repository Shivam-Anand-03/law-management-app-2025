
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Address
 * 
 */
export type Address = $Result.DefaultSelection<Prisma.$AddressPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model TeamAdmin
 * 
 */
export type TeamAdmin = $Result.DefaultSelection<Prisma.$TeamAdminPayload>
/**
 * Model TeamMember
 * 
 */
export type TeamMember = $Result.DefaultSelection<Prisma.$TeamMemberPayload>
/**
 * Model Opponent
 * 
 */
export type Opponent = $Result.DefaultSelection<Prisma.$OpponentPayload>
/**
 * Model TeamClient
 * 
 */
export type TeamClient = $Result.DefaultSelection<Prisma.$TeamClientPayload>
/**
 * Model CaseTag
 * 
 */
export type CaseTag = $Result.DefaultSelection<Prisma.$CaseTagPayload>
/**
 * Model TeamMembership
 * 
 */
export type TeamMembership = $Result.DefaultSelection<Prisma.$TeamMembershipPayload>
/**
 * Model ToDoList
 * 
 */
export type ToDoList = $Result.DefaultSelection<Prisma.$ToDoListPayload>
/**
 * Model Case
 * 
 */
export type Case = $Result.DefaultSelection<Prisma.$CasePayload>
/**
 * Model CaseNote
 * 
 */
export type CaseNote = $Result.DefaultSelection<Prisma.$CaseNotePayload>
/**
 * Model CaseDocument
 * 
 */
export type CaseDocument = $Result.DefaultSelection<Prisma.$CaseDocumentPayload>
/**
 * Model CaseReminder
 * 
 */
export type CaseReminder = $Result.DefaultSelection<Prisma.$CaseReminderPayload>
/**
 * Model CaseInvoice
 * 
 */
export type CaseInvoice = $Result.DefaultSelection<Prisma.$CaseInvoicePayload>
/**
 * Model CaseBilling
 * 
 */
export type CaseBilling = $Result.DefaultSelection<Prisma.$CaseBillingPayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const CaseRateType: {
  FIXED: 'FIXED',
  HOURLY: 'HOURLY',
  RETAINER: 'RETAINER'
};

export type CaseRateType = (typeof CaseRateType)[keyof typeof CaseRateType]


export const PaymentStatus: {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


export const PaymentMethod: {
  BANK_TRANSFER: 'BANK_TRANSFER',
  CREDIT_CARD: 'CREDIT_CARD',
  CASH: 'CASH',
  CHEQUE: 'CHEQUE',
  ONLINE: 'ONLINE'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const UserRole: {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  CLIENT: 'CLIENT'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const CaseStatus: {
  OPEN: 'OPEN',
  CLOSED: 'CLOSED',
  PENDING: 'PENDING'
};

export type CaseStatus = (typeof CaseStatus)[keyof typeof CaseStatus]


export const matterPriority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

export type matterPriority = (typeof matterPriority)[keyof typeof matterPriority]


export const PracticeArea: {
  CRIMINAL: 'CRIMINAL',
  CIVIL: 'CIVIL',
  COMMERCIAL: 'COMMERCIAL',
  ADMINISTRATIVE: 'ADMINISTRATIVE',
  LABOR: 'LABOR',
  FAMILY: 'FAMILY',
  REAL_ESTATE: 'REAL_ESTATE',
  INTELLECTUAL_PROPERTY: 'INTELLECTUAL_PROPERTY',
  ENVIRONMENTAL: 'ENVIRONMENTAL',
  TAXATION: 'TAXATION'
};

export type PracticeArea = (typeof PracticeArea)[keyof typeof PracticeArea]


export const OpponentType: {
  COMPANY: 'COMPANY',
  PERSON: 'PERSON'
};

export type OpponentType = (typeof OpponentType)[keyof typeof OpponentType]


export const CaseStage: {
  RECONCILIATION_COMMITTEE: 'RECONCILIATION_COMMITTEE',
  FIRST_INSTANCE_COURT: 'FIRST_INSTANCE_COURT',
  APPEAL_COURT: 'APPEAL_COURT',
  CASSATION_HIGH_COURT: 'CASSATION_HIGH_COURT',
  EXECUTION: 'EXECUTION',
  UNDER_SETTLEMENT: 'UNDER_SETTLEMENT',
  SETTLED_CLOSED: 'SETTLED_CLOSED',
  DISPUTE: 'DISPUTE'
};

export type CaseStage = (typeof CaseStage)[keyof typeof CaseStage]

}

export type CaseRateType = $Enums.CaseRateType

export const CaseRateType: typeof $Enums.CaseRateType

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type CaseStatus = $Enums.CaseStatus

export const CaseStatus: typeof $Enums.CaseStatus

export type matterPriority = $Enums.matterPriority

export const matterPriority: typeof $Enums.matterPriority

export type PracticeArea = $Enums.PracticeArea

export const PracticeArea: typeof $Enums.PracticeArea

export type OpponentType = $Enums.OpponentType

export const OpponentType: typeof $Enums.OpponentType

export type CaseStage = $Enums.CaseStage

export const CaseStage: typeof $Enums.CaseStage

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teamAdmin`: Exposes CRUD operations for the **TeamAdmin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamAdmins
    * const teamAdmins = await prisma.teamAdmin.findMany()
    * ```
    */
  get teamAdmin(): Prisma.TeamAdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teamMember`: Exposes CRUD operations for the **TeamMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamMembers
    * const teamMembers = await prisma.teamMember.findMany()
    * ```
    */
  get teamMember(): Prisma.TeamMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.opponent`: Exposes CRUD operations for the **Opponent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Opponents
    * const opponents = await prisma.opponent.findMany()
    * ```
    */
  get opponent(): Prisma.OpponentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teamClient`: Exposes CRUD operations for the **TeamClient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamClients
    * const teamClients = await prisma.teamClient.findMany()
    * ```
    */
  get teamClient(): Prisma.TeamClientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.caseTag`: Exposes CRUD operations for the **CaseTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CaseTags
    * const caseTags = await prisma.caseTag.findMany()
    * ```
    */
  get caseTag(): Prisma.CaseTagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teamMembership`: Exposes CRUD operations for the **TeamMembership** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamMemberships
    * const teamMemberships = await prisma.teamMembership.findMany()
    * ```
    */
  get teamMembership(): Prisma.TeamMembershipDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.toDoList`: Exposes CRUD operations for the **ToDoList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ToDoLists
    * const toDoLists = await prisma.toDoList.findMany()
    * ```
    */
  get toDoList(): Prisma.ToDoListDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.case`: Exposes CRUD operations for the **Case** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cases
    * const cases = await prisma.case.findMany()
    * ```
    */
  get case(): Prisma.CaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.caseNote`: Exposes CRUD operations for the **CaseNote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CaseNotes
    * const caseNotes = await prisma.caseNote.findMany()
    * ```
    */
  get caseNote(): Prisma.CaseNoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.caseDocument`: Exposes CRUD operations for the **CaseDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CaseDocuments
    * const caseDocuments = await prisma.caseDocument.findMany()
    * ```
    */
  get caseDocument(): Prisma.CaseDocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.caseReminder`: Exposes CRUD operations for the **CaseReminder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CaseReminders
    * const caseReminders = await prisma.caseReminder.findMany()
    * ```
    */
  get caseReminder(): Prisma.CaseReminderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.caseInvoice`: Exposes CRUD operations for the **CaseInvoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CaseInvoices
    * const caseInvoices = await prisma.caseInvoice.findMany()
    * ```
    */
  get caseInvoice(): Prisma.CaseInvoiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.caseBilling`: Exposes CRUD operations for the **CaseBilling** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CaseBillings
    * const caseBillings = await prisma.caseBilling.findMany()
    * ```
    */
  get caseBilling(): Prisma.CaseBillingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Address: 'Address',
    Session: 'Session',
    TeamAdmin: 'TeamAdmin',
    TeamMember: 'TeamMember',
    Opponent: 'Opponent',
    TeamClient: 'TeamClient',
    CaseTag: 'CaseTag',
    TeamMembership: 'TeamMembership',
    ToDoList: 'ToDoList',
    Case: 'Case',
    CaseNote: 'CaseNote',
    CaseDocument: 'CaseDocument',
    CaseReminder: 'CaseReminder',
    CaseInvoice: 'CaseInvoice',
    CaseBilling: 'CaseBilling',
    Document: 'Document'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "address" | "session" | "teamAdmin" | "teamMember" | "opponent" | "teamClient" | "caseTag" | "teamMembership" | "toDoList" | "case" | "caseNote" | "caseDocument" | "caseReminder" | "caseInvoice" | "caseBilling" | "document"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Address: {
        payload: Prisma.$AddressPayload<ExtArgs>
        fields: Prisma.AddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AddressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findFirst: {
            args: Prisma.AddressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findMany: {
            args: Prisma.AddressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          create: {
            args: Prisma.AddressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          createMany: {
            args: Prisma.AddressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AddressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          delete: {
            args: Prisma.AddressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          update: {
            args: Prisma.AddressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          deleteMany: {
            args: Prisma.AddressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AddressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AddressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          upsert: {
            args: Prisma.AddressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          aggregate: {
            args: Prisma.AddressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAddress>
          }
          groupBy: {
            args: Prisma.AddressGroupByArgs<ExtArgs>
            result: $Utils.Optional<AddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.AddressCountArgs<ExtArgs>
            result: $Utils.Optional<AddressCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      TeamAdmin: {
        payload: Prisma.$TeamAdminPayload<ExtArgs>
        fields: Prisma.TeamAdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamAdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamAdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAdminPayload>
          }
          findFirst: {
            args: Prisma.TeamAdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamAdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAdminPayload>
          }
          findMany: {
            args: Prisma.TeamAdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAdminPayload>[]
          }
          create: {
            args: Prisma.TeamAdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAdminPayload>
          }
          createMany: {
            args: Prisma.TeamAdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamAdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAdminPayload>[]
          }
          delete: {
            args: Prisma.TeamAdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAdminPayload>
          }
          update: {
            args: Prisma.TeamAdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAdminPayload>
          }
          deleteMany: {
            args: Prisma.TeamAdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamAdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamAdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAdminPayload>[]
          }
          upsert: {
            args: Prisma.TeamAdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAdminPayload>
          }
          aggregate: {
            args: Prisma.TeamAdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamAdmin>
          }
          groupBy: {
            args: Prisma.TeamAdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamAdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamAdminCountArgs<ExtArgs>
            result: $Utils.Optional<TeamAdminCountAggregateOutputType> | number
          }
        }
      }
      TeamMember: {
        payload: Prisma.$TeamMemberPayload<ExtArgs>
        fields: Prisma.TeamMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          findFirst: {
            args: Prisma.TeamMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          findMany: {
            args: Prisma.TeamMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>[]
          }
          create: {
            args: Prisma.TeamMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          createMany: {
            args: Prisma.TeamMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>[]
          }
          delete: {
            args: Prisma.TeamMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          update: {
            args: Prisma.TeamMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          deleteMany: {
            args: Prisma.TeamMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamMemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>[]
          }
          upsert: {
            args: Prisma.TeamMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          aggregate: {
            args: Prisma.TeamMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamMember>
          }
          groupBy: {
            args: Prisma.TeamMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamMemberCountArgs<ExtArgs>
            result: $Utils.Optional<TeamMemberCountAggregateOutputType> | number
          }
        }
      }
      Opponent: {
        payload: Prisma.$OpponentPayload<ExtArgs>
        fields: Prisma.OpponentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OpponentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpponentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OpponentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpponentPayload>
          }
          findFirst: {
            args: Prisma.OpponentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpponentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OpponentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpponentPayload>
          }
          findMany: {
            args: Prisma.OpponentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpponentPayload>[]
          }
          create: {
            args: Prisma.OpponentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpponentPayload>
          }
          createMany: {
            args: Prisma.OpponentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OpponentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpponentPayload>[]
          }
          delete: {
            args: Prisma.OpponentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpponentPayload>
          }
          update: {
            args: Prisma.OpponentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpponentPayload>
          }
          deleteMany: {
            args: Prisma.OpponentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OpponentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OpponentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpponentPayload>[]
          }
          upsert: {
            args: Prisma.OpponentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpponentPayload>
          }
          aggregate: {
            args: Prisma.OpponentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOpponent>
          }
          groupBy: {
            args: Prisma.OpponentGroupByArgs<ExtArgs>
            result: $Utils.Optional<OpponentGroupByOutputType>[]
          }
          count: {
            args: Prisma.OpponentCountArgs<ExtArgs>
            result: $Utils.Optional<OpponentCountAggregateOutputType> | number
          }
        }
      }
      TeamClient: {
        payload: Prisma.$TeamClientPayload<ExtArgs>
        fields: Prisma.TeamClientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamClientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamClientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamClientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamClientPayload>
          }
          findFirst: {
            args: Prisma.TeamClientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamClientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamClientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamClientPayload>
          }
          findMany: {
            args: Prisma.TeamClientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamClientPayload>[]
          }
          create: {
            args: Prisma.TeamClientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamClientPayload>
          }
          createMany: {
            args: Prisma.TeamClientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamClientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamClientPayload>[]
          }
          delete: {
            args: Prisma.TeamClientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamClientPayload>
          }
          update: {
            args: Prisma.TeamClientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamClientPayload>
          }
          deleteMany: {
            args: Prisma.TeamClientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamClientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamClientUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamClientPayload>[]
          }
          upsert: {
            args: Prisma.TeamClientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamClientPayload>
          }
          aggregate: {
            args: Prisma.TeamClientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamClient>
          }
          groupBy: {
            args: Prisma.TeamClientGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamClientCountArgs<ExtArgs>
            result: $Utils.Optional<TeamClientCountAggregateOutputType> | number
          }
        }
      }
      CaseTag: {
        payload: Prisma.$CaseTagPayload<ExtArgs>
        fields: Prisma.CaseTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseTagPayload>
          }
          findFirst: {
            args: Prisma.CaseTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseTagPayload>
          }
          findMany: {
            args: Prisma.CaseTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseTagPayload>[]
          }
          create: {
            args: Prisma.CaseTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseTagPayload>
          }
          createMany: {
            args: Prisma.CaseTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseTagPayload>[]
          }
          delete: {
            args: Prisma.CaseTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseTagPayload>
          }
          update: {
            args: Prisma.CaseTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseTagPayload>
          }
          deleteMany: {
            args: Prisma.CaseTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CaseTagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseTagPayload>[]
          }
          upsert: {
            args: Prisma.CaseTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseTagPayload>
          }
          aggregate: {
            args: Prisma.CaseTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCaseTag>
          }
          groupBy: {
            args: Prisma.CaseTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseTagCountArgs<ExtArgs>
            result: $Utils.Optional<CaseTagCountAggregateOutputType> | number
          }
        }
      }
      TeamMembership: {
        payload: Prisma.$TeamMembershipPayload<ExtArgs>
        fields: Prisma.TeamMembershipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamMembershipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembershipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamMembershipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembershipPayload>
          }
          findFirst: {
            args: Prisma.TeamMembershipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembershipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamMembershipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembershipPayload>
          }
          findMany: {
            args: Prisma.TeamMembershipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembershipPayload>[]
          }
          create: {
            args: Prisma.TeamMembershipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembershipPayload>
          }
          createMany: {
            args: Prisma.TeamMembershipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamMembershipCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembershipPayload>[]
          }
          delete: {
            args: Prisma.TeamMembershipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembershipPayload>
          }
          update: {
            args: Prisma.TeamMembershipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembershipPayload>
          }
          deleteMany: {
            args: Prisma.TeamMembershipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamMembershipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamMembershipUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembershipPayload>[]
          }
          upsert: {
            args: Prisma.TeamMembershipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembershipPayload>
          }
          aggregate: {
            args: Prisma.TeamMembershipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamMembership>
          }
          groupBy: {
            args: Prisma.TeamMembershipGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamMembershipGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamMembershipCountArgs<ExtArgs>
            result: $Utils.Optional<TeamMembershipCountAggregateOutputType> | number
          }
        }
      }
      ToDoList: {
        payload: Prisma.$ToDoListPayload<ExtArgs>
        fields: Prisma.ToDoListFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ToDoListFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToDoListPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ToDoListFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToDoListPayload>
          }
          findFirst: {
            args: Prisma.ToDoListFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToDoListPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ToDoListFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToDoListPayload>
          }
          findMany: {
            args: Prisma.ToDoListFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToDoListPayload>[]
          }
          create: {
            args: Prisma.ToDoListCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToDoListPayload>
          }
          createMany: {
            args: Prisma.ToDoListCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ToDoListCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToDoListPayload>[]
          }
          delete: {
            args: Prisma.ToDoListDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToDoListPayload>
          }
          update: {
            args: Prisma.ToDoListUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToDoListPayload>
          }
          deleteMany: {
            args: Prisma.ToDoListDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ToDoListUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ToDoListUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToDoListPayload>[]
          }
          upsert: {
            args: Prisma.ToDoListUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToDoListPayload>
          }
          aggregate: {
            args: Prisma.ToDoListAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateToDoList>
          }
          groupBy: {
            args: Prisma.ToDoListGroupByArgs<ExtArgs>
            result: $Utils.Optional<ToDoListGroupByOutputType>[]
          }
          count: {
            args: Prisma.ToDoListCountArgs<ExtArgs>
            result: $Utils.Optional<ToDoListCountAggregateOutputType> | number
          }
        }
      }
      Case: {
        payload: Prisma.$CasePayload<ExtArgs>
        fields: Prisma.CaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          findFirst: {
            args: Prisma.CaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          findMany: {
            args: Prisma.CaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>[]
          }
          create: {
            args: Prisma.CaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          createMany: {
            args: Prisma.CaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>[]
          }
          delete: {
            args: Prisma.CaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          update: {
            args: Prisma.CaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          deleteMany: {
            args: Prisma.CaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CaseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>[]
          }
          upsert: {
            args: Prisma.CaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          aggregate: {
            args: Prisma.CaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCase>
          }
          groupBy: {
            args: Prisma.CaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseCountArgs<ExtArgs>
            result: $Utils.Optional<CaseCountAggregateOutputType> | number
          }
        }
      }
      CaseNote: {
        payload: Prisma.$CaseNotePayload<ExtArgs>
        fields: Prisma.CaseNoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseNoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseNotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseNoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseNotePayload>
          }
          findFirst: {
            args: Prisma.CaseNoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseNotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseNoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseNotePayload>
          }
          findMany: {
            args: Prisma.CaseNoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseNotePayload>[]
          }
          create: {
            args: Prisma.CaseNoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseNotePayload>
          }
          createMany: {
            args: Prisma.CaseNoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseNoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseNotePayload>[]
          }
          delete: {
            args: Prisma.CaseNoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseNotePayload>
          }
          update: {
            args: Prisma.CaseNoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseNotePayload>
          }
          deleteMany: {
            args: Prisma.CaseNoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseNoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CaseNoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseNotePayload>[]
          }
          upsert: {
            args: Prisma.CaseNoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseNotePayload>
          }
          aggregate: {
            args: Prisma.CaseNoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCaseNote>
          }
          groupBy: {
            args: Prisma.CaseNoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseNoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseNoteCountArgs<ExtArgs>
            result: $Utils.Optional<CaseNoteCountAggregateOutputType> | number
          }
        }
      }
      CaseDocument: {
        payload: Prisma.$CaseDocumentPayload<ExtArgs>
        fields: Prisma.CaseDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDocumentPayload>
          }
          findFirst: {
            args: Prisma.CaseDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDocumentPayload>
          }
          findMany: {
            args: Prisma.CaseDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDocumentPayload>[]
          }
          create: {
            args: Prisma.CaseDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDocumentPayload>
          }
          createMany: {
            args: Prisma.CaseDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseDocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDocumentPayload>[]
          }
          delete: {
            args: Prisma.CaseDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDocumentPayload>
          }
          update: {
            args: Prisma.CaseDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDocumentPayload>
          }
          deleteMany: {
            args: Prisma.CaseDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CaseDocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDocumentPayload>[]
          }
          upsert: {
            args: Prisma.CaseDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDocumentPayload>
          }
          aggregate: {
            args: Prisma.CaseDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCaseDocument>
          }
          groupBy: {
            args: Prisma.CaseDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<CaseDocumentCountAggregateOutputType> | number
          }
        }
      }
      CaseReminder: {
        payload: Prisma.$CaseReminderPayload<ExtArgs>
        fields: Prisma.CaseReminderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseReminderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseReminderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseReminderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseReminderPayload>
          }
          findFirst: {
            args: Prisma.CaseReminderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseReminderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseReminderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseReminderPayload>
          }
          findMany: {
            args: Prisma.CaseReminderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseReminderPayload>[]
          }
          create: {
            args: Prisma.CaseReminderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseReminderPayload>
          }
          createMany: {
            args: Prisma.CaseReminderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseReminderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseReminderPayload>[]
          }
          delete: {
            args: Prisma.CaseReminderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseReminderPayload>
          }
          update: {
            args: Prisma.CaseReminderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseReminderPayload>
          }
          deleteMany: {
            args: Prisma.CaseReminderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseReminderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CaseReminderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseReminderPayload>[]
          }
          upsert: {
            args: Prisma.CaseReminderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseReminderPayload>
          }
          aggregate: {
            args: Prisma.CaseReminderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCaseReminder>
          }
          groupBy: {
            args: Prisma.CaseReminderGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseReminderGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseReminderCountArgs<ExtArgs>
            result: $Utils.Optional<CaseReminderCountAggregateOutputType> | number
          }
        }
      }
      CaseInvoice: {
        payload: Prisma.$CaseInvoicePayload<ExtArgs>
        fields: Prisma.CaseInvoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseInvoiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseInvoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseInvoiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseInvoicePayload>
          }
          findFirst: {
            args: Prisma.CaseInvoiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseInvoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseInvoiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseInvoicePayload>
          }
          findMany: {
            args: Prisma.CaseInvoiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseInvoicePayload>[]
          }
          create: {
            args: Prisma.CaseInvoiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseInvoicePayload>
          }
          createMany: {
            args: Prisma.CaseInvoiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseInvoiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseInvoicePayload>[]
          }
          delete: {
            args: Prisma.CaseInvoiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseInvoicePayload>
          }
          update: {
            args: Prisma.CaseInvoiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseInvoicePayload>
          }
          deleteMany: {
            args: Prisma.CaseInvoiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseInvoiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CaseInvoiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseInvoicePayload>[]
          }
          upsert: {
            args: Prisma.CaseInvoiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseInvoicePayload>
          }
          aggregate: {
            args: Prisma.CaseInvoiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCaseInvoice>
          }
          groupBy: {
            args: Prisma.CaseInvoiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseInvoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseInvoiceCountArgs<ExtArgs>
            result: $Utils.Optional<CaseInvoiceCountAggregateOutputType> | number
          }
        }
      }
      CaseBilling: {
        payload: Prisma.$CaseBillingPayload<ExtArgs>
        fields: Prisma.CaseBillingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseBillingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBillingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseBillingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBillingPayload>
          }
          findFirst: {
            args: Prisma.CaseBillingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBillingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseBillingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBillingPayload>
          }
          findMany: {
            args: Prisma.CaseBillingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBillingPayload>[]
          }
          create: {
            args: Prisma.CaseBillingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBillingPayload>
          }
          createMany: {
            args: Prisma.CaseBillingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseBillingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBillingPayload>[]
          }
          delete: {
            args: Prisma.CaseBillingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBillingPayload>
          }
          update: {
            args: Prisma.CaseBillingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBillingPayload>
          }
          deleteMany: {
            args: Prisma.CaseBillingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseBillingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CaseBillingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBillingPayload>[]
          }
          upsert: {
            args: Prisma.CaseBillingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBillingPayload>
          }
          aggregate: {
            args: Prisma.CaseBillingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCaseBilling>
          }
          groupBy: {
            args: Prisma.CaseBillingGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseBillingGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseBillingCountArgs<ExtArgs>
            result: $Utils.Optional<CaseBillingCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    address?: AddressOmit
    session?: SessionOmit
    teamAdmin?: TeamAdminOmit
    teamMember?: TeamMemberOmit
    opponent?: OpponentOmit
    teamClient?: TeamClientOmit
    caseTag?: CaseTagOmit
    teamMembership?: TeamMembershipOmit
    toDoList?: ToDoListOmit
    case?: CaseOmit
    caseNote?: CaseNoteOmit
    caseDocument?: CaseDocumentOmit
    caseReminder?: CaseReminderOmit
    caseInvoice?: CaseInvoiceOmit
    caseBilling?: CaseBillingOmit
    document?: DocumentOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    documents: number
    ToDoList: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | UserCountOutputTypeCountDocumentsArgs
    ToDoList?: boolean | UserCountOutputTypeCountToDoListArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountToDoListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToDoListWhereInput
  }


  /**
   * Count Type TeamAdminCountOutputType
   */

  export type TeamAdminCountOutputType = {
    cases: number
  }

  export type TeamAdminCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cases?: boolean | TeamAdminCountOutputTypeCountCasesArgs
  }

  // Custom InputTypes
  /**
   * TeamAdminCountOutputType without action
   */
  export type TeamAdminCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAdminCountOutputType
     */
    select?: TeamAdminCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamAdminCountOutputType without action
   */
  export type TeamAdminCountOutputTypeCountCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWhereInput
  }


  /**
   * Count Type TeamMemberCountOutputType
   */

  export type TeamMemberCountOutputType = {
    memberships: number
  }

  export type TeamMemberCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    memberships?: boolean | TeamMemberCountOutputTypeCountMembershipsArgs
  }

  // Custom InputTypes
  /**
   * TeamMemberCountOutputType without action
   */
  export type TeamMemberCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMemberCountOutputType
     */
    select?: TeamMemberCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamMemberCountOutputType without action
   */
  export type TeamMemberCountOutputTypeCountMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMembershipWhereInput
  }


  /**
   * Count Type TeamClientCountOutputType
   */

  export type TeamClientCountOutputType = {
    cases: number
  }

  export type TeamClientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cases?: boolean | TeamClientCountOutputTypeCountCasesArgs
  }

  // Custom InputTypes
  /**
   * TeamClientCountOutputType without action
   */
  export type TeamClientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamClientCountOutputType
     */
    select?: TeamClientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamClientCountOutputType without action
   */
  export type TeamClientCountOutputTypeCountCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWhereInput
  }


  /**
   * Count Type CaseCountOutputType
   */

  export type CaseCountOutputType = {
    members: number
    caseReminder: number
    caseInvoice: number
  }

  export type CaseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | CaseCountOutputTypeCountMembersArgs
    caseReminder?: boolean | CaseCountOutputTypeCountCaseReminderArgs
    caseInvoice?: boolean | CaseCountOutputTypeCountCaseInvoiceArgs
  }

  // Custom InputTypes
  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseCountOutputType
     */
    select?: CaseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMembershipWhereInput
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountCaseReminderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseReminderWhereInput
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountCaseInvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseInvoiceWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    userName: string | null
    email: string | null
    userProfile: string | null
    password: string | null
    phoneNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
    role: $Enums.UserRole | null
    chatToken: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    userName: string | null
    email: string | null
    userProfile: string | null
    password: string | null
    phoneNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
    role: $Enums.UserRole | null
    chatToken: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    userName: number
    email: number
    userProfile: number
    password: number
    phoneNumber: number
    createdAt: number
    updatedAt: number
    role: number
    chatToken: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    userName?: true
    email?: true
    userProfile?: true
    password?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    chatToken?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    userName?: true
    email?: true
    userProfile?: true
    password?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    chatToken?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    userName?: true
    email?: true
    userProfile?: true
    password?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    chatToken?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    firstName: string
    lastName: string | null
    userName: string
    email: string
    userProfile: string | null
    password: string
    phoneNumber: string
    createdAt: Date
    updatedAt: Date
    role: $Enums.UserRole
    chatToken: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    userName?: boolean
    email?: boolean
    userProfile?: boolean
    password?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    chatToken?: boolean
    Session?: boolean | User$SessionArgs<ExtArgs>
    UserAddress?: boolean | User$UserAddressArgs<ExtArgs>
    TeamAdmin?: boolean | User$TeamAdminArgs<ExtArgs>
    TeamMember?: boolean | User$TeamMemberArgs<ExtArgs>
    TeamClient?: boolean | User$TeamClientArgs<ExtArgs>
    documents?: boolean | User$documentsArgs<ExtArgs>
    ToDoList?: boolean | User$ToDoListArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    userName?: boolean
    email?: boolean
    userProfile?: boolean
    password?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    chatToken?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    userName?: boolean
    email?: boolean
    userProfile?: boolean
    password?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    chatToken?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    userName?: boolean
    email?: boolean
    userProfile?: boolean
    password?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    chatToken?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "userName" | "email" | "userProfile" | "password" | "phoneNumber" | "createdAt" | "updatedAt" | "role" | "chatToken", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Session?: boolean | User$SessionArgs<ExtArgs>
    UserAddress?: boolean | User$UserAddressArgs<ExtArgs>
    TeamAdmin?: boolean | User$TeamAdminArgs<ExtArgs>
    TeamMember?: boolean | User$TeamMemberArgs<ExtArgs>
    TeamClient?: boolean | User$TeamClientArgs<ExtArgs>
    documents?: boolean | User$documentsArgs<ExtArgs>
    ToDoList?: boolean | User$ToDoListArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Session: Prisma.$SessionPayload<ExtArgs> | null
      UserAddress: Prisma.$AddressPayload<ExtArgs> | null
      TeamAdmin: Prisma.$TeamAdminPayload<ExtArgs> | null
      TeamMember: Prisma.$TeamMemberPayload<ExtArgs> | null
      TeamClient: Prisma.$TeamClientPayload<ExtArgs> | null
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      ToDoList: Prisma.$ToDoListPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string | null
      userName: string
      email: string
      userProfile: string | null
      password: string
      phoneNumber: string
      createdAt: Date
      updatedAt: Date
      role: $Enums.UserRole
      chatToken: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Session<T extends User$SessionArgs<ExtArgs> = {}>(args?: Subset<T, User$SessionArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    UserAddress<T extends User$UserAddressArgs<ExtArgs> = {}>(args?: Subset<T, User$UserAddressArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    TeamAdmin<T extends User$TeamAdminArgs<ExtArgs> = {}>(args?: Subset<T, User$TeamAdminArgs<ExtArgs>>): Prisma__TeamAdminClient<$Result.GetResult<Prisma.$TeamAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    TeamMember<T extends User$TeamMemberArgs<ExtArgs> = {}>(args?: Subset<T, User$TeamMemberArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    TeamClient<T extends User$TeamClientArgs<ExtArgs> = {}>(args?: Subset<T, User$TeamClientArgs<ExtArgs>>): Prisma__TeamClientClient<$Result.GetResult<Prisma.$TeamClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    documents<T extends User$documentsArgs<ExtArgs> = {}>(args?: Subset<T, User$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ToDoList<T extends User$ToDoListArgs<ExtArgs> = {}>(args?: Subset<T, User$ToDoListArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToDoListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly userName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly userProfile: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly chatToken: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.Session
   */
  export type User$SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
  }

  /**
   * User.UserAddress
   */
  export type User$UserAddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    where?: AddressWhereInput
  }

  /**
   * User.TeamAdmin
   */
  export type User$TeamAdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAdmin
     */
    select?: TeamAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAdmin
     */
    omit?: TeamAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAdminInclude<ExtArgs> | null
    where?: TeamAdminWhereInput
  }

  /**
   * User.TeamMember
   */
  export type User$TeamMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    where?: TeamMemberWhereInput
  }

  /**
   * User.TeamClient
   */
  export type User$TeamClientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamClient
     */
    select?: TeamClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamClient
     */
    omit?: TeamClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamClientInclude<ExtArgs> | null
    where?: TeamClientWhereInput
  }

  /**
   * User.documents
   */
  export type User$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * User.ToDoList
   */
  export type User$ToDoListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ToDoList
     */
    select?: ToDoListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ToDoList
     */
    omit?: ToDoListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToDoListInclude<ExtArgs> | null
    where?: ToDoListWhereInput
    orderBy?: ToDoListOrderByWithRelationInput | ToDoListOrderByWithRelationInput[]
    cursor?: ToDoListWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ToDoListScalarFieldEnum | ToDoListScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Address
   */

  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressMinAggregateOutputType = {
    id: string | null
    zip: string | null
    city: string | null
    state: string | null
    country: string | null
    userId: string | null
    createdAt: Date | null
    opponentId: string | null
  }

  export type AddressMaxAggregateOutputType = {
    id: string | null
    zip: string | null
    city: string | null
    state: string | null
    country: string | null
    userId: string | null
    createdAt: Date | null
    opponentId: string | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    zip: number
    city: number
    state: number
    country: number
    userId: number
    createdAt: number
    opponentId: number
    _all: number
  }


  export type AddressMinAggregateInputType = {
    id?: true
    zip?: true
    city?: true
    state?: true
    country?: true
    userId?: true
    createdAt?: true
    opponentId?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    zip?: true
    city?: true
    state?: true
    country?: true
    userId?: true
    createdAt?: true
    opponentId?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    zip?: true
    city?: true
    state?: true
    country?: true
    userId?: true
    createdAt?: true
    opponentId?: true
    _all?: true
  }

  export type AddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Address to aggregate.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithAggregationInput | AddressOrderByWithAggregationInput[]
    by: AddressScalarFieldEnum[] | AddressScalarFieldEnum
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }

  export type AddressGroupByOutputType = {
    id: string
    zip: string
    city: string
    state: string
    country: string
    userId: string | null
    createdAt: Date
    opponentId: string | null
    _count: AddressCountAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    zip?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    userId?: boolean
    createdAt?: boolean
    opponentId?: boolean
    user?: boolean | Address$userArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    zip?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    userId?: boolean
    createdAt?: boolean
    opponentId?: boolean
    user?: boolean | Address$userArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    zip?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    userId?: boolean
    createdAt?: boolean
    opponentId?: boolean
    user?: boolean | Address$userArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectScalar = {
    id?: boolean
    zip?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    userId?: boolean
    createdAt?: boolean
    opponentId?: boolean
  }

  export type AddressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "zip" | "city" | "state" | "country" | "userId" | "createdAt" | "opponentId", ExtArgs["result"]["address"]>
  export type AddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Address$userArgs<ExtArgs>
  }
  export type AddressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Address$userArgs<ExtArgs>
  }
  export type AddressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Address$userArgs<ExtArgs>
  }

  export type $AddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Address"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      zip: string
      city: string
      state: string
      country: string
      userId: string | null
      createdAt: Date
      opponentId: string | null
    }, ExtArgs["result"]["address"]>
    composites: {}
  }

  type AddressGetPayload<S extends boolean | null | undefined | AddressDefaultArgs> = $Result.GetResult<Prisma.$AddressPayload, S>

  type AddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AddressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AddressCountAggregateInputType | true
    }

  export interface AddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Address'], meta: { name: 'Address' } }
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AddressFindUniqueArgs>(args: SelectSubset<T, AddressFindUniqueArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Address that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs>(args: SelectSubset<T, AddressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AddressFindFirstArgs>(args?: SelectSubset<T, AddressFindFirstArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AddressFindFirstOrThrowArgs>(args?: SelectSubset<T, AddressFindFirstOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AddressFindManyArgs>(args?: SelectSubset<T, AddressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
     */
    create<T extends AddressCreateArgs>(args: SelectSubset<T, AddressCreateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Addresses.
     * @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AddressCreateManyArgs>(args?: SelectSubset<T, AddressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Addresses and returns the data saved in the database.
     * @param {AddressCreateManyAndReturnArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Addresses and only return the `id`
     * const addressWithIdOnly = await prisma.address.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AddressCreateManyAndReturnArgs>(args?: SelectSubset<T, AddressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
     */
    delete<T extends AddressDeleteArgs>(args: SelectSubset<T, AddressDeleteArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AddressUpdateArgs>(args: SelectSubset<T, AddressUpdateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AddressDeleteManyArgs>(args?: SelectSubset<T, AddressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AddressUpdateManyArgs>(args: SelectSubset<T, AddressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses and returns the data updated in the database.
     * @param {AddressUpdateManyAndReturnArgs} args - Arguments to update many Addresses.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Addresses and only return the `id`
     * const addressWithIdOnly = await prisma.address.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AddressUpdateManyAndReturnArgs>(args: SelectSubset<T, AddressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
     */
    upsert<T extends AddressUpsertArgs>(args: SelectSubset<T, AddressUpsertArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Address model
   */
  readonly fields: AddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Address$userArgs<ExtArgs> = {}>(args?: Subset<T, Address$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Address model
   */
  interface AddressFieldRefs {
    readonly id: FieldRef<"Address", 'String'>
    readonly zip: FieldRef<"Address", 'String'>
    readonly city: FieldRef<"Address", 'String'>
    readonly state: FieldRef<"Address", 'String'>
    readonly country: FieldRef<"Address", 'String'>
    readonly userId: FieldRef<"Address", 'String'>
    readonly createdAt: FieldRef<"Address", 'DateTime'>
    readonly opponentId: FieldRef<"Address", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findUniqueOrThrow
   */
  export type AddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findFirstOrThrow
   */
  export type AddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findMany
   */
  export type AddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Addresses to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address create
   */
  export type AddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to create a Address.
     */
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }

  /**
   * Address createMany
   */
  export type AddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Address createManyAndReturn
   */
  export type AddressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Address update
   */
  export type AddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to update a Address.
     */
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
    /**
     * Limit how many Addresses to update.
     */
    limit?: number
  }

  /**
   * Address updateManyAndReturn
   */
  export type AddressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
    /**
     * Limit how many Addresses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Address upsert
   */
  export type AddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The filter to search for the Address to update in case it exists.
     */
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     */
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }

  /**
   * Address delete
   */
  export type AddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter which Address to delete.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Addresses to delete
     */
    where?: AddressWhereInput
    /**
     * Limit how many Addresses to delete.
     */
    limit?: number
  }

  /**
   * Address.user
   */
  export type Address$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Address without action
   */
  export type AddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionKey: string | null
    expiresAt: Date | null
    createdAt: Date | null
    userId: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionKey: string | null
    expiresAt: Date | null
    createdAt: Date | null
    userId: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionKey: number
    expiresAt: number
    createdAt: number
    userId: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionKey?: true
    expiresAt?: true
    createdAt?: true
    userId?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionKey?: true
    expiresAt?: true
    createdAt?: true
    userId?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionKey?: true
    expiresAt?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionKey: string
    expiresAt: Date
    createdAt: Date
    userId: string
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionKey?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionKey?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionKey?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionKey?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionKey" | "expiresAt" | "createdAt" | "userId", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionKey: string
      expiresAt: Date
      createdAt: Date
      userId: string
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionKey: FieldRef<"Session", 'String'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly userId: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model TeamAdmin
   */

  export type AggregateTeamAdmin = {
    _count: TeamAdminCountAggregateOutputType | null
    _min: TeamAdminMinAggregateOutputType | null
    _max: TeamAdminMaxAggregateOutputType | null
  }

  export type TeamAdminMinAggregateOutputType = {
    id: string | null
    userId: string | null
    role: $Enums.UserRole | null
    isVerified: boolean | null
    createdAt: Date | null
  }

  export type TeamAdminMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    role: $Enums.UserRole | null
    isVerified: boolean | null
    createdAt: Date | null
  }

  export type TeamAdminCountAggregateOutputType = {
    id: number
    userId: number
    role: number
    isVerified: number
    createdAt: number
    _all: number
  }


  export type TeamAdminMinAggregateInputType = {
    id?: true
    userId?: true
    role?: true
    isVerified?: true
    createdAt?: true
  }

  export type TeamAdminMaxAggregateInputType = {
    id?: true
    userId?: true
    role?: true
    isVerified?: true
    createdAt?: true
  }

  export type TeamAdminCountAggregateInputType = {
    id?: true
    userId?: true
    role?: true
    isVerified?: true
    createdAt?: true
    _all?: true
  }

  export type TeamAdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamAdmin to aggregate.
     */
    where?: TeamAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamAdmins to fetch.
     */
    orderBy?: TeamAdminOrderByWithRelationInput | TeamAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamAdmins
    **/
    _count?: true | TeamAdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamAdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamAdminMaxAggregateInputType
  }

  export type GetTeamAdminAggregateType<T extends TeamAdminAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamAdmin[P]>
      : GetScalarType<T[P], AggregateTeamAdmin[P]>
  }




  export type TeamAdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamAdminWhereInput
    orderBy?: TeamAdminOrderByWithAggregationInput | TeamAdminOrderByWithAggregationInput[]
    by: TeamAdminScalarFieldEnum[] | TeamAdminScalarFieldEnum
    having?: TeamAdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamAdminCountAggregateInputType | true
    _min?: TeamAdminMinAggregateInputType
    _max?: TeamAdminMaxAggregateInputType
  }

  export type TeamAdminGroupByOutputType = {
    id: string
    userId: string | null
    role: $Enums.UserRole
    isVerified: boolean
    createdAt: Date
    _count: TeamAdminCountAggregateOutputType | null
    _min: TeamAdminMinAggregateOutputType | null
    _max: TeamAdminMaxAggregateOutputType | null
  }

  type GetTeamAdminGroupByPayload<T extends TeamAdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamAdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamAdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamAdminGroupByOutputType[P]>
            : GetScalarType<T[P], TeamAdminGroupByOutputType[P]>
        }
      >
    >


  export type TeamAdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    role?: boolean
    isVerified?: boolean
    createdAt?: boolean
    user?: boolean | TeamAdmin$userArgs<ExtArgs>
    cases?: boolean | TeamAdmin$casesArgs<ExtArgs>
    _count?: boolean | TeamAdminCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamAdmin"]>

  export type TeamAdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    role?: boolean
    isVerified?: boolean
    createdAt?: boolean
    user?: boolean | TeamAdmin$userArgs<ExtArgs>
  }, ExtArgs["result"]["teamAdmin"]>

  export type TeamAdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    role?: boolean
    isVerified?: boolean
    createdAt?: boolean
    user?: boolean | TeamAdmin$userArgs<ExtArgs>
  }, ExtArgs["result"]["teamAdmin"]>

  export type TeamAdminSelectScalar = {
    id?: boolean
    userId?: boolean
    role?: boolean
    isVerified?: boolean
    createdAt?: boolean
  }

  export type TeamAdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "role" | "isVerified" | "createdAt", ExtArgs["result"]["teamAdmin"]>
  export type TeamAdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TeamAdmin$userArgs<ExtArgs>
    cases?: boolean | TeamAdmin$casesArgs<ExtArgs>
    _count?: boolean | TeamAdminCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamAdminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TeamAdmin$userArgs<ExtArgs>
  }
  export type TeamAdminIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TeamAdmin$userArgs<ExtArgs>
  }

  export type $TeamAdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamAdmin"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      cases: Prisma.$CasePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      role: $Enums.UserRole
      isVerified: boolean
      createdAt: Date
    }, ExtArgs["result"]["teamAdmin"]>
    composites: {}
  }

  type TeamAdminGetPayload<S extends boolean | null | undefined | TeamAdminDefaultArgs> = $Result.GetResult<Prisma.$TeamAdminPayload, S>

  type TeamAdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamAdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamAdminCountAggregateInputType | true
    }

  export interface TeamAdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamAdmin'], meta: { name: 'TeamAdmin' } }
    /**
     * Find zero or one TeamAdmin that matches the filter.
     * @param {TeamAdminFindUniqueArgs} args - Arguments to find a TeamAdmin
     * @example
     * // Get one TeamAdmin
     * const teamAdmin = await prisma.teamAdmin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamAdminFindUniqueArgs>(args: SelectSubset<T, TeamAdminFindUniqueArgs<ExtArgs>>): Prisma__TeamAdminClient<$Result.GetResult<Prisma.$TeamAdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeamAdmin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamAdminFindUniqueOrThrowArgs} args - Arguments to find a TeamAdmin
     * @example
     * // Get one TeamAdmin
     * const teamAdmin = await prisma.teamAdmin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamAdminFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamAdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamAdminClient<$Result.GetResult<Prisma.$TeamAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamAdmin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAdminFindFirstArgs} args - Arguments to find a TeamAdmin
     * @example
     * // Get one TeamAdmin
     * const teamAdmin = await prisma.teamAdmin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamAdminFindFirstArgs>(args?: SelectSubset<T, TeamAdminFindFirstArgs<ExtArgs>>): Prisma__TeamAdminClient<$Result.GetResult<Prisma.$TeamAdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamAdmin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAdminFindFirstOrThrowArgs} args - Arguments to find a TeamAdmin
     * @example
     * // Get one TeamAdmin
     * const teamAdmin = await prisma.teamAdmin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamAdminFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamAdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamAdminClient<$Result.GetResult<Prisma.$TeamAdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeamAdmins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamAdmins
     * const teamAdmins = await prisma.teamAdmin.findMany()
     * 
     * // Get first 10 TeamAdmins
     * const teamAdmins = await prisma.teamAdmin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamAdminWithIdOnly = await prisma.teamAdmin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamAdminFindManyArgs>(args?: SelectSubset<T, TeamAdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamAdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeamAdmin.
     * @param {TeamAdminCreateArgs} args - Arguments to create a TeamAdmin.
     * @example
     * // Create one TeamAdmin
     * const TeamAdmin = await prisma.teamAdmin.create({
     *   data: {
     *     // ... data to create a TeamAdmin
     *   }
     * })
     * 
     */
    create<T extends TeamAdminCreateArgs>(args: SelectSubset<T, TeamAdminCreateArgs<ExtArgs>>): Prisma__TeamAdminClient<$Result.GetResult<Prisma.$TeamAdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeamAdmins.
     * @param {TeamAdminCreateManyArgs} args - Arguments to create many TeamAdmins.
     * @example
     * // Create many TeamAdmins
     * const teamAdmin = await prisma.teamAdmin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamAdminCreateManyArgs>(args?: SelectSubset<T, TeamAdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeamAdmins and returns the data saved in the database.
     * @param {TeamAdminCreateManyAndReturnArgs} args - Arguments to create many TeamAdmins.
     * @example
     * // Create many TeamAdmins
     * const teamAdmin = await prisma.teamAdmin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeamAdmins and only return the `id`
     * const teamAdminWithIdOnly = await prisma.teamAdmin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamAdminCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamAdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamAdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeamAdmin.
     * @param {TeamAdminDeleteArgs} args - Arguments to delete one TeamAdmin.
     * @example
     * // Delete one TeamAdmin
     * const TeamAdmin = await prisma.teamAdmin.delete({
     *   where: {
     *     // ... filter to delete one TeamAdmin
     *   }
     * })
     * 
     */
    delete<T extends TeamAdminDeleteArgs>(args: SelectSubset<T, TeamAdminDeleteArgs<ExtArgs>>): Prisma__TeamAdminClient<$Result.GetResult<Prisma.$TeamAdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeamAdmin.
     * @param {TeamAdminUpdateArgs} args - Arguments to update one TeamAdmin.
     * @example
     * // Update one TeamAdmin
     * const teamAdmin = await prisma.teamAdmin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamAdminUpdateArgs>(args: SelectSubset<T, TeamAdminUpdateArgs<ExtArgs>>): Prisma__TeamAdminClient<$Result.GetResult<Prisma.$TeamAdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeamAdmins.
     * @param {TeamAdminDeleteManyArgs} args - Arguments to filter TeamAdmins to delete.
     * @example
     * // Delete a few TeamAdmins
     * const { count } = await prisma.teamAdmin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamAdminDeleteManyArgs>(args?: SelectSubset<T, TeamAdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamAdmins
     * const teamAdmin = await prisma.teamAdmin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamAdminUpdateManyArgs>(args: SelectSubset<T, TeamAdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamAdmins and returns the data updated in the database.
     * @param {TeamAdminUpdateManyAndReturnArgs} args - Arguments to update many TeamAdmins.
     * @example
     * // Update many TeamAdmins
     * const teamAdmin = await prisma.teamAdmin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeamAdmins and only return the `id`
     * const teamAdminWithIdOnly = await prisma.teamAdmin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamAdminUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamAdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamAdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeamAdmin.
     * @param {TeamAdminUpsertArgs} args - Arguments to update or create a TeamAdmin.
     * @example
     * // Update or create a TeamAdmin
     * const teamAdmin = await prisma.teamAdmin.upsert({
     *   create: {
     *     // ... data to create a TeamAdmin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamAdmin we want to update
     *   }
     * })
     */
    upsert<T extends TeamAdminUpsertArgs>(args: SelectSubset<T, TeamAdminUpsertArgs<ExtArgs>>): Prisma__TeamAdminClient<$Result.GetResult<Prisma.$TeamAdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeamAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAdminCountArgs} args - Arguments to filter TeamAdmins to count.
     * @example
     * // Count the number of TeamAdmins
     * const count = await prisma.teamAdmin.count({
     *   where: {
     *     // ... the filter for the TeamAdmins we want to count
     *   }
     * })
    **/
    count<T extends TeamAdminCountArgs>(
      args?: Subset<T, TeamAdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamAdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAdminAggregateArgs>(args: Subset<T, TeamAdminAggregateArgs>): Prisma.PrismaPromise<GetTeamAdminAggregateType<T>>

    /**
     * Group by TeamAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamAdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamAdminGroupByArgs['orderBy'] }
        : { orderBy?: TeamAdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamAdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamAdmin model
   */
  readonly fields: TeamAdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamAdmin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamAdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends TeamAdmin$userArgs<ExtArgs> = {}>(args?: Subset<T, TeamAdmin$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    cases<T extends TeamAdmin$casesArgs<ExtArgs> = {}>(args?: Subset<T, TeamAdmin$casesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamAdmin model
   */
  interface TeamAdminFieldRefs {
    readonly id: FieldRef<"TeamAdmin", 'String'>
    readonly userId: FieldRef<"TeamAdmin", 'String'>
    readonly role: FieldRef<"TeamAdmin", 'UserRole'>
    readonly isVerified: FieldRef<"TeamAdmin", 'Boolean'>
    readonly createdAt: FieldRef<"TeamAdmin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TeamAdmin findUnique
   */
  export type TeamAdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAdmin
     */
    select?: TeamAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAdmin
     */
    omit?: TeamAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAdminInclude<ExtArgs> | null
    /**
     * Filter, which TeamAdmin to fetch.
     */
    where: TeamAdminWhereUniqueInput
  }

  /**
   * TeamAdmin findUniqueOrThrow
   */
  export type TeamAdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAdmin
     */
    select?: TeamAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAdmin
     */
    omit?: TeamAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAdminInclude<ExtArgs> | null
    /**
     * Filter, which TeamAdmin to fetch.
     */
    where: TeamAdminWhereUniqueInput
  }

  /**
   * TeamAdmin findFirst
   */
  export type TeamAdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAdmin
     */
    select?: TeamAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAdmin
     */
    omit?: TeamAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAdminInclude<ExtArgs> | null
    /**
     * Filter, which TeamAdmin to fetch.
     */
    where?: TeamAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamAdmins to fetch.
     */
    orderBy?: TeamAdminOrderByWithRelationInput | TeamAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamAdmins.
     */
    cursor?: TeamAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamAdmins.
     */
    distinct?: TeamAdminScalarFieldEnum | TeamAdminScalarFieldEnum[]
  }

  /**
   * TeamAdmin findFirstOrThrow
   */
  export type TeamAdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAdmin
     */
    select?: TeamAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAdmin
     */
    omit?: TeamAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAdminInclude<ExtArgs> | null
    /**
     * Filter, which TeamAdmin to fetch.
     */
    where?: TeamAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamAdmins to fetch.
     */
    orderBy?: TeamAdminOrderByWithRelationInput | TeamAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamAdmins.
     */
    cursor?: TeamAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamAdmins.
     */
    distinct?: TeamAdminScalarFieldEnum | TeamAdminScalarFieldEnum[]
  }

  /**
   * TeamAdmin findMany
   */
  export type TeamAdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAdmin
     */
    select?: TeamAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAdmin
     */
    omit?: TeamAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAdminInclude<ExtArgs> | null
    /**
     * Filter, which TeamAdmins to fetch.
     */
    where?: TeamAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamAdmins to fetch.
     */
    orderBy?: TeamAdminOrderByWithRelationInput | TeamAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamAdmins.
     */
    cursor?: TeamAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamAdmins.
     */
    skip?: number
    distinct?: TeamAdminScalarFieldEnum | TeamAdminScalarFieldEnum[]
  }

  /**
   * TeamAdmin create
   */
  export type TeamAdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAdmin
     */
    select?: TeamAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAdmin
     */
    omit?: TeamAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAdminInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamAdmin.
     */
    data?: XOR<TeamAdminCreateInput, TeamAdminUncheckedCreateInput>
  }

  /**
   * TeamAdmin createMany
   */
  export type TeamAdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamAdmins.
     */
    data: TeamAdminCreateManyInput | TeamAdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeamAdmin createManyAndReturn
   */
  export type TeamAdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAdmin
     */
    select?: TeamAdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAdmin
     */
    omit?: TeamAdminOmit<ExtArgs> | null
    /**
     * The data used to create many TeamAdmins.
     */
    data: TeamAdminCreateManyInput | TeamAdminCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAdminIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamAdmin update
   */
  export type TeamAdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAdmin
     */
    select?: TeamAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAdmin
     */
    omit?: TeamAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAdminInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamAdmin.
     */
    data: XOR<TeamAdminUpdateInput, TeamAdminUncheckedUpdateInput>
    /**
     * Choose, which TeamAdmin to update.
     */
    where: TeamAdminWhereUniqueInput
  }

  /**
   * TeamAdmin updateMany
   */
  export type TeamAdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamAdmins.
     */
    data: XOR<TeamAdminUpdateManyMutationInput, TeamAdminUncheckedUpdateManyInput>
    /**
     * Filter which TeamAdmins to update
     */
    where?: TeamAdminWhereInput
    /**
     * Limit how many TeamAdmins to update.
     */
    limit?: number
  }

  /**
   * TeamAdmin updateManyAndReturn
   */
  export type TeamAdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAdmin
     */
    select?: TeamAdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAdmin
     */
    omit?: TeamAdminOmit<ExtArgs> | null
    /**
     * The data used to update TeamAdmins.
     */
    data: XOR<TeamAdminUpdateManyMutationInput, TeamAdminUncheckedUpdateManyInput>
    /**
     * Filter which TeamAdmins to update
     */
    where?: TeamAdminWhereInput
    /**
     * Limit how many TeamAdmins to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAdminIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamAdmin upsert
   */
  export type TeamAdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAdmin
     */
    select?: TeamAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAdmin
     */
    omit?: TeamAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAdminInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamAdmin to update in case it exists.
     */
    where: TeamAdminWhereUniqueInput
    /**
     * In case the TeamAdmin found by the `where` argument doesn't exist, create a new TeamAdmin with this data.
     */
    create: XOR<TeamAdminCreateInput, TeamAdminUncheckedCreateInput>
    /**
     * In case the TeamAdmin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamAdminUpdateInput, TeamAdminUncheckedUpdateInput>
  }

  /**
   * TeamAdmin delete
   */
  export type TeamAdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAdmin
     */
    select?: TeamAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAdmin
     */
    omit?: TeamAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAdminInclude<ExtArgs> | null
    /**
     * Filter which TeamAdmin to delete.
     */
    where: TeamAdminWhereUniqueInput
  }

  /**
   * TeamAdmin deleteMany
   */
  export type TeamAdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamAdmins to delete
     */
    where?: TeamAdminWhereInput
    /**
     * Limit how many TeamAdmins to delete.
     */
    limit?: number
  }

  /**
   * TeamAdmin.user
   */
  export type TeamAdmin$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * TeamAdmin.cases
   */
  export type TeamAdmin$casesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    where?: CaseWhereInput
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    cursor?: CaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * TeamAdmin without action
   */
  export type TeamAdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAdmin
     */
    select?: TeamAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAdmin
     */
    omit?: TeamAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAdminInclude<ExtArgs> | null
  }


  /**
   * Model TeamMember
   */

  export type AggregateTeamMember = {
    _count: TeamMemberCountAggregateOutputType | null
    _min: TeamMemberMinAggregateOutputType | null
    _max: TeamMemberMaxAggregateOutputType | null
  }

  export type TeamMemberMinAggregateOutputType = {
    id: string | null
    userId: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
  }

  export type TeamMemberMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
  }

  export type TeamMemberCountAggregateOutputType = {
    id: number
    userId: number
    role: number
    createdAt: number
    _all: number
  }


  export type TeamMemberMinAggregateInputType = {
    id?: true
    userId?: true
    role?: true
    createdAt?: true
  }

  export type TeamMemberMaxAggregateInputType = {
    id?: true
    userId?: true
    role?: true
    createdAt?: true
  }

  export type TeamMemberCountAggregateInputType = {
    id?: true
    userId?: true
    role?: true
    createdAt?: true
    _all?: true
  }

  export type TeamMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamMember to aggregate.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamMembers
    **/
    _count?: true | TeamMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMemberMaxAggregateInputType
  }

  export type GetTeamMemberAggregateType<T extends TeamMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamMember[P]>
      : GetScalarType<T[P], AggregateTeamMember[P]>
  }




  export type TeamMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMemberWhereInput
    orderBy?: TeamMemberOrderByWithAggregationInput | TeamMemberOrderByWithAggregationInput[]
    by: TeamMemberScalarFieldEnum[] | TeamMemberScalarFieldEnum
    having?: TeamMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamMemberCountAggregateInputType | true
    _min?: TeamMemberMinAggregateInputType
    _max?: TeamMemberMaxAggregateInputType
  }

  export type TeamMemberGroupByOutputType = {
    id: string
    userId: string | null
    role: $Enums.UserRole
    createdAt: Date
    _count: TeamMemberCountAggregateOutputType | null
    _min: TeamMemberMinAggregateOutputType | null
    _max: TeamMemberMaxAggregateOutputType | null
  }

  type GetTeamMemberGroupByPayload<T extends TeamMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamMemberGroupByOutputType[P]>
            : GetScalarType<T[P], TeamMemberGroupByOutputType[P]>
        }
      >
    >


  export type TeamMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    user?: boolean | TeamMember$userArgs<ExtArgs>
    memberships?: boolean | TeamMember$membershipsArgs<ExtArgs>
    _count?: boolean | TeamMemberCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMember"]>

  export type TeamMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    user?: boolean | TeamMember$userArgs<ExtArgs>
  }, ExtArgs["result"]["teamMember"]>

  export type TeamMemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    user?: boolean | TeamMember$userArgs<ExtArgs>
  }, ExtArgs["result"]["teamMember"]>

  export type TeamMemberSelectScalar = {
    id?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
  }

  export type TeamMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "role" | "createdAt", ExtArgs["result"]["teamMember"]>
  export type TeamMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TeamMember$userArgs<ExtArgs>
    memberships?: boolean | TeamMember$membershipsArgs<ExtArgs>
    _count?: boolean | TeamMemberCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TeamMember$userArgs<ExtArgs>
  }
  export type TeamMemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TeamMember$userArgs<ExtArgs>
  }

  export type $TeamMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamMember"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      memberships: Prisma.$TeamMembershipPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      role: $Enums.UserRole
      createdAt: Date
    }, ExtArgs["result"]["teamMember"]>
    composites: {}
  }

  type TeamMemberGetPayload<S extends boolean | null | undefined | TeamMemberDefaultArgs> = $Result.GetResult<Prisma.$TeamMemberPayload, S>

  type TeamMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamMemberCountAggregateInputType | true
    }

  export interface TeamMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamMember'], meta: { name: 'TeamMember' } }
    /**
     * Find zero or one TeamMember that matches the filter.
     * @param {TeamMemberFindUniqueArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamMemberFindUniqueArgs>(args: SelectSubset<T, TeamMemberFindUniqueArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeamMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamMemberFindUniqueOrThrowArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindFirstArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamMemberFindFirstArgs>(args?: SelectSubset<T, TeamMemberFindFirstArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindFirstOrThrowArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeamMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamMembers
     * const teamMembers = await prisma.teamMember.findMany()
     * 
     * // Get first 10 TeamMembers
     * const teamMembers = await prisma.teamMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamMemberWithIdOnly = await prisma.teamMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamMemberFindManyArgs>(args?: SelectSubset<T, TeamMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeamMember.
     * @param {TeamMemberCreateArgs} args - Arguments to create a TeamMember.
     * @example
     * // Create one TeamMember
     * const TeamMember = await prisma.teamMember.create({
     *   data: {
     *     // ... data to create a TeamMember
     *   }
     * })
     * 
     */
    create<T extends TeamMemberCreateArgs>(args: SelectSubset<T, TeamMemberCreateArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeamMembers.
     * @param {TeamMemberCreateManyArgs} args - Arguments to create many TeamMembers.
     * @example
     * // Create many TeamMembers
     * const teamMember = await prisma.teamMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamMemberCreateManyArgs>(args?: SelectSubset<T, TeamMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeamMembers and returns the data saved in the database.
     * @param {TeamMemberCreateManyAndReturnArgs} args - Arguments to create many TeamMembers.
     * @example
     * // Create many TeamMembers
     * const teamMember = await prisma.teamMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeamMembers and only return the `id`
     * const teamMemberWithIdOnly = await prisma.teamMember.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeamMember.
     * @param {TeamMemberDeleteArgs} args - Arguments to delete one TeamMember.
     * @example
     * // Delete one TeamMember
     * const TeamMember = await prisma.teamMember.delete({
     *   where: {
     *     // ... filter to delete one TeamMember
     *   }
     * })
     * 
     */
    delete<T extends TeamMemberDeleteArgs>(args: SelectSubset<T, TeamMemberDeleteArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeamMember.
     * @param {TeamMemberUpdateArgs} args - Arguments to update one TeamMember.
     * @example
     * // Update one TeamMember
     * const teamMember = await prisma.teamMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamMemberUpdateArgs>(args: SelectSubset<T, TeamMemberUpdateArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeamMembers.
     * @param {TeamMemberDeleteManyArgs} args - Arguments to filter TeamMembers to delete.
     * @example
     * // Delete a few TeamMembers
     * const { count } = await prisma.teamMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamMemberDeleteManyArgs>(args?: SelectSubset<T, TeamMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamMembers
     * const teamMember = await prisma.teamMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamMemberUpdateManyArgs>(args: SelectSubset<T, TeamMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamMembers and returns the data updated in the database.
     * @param {TeamMemberUpdateManyAndReturnArgs} args - Arguments to update many TeamMembers.
     * @example
     * // Update many TeamMembers
     * const teamMember = await prisma.teamMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeamMembers and only return the `id`
     * const teamMemberWithIdOnly = await prisma.teamMember.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamMemberUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeamMember.
     * @param {TeamMemberUpsertArgs} args - Arguments to update or create a TeamMember.
     * @example
     * // Update or create a TeamMember
     * const teamMember = await prisma.teamMember.upsert({
     *   create: {
     *     // ... data to create a TeamMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamMember we want to update
     *   }
     * })
     */
    upsert<T extends TeamMemberUpsertArgs>(args: SelectSubset<T, TeamMemberUpsertArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberCountArgs} args - Arguments to filter TeamMembers to count.
     * @example
     * // Count the number of TeamMembers
     * const count = await prisma.teamMember.count({
     *   where: {
     *     // ... the filter for the TeamMembers we want to count
     *   }
     * })
    **/
    count<T extends TeamMemberCountArgs>(
      args?: Subset<T, TeamMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamMemberAggregateArgs>(args: Subset<T, TeamMemberAggregateArgs>): Prisma.PrismaPromise<GetTeamMemberAggregateType<T>>

    /**
     * Group by TeamMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamMemberGroupByArgs['orderBy'] }
        : { orderBy?: TeamMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamMember model
   */
  readonly fields: TeamMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends TeamMember$userArgs<ExtArgs> = {}>(args?: Subset<T, TeamMember$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    memberships<T extends TeamMember$membershipsArgs<ExtArgs> = {}>(args?: Subset<T, TeamMember$membershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamMember model
   */
  interface TeamMemberFieldRefs {
    readonly id: FieldRef<"TeamMember", 'String'>
    readonly userId: FieldRef<"TeamMember", 'String'>
    readonly role: FieldRef<"TeamMember", 'UserRole'>
    readonly createdAt: FieldRef<"TeamMember", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TeamMember findUnique
   */
  export type TeamMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember findUniqueOrThrow
   */
  export type TeamMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember findFirst
   */
  export type TeamMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamMembers.
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamMembers.
     */
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * TeamMember findFirstOrThrow
   */
  export type TeamMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamMembers.
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamMembers.
     */
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * TeamMember findMany
   */
  export type TeamMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembers to fetch.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamMembers.
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * TeamMember create
   */
  export type TeamMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamMember.
     */
    data?: XOR<TeamMemberCreateInput, TeamMemberUncheckedCreateInput>
  }

  /**
   * TeamMember createMany
   */
  export type TeamMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamMembers.
     */
    data: TeamMemberCreateManyInput | TeamMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeamMember createManyAndReturn
   */
  export type TeamMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * The data used to create many TeamMembers.
     */
    data: TeamMemberCreateManyInput | TeamMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamMember update
   */
  export type TeamMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamMember.
     */
    data: XOR<TeamMemberUpdateInput, TeamMemberUncheckedUpdateInput>
    /**
     * Choose, which TeamMember to update.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember updateMany
   */
  export type TeamMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamMembers.
     */
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyInput>
    /**
     * Filter which TeamMembers to update
     */
    where?: TeamMemberWhereInput
    /**
     * Limit how many TeamMembers to update.
     */
    limit?: number
  }

  /**
   * TeamMember updateManyAndReturn
   */
  export type TeamMemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * The data used to update TeamMembers.
     */
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyInput>
    /**
     * Filter which TeamMembers to update
     */
    where?: TeamMemberWhereInput
    /**
     * Limit how many TeamMembers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamMember upsert
   */
  export type TeamMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamMember to update in case it exists.
     */
    where: TeamMemberWhereUniqueInput
    /**
     * In case the TeamMember found by the `where` argument doesn't exist, create a new TeamMember with this data.
     */
    create: XOR<TeamMemberCreateInput, TeamMemberUncheckedCreateInput>
    /**
     * In case the TeamMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamMemberUpdateInput, TeamMemberUncheckedUpdateInput>
  }

  /**
   * TeamMember delete
   */
  export type TeamMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter which TeamMember to delete.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember deleteMany
   */
  export type TeamMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamMembers to delete
     */
    where?: TeamMemberWhereInput
    /**
     * Limit how many TeamMembers to delete.
     */
    limit?: number
  }

  /**
   * TeamMember.user
   */
  export type TeamMember$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * TeamMember.memberships
   */
  export type TeamMember$membershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembership
     */
    select?: TeamMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembership
     */
    omit?: TeamMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembershipInclude<ExtArgs> | null
    where?: TeamMembershipWhereInput
    orderBy?: TeamMembershipOrderByWithRelationInput | TeamMembershipOrderByWithRelationInput[]
    cursor?: TeamMembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamMembershipScalarFieldEnum | TeamMembershipScalarFieldEnum[]
  }

  /**
   * TeamMember without action
   */
  export type TeamMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
  }


  /**
   * Model Opponent
   */

  export type AggregateOpponent = {
    _count: OpponentCountAggregateOutputType | null
    _min: OpponentMinAggregateOutputType | null
    _max: OpponentMaxAggregateOutputType | null
  }

  export type OpponentMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    jobTitle: string | null
    email: string | null
    phoneNumber: string | null
    zip: string | null
    city: string | null
    state: string | null
    country: string | null
  }

  export type OpponentMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    jobTitle: string | null
    email: string | null
    phoneNumber: string | null
    zip: string | null
    city: string | null
    state: string | null
    country: string | null
  }

  export type OpponentCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    jobTitle: number
    email: number
    phoneNumber: number
    zip: number
    city: number
    state: number
    country: number
    _all: number
  }


  export type OpponentMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    jobTitle?: true
    email?: true
    phoneNumber?: true
    zip?: true
    city?: true
    state?: true
    country?: true
  }

  export type OpponentMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    jobTitle?: true
    email?: true
    phoneNumber?: true
    zip?: true
    city?: true
    state?: true
    country?: true
  }

  export type OpponentCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    jobTitle?: true
    email?: true
    phoneNumber?: true
    zip?: true
    city?: true
    state?: true
    country?: true
    _all?: true
  }

  export type OpponentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Opponent to aggregate.
     */
    where?: OpponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Opponents to fetch.
     */
    orderBy?: OpponentOrderByWithRelationInput | OpponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OpponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Opponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Opponents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Opponents
    **/
    _count?: true | OpponentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OpponentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OpponentMaxAggregateInputType
  }

  export type GetOpponentAggregateType<T extends OpponentAggregateArgs> = {
        [P in keyof T & keyof AggregateOpponent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOpponent[P]>
      : GetScalarType<T[P], AggregateOpponent[P]>
  }




  export type OpponentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OpponentWhereInput
    orderBy?: OpponentOrderByWithAggregationInput | OpponentOrderByWithAggregationInput[]
    by: OpponentScalarFieldEnum[] | OpponentScalarFieldEnum
    having?: OpponentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OpponentCountAggregateInputType | true
    _min?: OpponentMinAggregateInputType
    _max?: OpponentMaxAggregateInputType
  }

  export type OpponentGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    jobTitle: string | null
    email: string | null
    phoneNumber: string | null
    zip: string
    city: string
    state: string
    country: string
    _count: OpponentCountAggregateOutputType | null
    _min: OpponentMinAggregateOutputType | null
    _max: OpponentMaxAggregateOutputType | null
  }

  type GetOpponentGroupByPayload<T extends OpponentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OpponentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OpponentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OpponentGroupByOutputType[P]>
            : GetScalarType<T[P], OpponentGroupByOutputType[P]>
        }
      >
    >


  export type OpponentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    jobTitle?: boolean
    email?: boolean
    phoneNumber?: boolean
    zip?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    Case?: boolean | Opponent$CaseArgs<ExtArgs>
  }, ExtArgs["result"]["opponent"]>

  export type OpponentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    jobTitle?: boolean
    email?: boolean
    phoneNumber?: boolean
    zip?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
  }, ExtArgs["result"]["opponent"]>

  export type OpponentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    jobTitle?: boolean
    email?: boolean
    phoneNumber?: boolean
    zip?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
  }, ExtArgs["result"]["opponent"]>

  export type OpponentSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    jobTitle?: boolean
    email?: boolean
    phoneNumber?: boolean
    zip?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
  }

  export type OpponentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "jobTitle" | "email" | "phoneNumber" | "zip" | "city" | "state" | "country", ExtArgs["result"]["opponent"]>
  export type OpponentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Case?: boolean | Opponent$CaseArgs<ExtArgs>
  }
  export type OpponentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type OpponentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OpponentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Opponent"
    objects: {
      Case: Prisma.$CasePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      jobTitle: string | null
      email: string | null
      phoneNumber: string | null
      zip: string
      city: string
      state: string
      country: string
    }, ExtArgs["result"]["opponent"]>
    composites: {}
  }

  type OpponentGetPayload<S extends boolean | null | undefined | OpponentDefaultArgs> = $Result.GetResult<Prisma.$OpponentPayload, S>

  type OpponentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OpponentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OpponentCountAggregateInputType | true
    }

  export interface OpponentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Opponent'], meta: { name: 'Opponent' } }
    /**
     * Find zero or one Opponent that matches the filter.
     * @param {OpponentFindUniqueArgs} args - Arguments to find a Opponent
     * @example
     * // Get one Opponent
     * const opponent = await prisma.opponent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OpponentFindUniqueArgs>(args: SelectSubset<T, OpponentFindUniqueArgs<ExtArgs>>): Prisma__OpponentClient<$Result.GetResult<Prisma.$OpponentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Opponent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OpponentFindUniqueOrThrowArgs} args - Arguments to find a Opponent
     * @example
     * // Get one Opponent
     * const opponent = await prisma.opponent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OpponentFindUniqueOrThrowArgs>(args: SelectSubset<T, OpponentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OpponentClient<$Result.GetResult<Prisma.$OpponentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Opponent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpponentFindFirstArgs} args - Arguments to find a Opponent
     * @example
     * // Get one Opponent
     * const opponent = await prisma.opponent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OpponentFindFirstArgs>(args?: SelectSubset<T, OpponentFindFirstArgs<ExtArgs>>): Prisma__OpponentClient<$Result.GetResult<Prisma.$OpponentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Opponent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpponentFindFirstOrThrowArgs} args - Arguments to find a Opponent
     * @example
     * // Get one Opponent
     * const opponent = await prisma.opponent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OpponentFindFirstOrThrowArgs>(args?: SelectSubset<T, OpponentFindFirstOrThrowArgs<ExtArgs>>): Prisma__OpponentClient<$Result.GetResult<Prisma.$OpponentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Opponents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpponentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Opponents
     * const opponents = await prisma.opponent.findMany()
     * 
     * // Get first 10 Opponents
     * const opponents = await prisma.opponent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const opponentWithIdOnly = await prisma.opponent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OpponentFindManyArgs>(args?: SelectSubset<T, OpponentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpponentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Opponent.
     * @param {OpponentCreateArgs} args - Arguments to create a Opponent.
     * @example
     * // Create one Opponent
     * const Opponent = await prisma.opponent.create({
     *   data: {
     *     // ... data to create a Opponent
     *   }
     * })
     * 
     */
    create<T extends OpponentCreateArgs>(args: SelectSubset<T, OpponentCreateArgs<ExtArgs>>): Prisma__OpponentClient<$Result.GetResult<Prisma.$OpponentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Opponents.
     * @param {OpponentCreateManyArgs} args - Arguments to create many Opponents.
     * @example
     * // Create many Opponents
     * const opponent = await prisma.opponent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OpponentCreateManyArgs>(args?: SelectSubset<T, OpponentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Opponents and returns the data saved in the database.
     * @param {OpponentCreateManyAndReturnArgs} args - Arguments to create many Opponents.
     * @example
     * // Create many Opponents
     * const opponent = await prisma.opponent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Opponents and only return the `id`
     * const opponentWithIdOnly = await prisma.opponent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OpponentCreateManyAndReturnArgs>(args?: SelectSubset<T, OpponentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpponentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Opponent.
     * @param {OpponentDeleteArgs} args - Arguments to delete one Opponent.
     * @example
     * // Delete one Opponent
     * const Opponent = await prisma.opponent.delete({
     *   where: {
     *     // ... filter to delete one Opponent
     *   }
     * })
     * 
     */
    delete<T extends OpponentDeleteArgs>(args: SelectSubset<T, OpponentDeleteArgs<ExtArgs>>): Prisma__OpponentClient<$Result.GetResult<Prisma.$OpponentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Opponent.
     * @param {OpponentUpdateArgs} args - Arguments to update one Opponent.
     * @example
     * // Update one Opponent
     * const opponent = await prisma.opponent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OpponentUpdateArgs>(args: SelectSubset<T, OpponentUpdateArgs<ExtArgs>>): Prisma__OpponentClient<$Result.GetResult<Prisma.$OpponentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Opponents.
     * @param {OpponentDeleteManyArgs} args - Arguments to filter Opponents to delete.
     * @example
     * // Delete a few Opponents
     * const { count } = await prisma.opponent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OpponentDeleteManyArgs>(args?: SelectSubset<T, OpponentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Opponents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpponentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Opponents
     * const opponent = await prisma.opponent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OpponentUpdateManyArgs>(args: SelectSubset<T, OpponentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Opponents and returns the data updated in the database.
     * @param {OpponentUpdateManyAndReturnArgs} args - Arguments to update many Opponents.
     * @example
     * // Update many Opponents
     * const opponent = await prisma.opponent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Opponents and only return the `id`
     * const opponentWithIdOnly = await prisma.opponent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OpponentUpdateManyAndReturnArgs>(args: SelectSubset<T, OpponentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpponentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Opponent.
     * @param {OpponentUpsertArgs} args - Arguments to update or create a Opponent.
     * @example
     * // Update or create a Opponent
     * const opponent = await prisma.opponent.upsert({
     *   create: {
     *     // ... data to create a Opponent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Opponent we want to update
     *   }
     * })
     */
    upsert<T extends OpponentUpsertArgs>(args: SelectSubset<T, OpponentUpsertArgs<ExtArgs>>): Prisma__OpponentClient<$Result.GetResult<Prisma.$OpponentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Opponents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpponentCountArgs} args - Arguments to filter Opponents to count.
     * @example
     * // Count the number of Opponents
     * const count = await prisma.opponent.count({
     *   where: {
     *     // ... the filter for the Opponents we want to count
     *   }
     * })
    **/
    count<T extends OpponentCountArgs>(
      args?: Subset<T, OpponentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OpponentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Opponent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpponentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OpponentAggregateArgs>(args: Subset<T, OpponentAggregateArgs>): Prisma.PrismaPromise<GetOpponentAggregateType<T>>

    /**
     * Group by Opponent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpponentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OpponentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OpponentGroupByArgs['orderBy'] }
        : { orderBy?: OpponentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OpponentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOpponentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Opponent model
   */
  readonly fields: OpponentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Opponent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OpponentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Case<T extends Opponent$CaseArgs<ExtArgs> = {}>(args?: Subset<T, Opponent$CaseArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Opponent model
   */
  interface OpponentFieldRefs {
    readonly id: FieldRef<"Opponent", 'String'>
    readonly firstName: FieldRef<"Opponent", 'String'>
    readonly lastName: FieldRef<"Opponent", 'String'>
    readonly jobTitle: FieldRef<"Opponent", 'String'>
    readonly email: FieldRef<"Opponent", 'String'>
    readonly phoneNumber: FieldRef<"Opponent", 'String'>
    readonly zip: FieldRef<"Opponent", 'String'>
    readonly city: FieldRef<"Opponent", 'String'>
    readonly state: FieldRef<"Opponent", 'String'>
    readonly country: FieldRef<"Opponent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Opponent findUnique
   */
  export type OpponentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opponent
     */
    select?: OpponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opponent
     */
    omit?: OpponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpponentInclude<ExtArgs> | null
    /**
     * Filter, which Opponent to fetch.
     */
    where: OpponentWhereUniqueInput
  }

  /**
   * Opponent findUniqueOrThrow
   */
  export type OpponentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opponent
     */
    select?: OpponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opponent
     */
    omit?: OpponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpponentInclude<ExtArgs> | null
    /**
     * Filter, which Opponent to fetch.
     */
    where: OpponentWhereUniqueInput
  }

  /**
   * Opponent findFirst
   */
  export type OpponentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opponent
     */
    select?: OpponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opponent
     */
    omit?: OpponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpponentInclude<ExtArgs> | null
    /**
     * Filter, which Opponent to fetch.
     */
    where?: OpponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Opponents to fetch.
     */
    orderBy?: OpponentOrderByWithRelationInput | OpponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Opponents.
     */
    cursor?: OpponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Opponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Opponents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Opponents.
     */
    distinct?: OpponentScalarFieldEnum | OpponentScalarFieldEnum[]
  }

  /**
   * Opponent findFirstOrThrow
   */
  export type OpponentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opponent
     */
    select?: OpponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opponent
     */
    omit?: OpponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpponentInclude<ExtArgs> | null
    /**
     * Filter, which Opponent to fetch.
     */
    where?: OpponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Opponents to fetch.
     */
    orderBy?: OpponentOrderByWithRelationInput | OpponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Opponents.
     */
    cursor?: OpponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Opponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Opponents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Opponents.
     */
    distinct?: OpponentScalarFieldEnum | OpponentScalarFieldEnum[]
  }

  /**
   * Opponent findMany
   */
  export type OpponentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opponent
     */
    select?: OpponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opponent
     */
    omit?: OpponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpponentInclude<ExtArgs> | null
    /**
     * Filter, which Opponents to fetch.
     */
    where?: OpponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Opponents to fetch.
     */
    orderBy?: OpponentOrderByWithRelationInput | OpponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Opponents.
     */
    cursor?: OpponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Opponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Opponents.
     */
    skip?: number
    distinct?: OpponentScalarFieldEnum | OpponentScalarFieldEnum[]
  }

  /**
   * Opponent create
   */
  export type OpponentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opponent
     */
    select?: OpponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opponent
     */
    omit?: OpponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpponentInclude<ExtArgs> | null
    /**
     * The data needed to create a Opponent.
     */
    data: XOR<OpponentCreateInput, OpponentUncheckedCreateInput>
  }

  /**
   * Opponent createMany
   */
  export type OpponentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Opponents.
     */
    data: OpponentCreateManyInput | OpponentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Opponent createManyAndReturn
   */
  export type OpponentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opponent
     */
    select?: OpponentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Opponent
     */
    omit?: OpponentOmit<ExtArgs> | null
    /**
     * The data used to create many Opponents.
     */
    data: OpponentCreateManyInput | OpponentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Opponent update
   */
  export type OpponentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opponent
     */
    select?: OpponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opponent
     */
    omit?: OpponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpponentInclude<ExtArgs> | null
    /**
     * The data needed to update a Opponent.
     */
    data: XOR<OpponentUpdateInput, OpponentUncheckedUpdateInput>
    /**
     * Choose, which Opponent to update.
     */
    where: OpponentWhereUniqueInput
  }

  /**
   * Opponent updateMany
   */
  export type OpponentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Opponents.
     */
    data: XOR<OpponentUpdateManyMutationInput, OpponentUncheckedUpdateManyInput>
    /**
     * Filter which Opponents to update
     */
    where?: OpponentWhereInput
    /**
     * Limit how many Opponents to update.
     */
    limit?: number
  }

  /**
   * Opponent updateManyAndReturn
   */
  export type OpponentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opponent
     */
    select?: OpponentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Opponent
     */
    omit?: OpponentOmit<ExtArgs> | null
    /**
     * The data used to update Opponents.
     */
    data: XOR<OpponentUpdateManyMutationInput, OpponentUncheckedUpdateManyInput>
    /**
     * Filter which Opponents to update
     */
    where?: OpponentWhereInput
    /**
     * Limit how many Opponents to update.
     */
    limit?: number
  }

  /**
   * Opponent upsert
   */
  export type OpponentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opponent
     */
    select?: OpponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opponent
     */
    omit?: OpponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpponentInclude<ExtArgs> | null
    /**
     * The filter to search for the Opponent to update in case it exists.
     */
    where: OpponentWhereUniqueInput
    /**
     * In case the Opponent found by the `where` argument doesn't exist, create a new Opponent with this data.
     */
    create: XOR<OpponentCreateInput, OpponentUncheckedCreateInput>
    /**
     * In case the Opponent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OpponentUpdateInput, OpponentUncheckedUpdateInput>
  }

  /**
   * Opponent delete
   */
  export type OpponentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opponent
     */
    select?: OpponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opponent
     */
    omit?: OpponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpponentInclude<ExtArgs> | null
    /**
     * Filter which Opponent to delete.
     */
    where: OpponentWhereUniqueInput
  }

  /**
   * Opponent deleteMany
   */
  export type OpponentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Opponents to delete
     */
    where?: OpponentWhereInput
    /**
     * Limit how many Opponents to delete.
     */
    limit?: number
  }

  /**
   * Opponent.Case
   */
  export type Opponent$CaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    where?: CaseWhereInput
  }

  /**
   * Opponent without action
   */
  export type OpponentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opponent
     */
    select?: OpponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opponent
     */
    omit?: OpponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpponentInclude<ExtArgs> | null
  }


  /**
   * Model TeamClient
   */

  export type AggregateTeamClient = {
    _count: TeamClientCountAggregateOutputType | null
    _min: TeamClientMinAggregateOutputType | null
    _max: TeamClientMaxAggregateOutputType | null
  }

  export type TeamClientMinAggregateOutputType = {
    id: string | null
    userId: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
  }

  export type TeamClientMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
  }

  export type TeamClientCountAggregateOutputType = {
    id: number
    userId: number
    role: number
    createdAt: number
    _all: number
  }


  export type TeamClientMinAggregateInputType = {
    id?: true
    userId?: true
    role?: true
    createdAt?: true
  }

  export type TeamClientMaxAggregateInputType = {
    id?: true
    userId?: true
    role?: true
    createdAt?: true
  }

  export type TeamClientCountAggregateInputType = {
    id?: true
    userId?: true
    role?: true
    createdAt?: true
    _all?: true
  }

  export type TeamClientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamClient to aggregate.
     */
    where?: TeamClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamClients to fetch.
     */
    orderBy?: TeamClientOrderByWithRelationInput | TeamClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamClients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamClients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamClients
    **/
    _count?: true | TeamClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamClientMaxAggregateInputType
  }

  export type GetTeamClientAggregateType<T extends TeamClientAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamClient[P]>
      : GetScalarType<T[P], AggregateTeamClient[P]>
  }




  export type TeamClientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamClientWhereInput
    orderBy?: TeamClientOrderByWithAggregationInput | TeamClientOrderByWithAggregationInput[]
    by: TeamClientScalarFieldEnum[] | TeamClientScalarFieldEnum
    having?: TeamClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamClientCountAggregateInputType | true
    _min?: TeamClientMinAggregateInputType
    _max?: TeamClientMaxAggregateInputType
  }

  export type TeamClientGroupByOutputType = {
    id: string
    userId: string | null
    role: $Enums.UserRole
    createdAt: Date
    _count: TeamClientCountAggregateOutputType | null
    _min: TeamClientMinAggregateOutputType | null
    _max: TeamClientMaxAggregateOutputType | null
  }

  type GetTeamClientGroupByPayload<T extends TeamClientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamClientGroupByOutputType[P]>
            : GetScalarType<T[P], TeamClientGroupByOutputType[P]>
        }
      >
    >


  export type TeamClientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    user?: boolean | TeamClient$userArgs<ExtArgs>
    cases?: boolean | TeamClient$casesArgs<ExtArgs>
    _count?: boolean | TeamClientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamClient"]>

  export type TeamClientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    user?: boolean | TeamClient$userArgs<ExtArgs>
  }, ExtArgs["result"]["teamClient"]>

  export type TeamClientSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    user?: boolean | TeamClient$userArgs<ExtArgs>
  }, ExtArgs["result"]["teamClient"]>

  export type TeamClientSelectScalar = {
    id?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
  }

  export type TeamClientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "role" | "createdAt", ExtArgs["result"]["teamClient"]>
  export type TeamClientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TeamClient$userArgs<ExtArgs>
    cases?: boolean | TeamClient$casesArgs<ExtArgs>
    _count?: boolean | TeamClientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamClientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TeamClient$userArgs<ExtArgs>
  }
  export type TeamClientIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TeamClient$userArgs<ExtArgs>
  }

  export type $TeamClientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamClient"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      cases: Prisma.$CasePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      role: $Enums.UserRole
      createdAt: Date
    }, ExtArgs["result"]["teamClient"]>
    composites: {}
  }

  type TeamClientGetPayload<S extends boolean | null | undefined | TeamClientDefaultArgs> = $Result.GetResult<Prisma.$TeamClientPayload, S>

  type TeamClientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamClientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamClientCountAggregateInputType | true
    }

  export interface TeamClientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamClient'], meta: { name: 'TeamClient' } }
    /**
     * Find zero or one TeamClient that matches the filter.
     * @param {TeamClientFindUniqueArgs} args - Arguments to find a TeamClient
     * @example
     * // Get one TeamClient
     * const teamClient = await prisma.teamClient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamClientFindUniqueArgs>(args: SelectSubset<T, TeamClientFindUniqueArgs<ExtArgs>>): Prisma__TeamClientClient<$Result.GetResult<Prisma.$TeamClientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeamClient that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamClientFindUniqueOrThrowArgs} args - Arguments to find a TeamClient
     * @example
     * // Get one TeamClient
     * const teamClient = await prisma.teamClient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamClientFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamClientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClientClient<$Result.GetResult<Prisma.$TeamClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamClient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamClientFindFirstArgs} args - Arguments to find a TeamClient
     * @example
     * // Get one TeamClient
     * const teamClient = await prisma.teamClient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamClientFindFirstArgs>(args?: SelectSubset<T, TeamClientFindFirstArgs<ExtArgs>>): Prisma__TeamClientClient<$Result.GetResult<Prisma.$TeamClientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamClient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamClientFindFirstOrThrowArgs} args - Arguments to find a TeamClient
     * @example
     * // Get one TeamClient
     * const teamClient = await prisma.teamClient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamClientFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamClientFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClientClient<$Result.GetResult<Prisma.$TeamClientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeamClients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamClientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamClients
     * const teamClients = await prisma.teamClient.findMany()
     * 
     * // Get first 10 TeamClients
     * const teamClients = await prisma.teamClient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamClientWithIdOnly = await prisma.teamClient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamClientFindManyArgs>(args?: SelectSubset<T, TeamClientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamClientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeamClient.
     * @param {TeamClientCreateArgs} args - Arguments to create a TeamClient.
     * @example
     * // Create one TeamClient
     * const TeamClient = await prisma.teamClient.create({
     *   data: {
     *     // ... data to create a TeamClient
     *   }
     * })
     * 
     */
    create<T extends TeamClientCreateArgs>(args: SelectSubset<T, TeamClientCreateArgs<ExtArgs>>): Prisma__TeamClientClient<$Result.GetResult<Prisma.$TeamClientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeamClients.
     * @param {TeamClientCreateManyArgs} args - Arguments to create many TeamClients.
     * @example
     * // Create many TeamClients
     * const teamClient = await prisma.teamClient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamClientCreateManyArgs>(args?: SelectSubset<T, TeamClientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeamClients and returns the data saved in the database.
     * @param {TeamClientCreateManyAndReturnArgs} args - Arguments to create many TeamClients.
     * @example
     * // Create many TeamClients
     * const teamClient = await prisma.teamClient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeamClients and only return the `id`
     * const teamClientWithIdOnly = await prisma.teamClient.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamClientCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamClientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamClientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeamClient.
     * @param {TeamClientDeleteArgs} args - Arguments to delete one TeamClient.
     * @example
     * // Delete one TeamClient
     * const TeamClient = await prisma.teamClient.delete({
     *   where: {
     *     // ... filter to delete one TeamClient
     *   }
     * })
     * 
     */
    delete<T extends TeamClientDeleteArgs>(args: SelectSubset<T, TeamClientDeleteArgs<ExtArgs>>): Prisma__TeamClientClient<$Result.GetResult<Prisma.$TeamClientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeamClient.
     * @param {TeamClientUpdateArgs} args - Arguments to update one TeamClient.
     * @example
     * // Update one TeamClient
     * const teamClient = await prisma.teamClient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamClientUpdateArgs>(args: SelectSubset<T, TeamClientUpdateArgs<ExtArgs>>): Prisma__TeamClientClient<$Result.GetResult<Prisma.$TeamClientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeamClients.
     * @param {TeamClientDeleteManyArgs} args - Arguments to filter TeamClients to delete.
     * @example
     * // Delete a few TeamClients
     * const { count } = await prisma.teamClient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamClientDeleteManyArgs>(args?: SelectSubset<T, TeamClientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamClients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamClients
     * const teamClient = await prisma.teamClient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamClientUpdateManyArgs>(args: SelectSubset<T, TeamClientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamClients and returns the data updated in the database.
     * @param {TeamClientUpdateManyAndReturnArgs} args - Arguments to update many TeamClients.
     * @example
     * // Update many TeamClients
     * const teamClient = await prisma.teamClient.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeamClients and only return the `id`
     * const teamClientWithIdOnly = await prisma.teamClient.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamClientUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamClientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamClientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeamClient.
     * @param {TeamClientUpsertArgs} args - Arguments to update or create a TeamClient.
     * @example
     * // Update or create a TeamClient
     * const teamClient = await prisma.teamClient.upsert({
     *   create: {
     *     // ... data to create a TeamClient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamClient we want to update
     *   }
     * })
     */
    upsert<T extends TeamClientUpsertArgs>(args: SelectSubset<T, TeamClientUpsertArgs<ExtArgs>>): Prisma__TeamClientClient<$Result.GetResult<Prisma.$TeamClientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeamClients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamClientCountArgs} args - Arguments to filter TeamClients to count.
     * @example
     * // Count the number of TeamClients
     * const count = await prisma.teamClient.count({
     *   where: {
     *     // ... the filter for the TeamClients we want to count
     *   }
     * })
    **/
    count<T extends TeamClientCountArgs>(
      args?: Subset<T, TeamClientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamClient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamClientAggregateArgs>(args: Subset<T, TeamClientAggregateArgs>): Prisma.PrismaPromise<GetTeamClientAggregateType<T>>

    /**
     * Group by TeamClient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamClientGroupByArgs['orderBy'] }
        : { orderBy?: TeamClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamClient model
   */
  readonly fields: TeamClientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamClient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends TeamClient$userArgs<ExtArgs> = {}>(args?: Subset<T, TeamClient$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    cases<T extends TeamClient$casesArgs<ExtArgs> = {}>(args?: Subset<T, TeamClient$casesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamClient model
   */
  interface TeamClientFieldRefs {
    readonly id: FieldRef<"TeamClient", 'String'>
    readonly userId: FieldRef<"TeamClient", 'String'>
    readonly role: FieldRef<"TeamClient", 'UserRole'>
    readonly createdAt: FieldRef<"TeamClient", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TeamClient findUnique
   */
  export type TeamClientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamClient
     */
    select?: TeamClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamClient
     */
    omit?: TeamClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamClientInclude<ExtArgs> | null
    /**
     * Filter, which TeamClient to fetch.
     */
    where: TeamClientWhereUniqueInput
  }

  /**
   * TeamClient findUniqueOrThrow
   */
  export type TeamClientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamClient
     */
    select?: TeamClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamClient
     */
    omit?: TeamClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamClientInclude<ExtArgs> | null
    /**
     * Filter, which TeamClient to fetch.
     */
    where: TeamClientWhereUniqueInput
  }

  /**
   * TeamClient findFirst
   */
  export type TeamClientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamClient
     */
    select?: TeamClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamClient
     */
    omit?: TeamClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamClientInclude<ExtArgs> | null
    /**
     * Filter, which TeamClient to fetch.
     */
    where?: TeamClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamClients to fetch.
     */
    orderBy?: TeamClientOrderByWithRelationInput | TeamClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamClients.
     */
    cursor?: TeamClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamClients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamClients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamClients.
     */
    distinct?: TeamClientScalarFieldEnum | TeamClientScalarFieldEnum[]
  }

  /**
   * TeamClient findFirstOrThrow
   */
  export type TeamClientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamClient
     */
    select?: TeamClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamClient
     */
    omit?: TeamClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamClientInclude<ExtArgs> | null
    /**
     * Filter, which TeamClient to fetch.
     */
    where?: TeamClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamClients to fetch.
     */
    orderBy?: TeamClientOrderByWithRelationInput | TeamClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamClients.
     */
    cursor?: TeamClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamClients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamClients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamClients.
     */
    distinct?: TeamClientScalarFieldEnum | TeamClientScalarFieldEnum[]
  }

  /**
   * TeamClient findMany
   */
  export type TeamClientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamClient
     */
    select?: TeamClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamClient
     */
    omit?: TeamClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamClientInclude<ExtArgs> | null
    /**
     * Filter, which TeamClients to fetch.
     */
    where?: TeamClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamClients to fetch.
     */
    orderBy?: TeamClientOrderByWithRelationInput | TeamClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamClients.
     */
    cursor?: TeamClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamClients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamClients.
     */
    skip?: number
    distinct?: TeamClientScalarFieldEnum | TeamClientScalarFieldEnum[]
  }

  /**
   * TeamClient create
   */
  export type TeamClientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamClient
     */
    select?: TeamClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamClient
     */
    omit?: TeamClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamClientInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamClient.
     */
    data?: XOR<TeamClientCreateInput, TeamClientUncheckedCreateInput>
  }

  /**
   * TeamClient createMany
   */
  export type TeamClientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamClients.
     */
    data: TeamClientCreateManyInput | TeamClientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeamClient createManyAndReturn
   */
  export type TeamClientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamClient
     */
    select?: TeamClientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamClient
     */
    omit?: TeamClientOmit<ExtArgs> | null
    /**
     * The data used to create many TeamClients.
     */
    data: TeamClientCreateManyInput | TeamClientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamClientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamClient update
   */
  export type TeamClientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamClient
     */
    select?: TeamClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamClient
     */
    omit?: TeamClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamClientInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamClient.
     */
    data: XOR<TeamClientUpdateInput, TeamClientUncheckedUpdateInput>
    /**
     * Choose, which TeamClient to update.
     */
    where: TeamClientWhereUniqueInput
  }

  /**
   * TeamClient updateMany
   */
  export type TeamClientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamClients.
     */
    data: XOR<TeamClientUpdateManyMutationInput, TeamClientUncheckedUpdateManyInput>
    /**
     * Filter which TeamClients to update
     */
    where?: TeamClientWhereInput
    /**
     * Limit how many TeamClients to update.
     */
    limit?: number
  }

  /**
   * TeamClient updateManyAndReturn
   */
  export type TeamClientUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamClient
     */
    select?: TeamClientSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamClient
     */
    omit?: TeamClientOmit<ExtArgs> | null
    /**
     * The data used to update TeamClients.
     */
    data: XOR<TeamClientUpdateManyMutationInput, TeamClientUncheckedUpdateManyInput>
    /**
     * Filter which TeamClients to update
     */
    where?: TeamClientWhereInput
    /**
     * Limit how many TeamClients to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamClientIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamClient upsert
   */
  export type TeamClientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamClient
     */
    select?: TeamClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamClient
     */
    omit?: TeamClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamClientInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamClient to update in case it exists.
     */
    where: TeamClientWhereUniqueInput
    /**
     * In case the TeamClient found by the `where` argument doesn't exist, create a new TeamClient with this data.
     */
    create: XOR<TeamClientCreateInput, TeamClientUncheckedCreateInput>
    /**
     * In case the TeamClient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamClientUpdateInput, TeamClientUncheckedUpdateInput>
  }

  /**
   * TeamClient delete
   */
  export type TeamClientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamClient
     */
    select?: TeamClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamClient
     */
    omit?: TeamClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamClientInclude<ExtArgs> | null
    /**
     * Filter which TeamClient to delete.
     */
    where: TeamClientWhereUniqueInput
  }

  /**
   * TeamClient deleteMany
   */
  export type TeamClientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamClients to delete
     */
    where?: TeamClientWhereInput
    /**
     * Limit how many TeamClients to delete.
     */
    limit?: number
  }

  /**
   * TeamClient.user
   */
  export type TeamClient$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * TeamClient.cases
   */
  export type TeamClient$casesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    where?: CaseWhereInput
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    cursor?: CaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * TeamClient without action
   */
  export type TeamClientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamClient
     */
    select?: TeamClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamClient
     */
    omit?: TeamClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamClientInclude<ExtArgs> | null
  }


  /**
   * Model CaseTag
   */

  export type AggregateCaseTag = {
    _count: CaseTagCountAggregateOutputType | null
    _min: CaseTagMinAggregateOutputType | null
    _max: CaseTagMaxAggregateOutputType | null
  }

  export type CaseTagMinAggregateOutputType = {
    id: string | null
    label: string | null
    caseId: string | null
  }

  export type CaseTagMaxAggregateOutputType = {
    id: string | null
    label: string | null
    caseId: string | null
  }

  export type CaseTagCountAggregateOutputType = {
    id: number
    label: number
    caseId: number
    _all: number
  }


  export type CaseTagMinAggregateInputType = {
    id?: true
    label?: true
    caseId?: true
  }

  export type CaseTagMaxAggregateInputType = {
    id?: true
    label?: true
    caseId?: true
  }

  export type CaseTagCountAggregateInputType = {
    id?: true
    label?: true
    caseId?: true
    _all?: true
  }

  export type CaseTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseTag to aggregate.
     */
    where?: CaseTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseTags to fetch.
     */
    orderBy?: CaseTagOrderByWithRelationInput | CaseTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CaseTags
    **/
    _count?: true | CaseTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseTagMaxAggregateInputType
  }

  export type GetCaseTagAggregateType<T extends CaseTagAggregateArgs> = {
        [P in keyof T & keyof AggregateCaseTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaseTag[P]>
      : GetScalarType<T[P], AggregateCaseTag[P]>
  }




  export type CaseTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseTagWhereInput
    orderBy?: CaseTagOrderByWithAggregationInput | CaseTagOrderByWithAggregationInput[]
    by: CaseTagScalarFieldEnum[] | CaseTagScalarFieldEnum
    having?: CaseTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseTagCountAggregateInputType | true
    _min?: CaseTagMinAggregateInputType
    _max?: CaseTagMaxAggregateInputType
  }

  export type CaseTagGroupByOutputType = {
    id: string
    label: string
    caseId: string
    _count: CaseTagCountAggregateOutputType | null
    _min: CaseTagMinAggregateOutputType | null
    _max: CaseTagMaxAggregateOutputType | null
  }

  type GetCaseTagGroupByPayload<T extends CaseTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseTagGroupByOutputType[P]>
            : GetScalarType<T[P], CaseTagGroupByOutputType[P]>
        }
      >
    >


  export type CaseTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    caseId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseTag"]>

  export type CaseTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    caseId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseTag"]>

  export type CaseTagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    caseId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseTag"]>

  export type CaseTagSelectScalar = {
    id?: boolean
    label?: boolean
    caseId?: boolean
  }

  export type CaseTagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "label" | "caseId", ExtArgs["result"]["caseTag"]>
  export type CaseTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }
  export type CaseTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }
  export type CaseTagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }

  export type $CaseTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CaseTag"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      label: string
      caseId: string
    }, ExtArgs["result"]["caseTag"]>
    composites: {}
  }

  type CaseTagGetPayload<S extends boolean | null | undefined | CaseTagDefaultArgs> = $Result.GetResult<Prisma.$CaseTagPayload, S>

  type CaseTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CaseTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CaseTagCountAggregateInputType | true
    }

  export interface CaseTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CaseTag'], meta: { name: 'CaseTag' } }
    /**
     * Find zero or one CaseTag that matches the filter.
     * @param {CaseTagFindUniqueArgs} args - Arguments to find a CaseTag
     * @example
     * // Get one CaseTag
     * const caseTag = await prisma.caseTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseTagFindUniqueArgs>(args: SelectSubset<T, CaseTagFindUniqueArgs<ExtArgs>>): Prisma__CaseTagClient<$Result.GetResult<Prisma.$CaseTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CaseTag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CaseTagFindUniqueOrThrowArgs} args - Arguments to find a CaseTag
     * @example
     * // Get one CaseTag
     * const caseTag = await prisma.caseTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseTagFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseTagClient<$Result.GetResult<Prisma.$CaseTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CaseTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseTagFindFirstArgs} args - Arguments to find a CaseTag
     * @example
     * // Get one CaseTag
     * const caseTag = await prisma.caseTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseTagFindFirstArgs>(args?: SelectSubset<T, CaseTagFindFirstArgs<ExtArgs>>): Prisma__CaseTagClient<$Result.GetResult<Prisma.$CaseTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CaseTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseTagFindFirstOrThrowArgs} args - Arguments to find a CaseTag
     * @example
     * // Get one CaseTag
     * const caseTag = await prisma.caseTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseTagFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseTagClient<$Result.GetResult<Prisma.$CaseTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CaseTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CaseTags
     * const caseTags = await prisma.caseTag.findMany()
     * 
     * // Get first 10 CaseTags
     * const caseTags = await prisma.caseTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseTagWithIdOnly = await prisma.caseTag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseTagFindManyArgs>(args?: SelectSubset<T, CaseTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CaseTag.
     * @param {CaseTagCreateArgs} args - Arguments to create a CaseTag.
     * @example
     * // Create one CaseTag
     * const CaseTag = await prisma.caseTag.create({
     *   data: {
     *     // ... data to create a CaseTag
     *   }
     * })
     * 
     */
    create<T extends CaseTagCreateArgs>(args: SelectSubset<T, CaseTagCreateArgs<ExtArgs>>): Prisma__CaseTagClient<$Result.GetResult<Prisma.$CaseTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CaseTags.
     * @param {CaseTagCreateManyArgs} args - Arguments to create many CaseTags.
     * @example
     * // Create many CaseTags
     * const caseTag = await prisma.caseTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseTagCreateManyArgs>(args?: SelectSubset<T, CaseTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CaseTags and returns the data saved in the database.
     * @param {CaseTagCreateManyAndReturnArgs} args - Arguments to create many CaseTags.
     * @example
     * // Create many CaseTags
     * const caseTag = await prisma.caseTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CaseTags and only return the `id`
     * const caseTagWithIdOnly = await prisma.caseTag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseTagCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseTagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CaseTag.
     * @param {CaseTagDeleteArgs} args - Arguments to delete one CaseTag.
     * @example
     * // Delete one CaseTag
     * const CaseTag = await prisma.caseTag.delete({
     *   where: {
     *     // ... filter to delete one CaseTag
     *   }
     * })
     * 
     */
    delete<T extends CaseTagDeleteArgs>(args: SelectSubset<T, CaseTagDeleteArgs<ExtArgs>>): Prisma__CaseTagClient<$Result.GetResult<Prisma.$CaseTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CaseTag.
     * @param {CaseTagUpdateArgs} args - Arguments to update one CaseTag.
     * @example
     * // Update one CaseTag
     * const caseTag = await prisma.caseTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseTagUpdateArgs>(args: SelectSubset<T, CaseTagUpdateArgs<ExtArgs>>): Prisma__CaseTagClient<$Result.GetResult<Prisma.$CaseTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CaseTags.
     * @param {CaseTagDeleteManyArgs} args - Arguments to filter CaseTags to delete.
     * @example
     * // Delete a few CaseTags
     * const { count } = await prisma.caseTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseTagDeleteManyArgs>(args?: SelectSubset<T, CaseTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CaseTags
     * const caseTag = await prisma.caseTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseTagUpdateManyArgs>(args: SelectSubset<T, CaseTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseTags and returns the data updated in the database.
     * @param {CaseTagUpdateManyAndReturnArgs} args - Arguments to update many CaseTags.
     * @example
     * // Update many CaseTags
     * const caseTag = await prisma.caseTag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CaseTags and only return the `id`
     * const caseTagWithIdOnly = await prisma.caseTag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CaseTagUpdateManyAndReturnArgs>(args: SelectSubset<T, CaseTagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseTagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CaseTag.
     * @param {CaseTagUpsertArgs} args - Arguments to update or create a CaseTag.
     * @example
     * // Update or create a CaseTag
     * const caseTag = await prisma.caseTag.upsert({
     *   create: {
     *     // ... data to create a CaseTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CaseTag we want to update
     *   }
     * })
     */
    upsert<T extends CaseTagUpsertArgs>(args: SelectSubset<T, CaseTagUpsertArgs<ExtArgs>>): Prisma__CaseTagClient<$Result.GetResult<Prisma.$CaseTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CaseTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseTagCountArgs} args - Arguments to filter CaseTags to count.
     * @example
     * // Count the number of CaseTags
     * const count = await prisma.caseTag.count({
     *   where: {
     *     // ... the filter for the CaseTags we want to count
     *   }
     * })
    **/
    count<T extends CaseTagCountArgs>(
      args?: Subset<T, CaseTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CaseTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseTagAggregateArgs>(args: Subset<T, CaseTagAggregateArgs>): Prisma.PrismaPromise<GetCaseTagAggregateType<T>>

    /**
     * Group by CaseTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseTagGroupByArgs['orderBy'] }
        : { orderBy?: CaseTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CaseTag model
   */
  readonly fields: CaseTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CaseTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CaseTag model
   */
  interface CaseTagFieldRefs {
    readonly id: FieldRef<"CaseTag", 'String'>
    readonly label: FieldRef<"CaseTag", 'String'>
    readonly caseId: FieldRef<"CaseTag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CaseTag findUnique
   */
  export type CaseTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseTag
     */
    select?: CaseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseTag
     */
    omit?: CaseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseTagInclude<ExtArgs> | null
    /**
     * Filter, which CaseTag to fetch.
     */
    where: CaseTagWhereUniqueInput
  }

  /**
   * CaseTag findUniqueOrThrow
   */
  export type CaseTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseTag
     */
    select?: CaseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseTag
     */
    omit?: CaseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseTagInclude<ExtArgs> | null
    /**
     * Filter, which CaseTag to fetch.
     */
    where: CaseTagWhereUniqueInput
  }

  /**
   * CaseTag findFirst
   */
  export type CaseTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseTag
     */
    select?: CaseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseTag
     */
    omit?: CaseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseTagInclude<ExtArgs> | null
    /**
     * Filter, which CaseTag to fetch.
     */
    where?: CaseTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseTags to fetch.
     */
    orderBy?: CaseTagOrderByWithRelationInput | CaseTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseTags.
     */
    cursor?: CaseTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseTags.
     */
    distinct?: CaseTagScalarFieldEnum | CaseTagScalarFieldEnum[]
  }

  /**
   * CaseTag findFirstOrThrow
   */
  export type CaseTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseTag
     */
    select?: CaseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseTag
     */
    omit?: CaseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseTagInclude<ExtArgs> | null
    /**
     * Filter, which CaseTag to fetch.
     */
    where?: CaseTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseTags to fetch.
     */
    orderBy?: CaseTagOrderByWithRelationInput | CaseTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseTags.
     */
    cursor?: CaseTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseTags.
     */
    distinct?: CaseTagScalarFieldEnum | CaseTagScalarFieldEnum[]
  }

  /**
   * CaseTag findMany
   */
  export type CaseTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseTag
     */
    select?: CaseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseTag
     */
    omit?: CaseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseTagInclude<ExtArgs> | null
    /**
     * Filter, which CaseTags to fetch.
     */
    where?: CaseTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseTags to fetch.
     */
    orderBy?: CaseTagOrderByWithRelationInput | CaseTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CaseTags.
     */
    cursor?: CaseTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseTags.
     */
    skip?: number
    distinct?: CaseTagScalarFieldEnum | CaseTagScalarFieldEnum[]
  }

  /**
   * CaseTag create
   */
  export type CaseTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseTag
     */
    select?: CaseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseTag
     */
    omit?: CaseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseTagInclude<ExtArgs> | null
    /**
     * The data needed to create a CaseTag.
     */
    data: XOR<CaseTagCreateInput, CaseTagUncheckedCreateInput>
  }

  /**
   * CaseTag createMany
   */
  export type CaseTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CaseTags.
     */
    data: CaseTagCreateManyInput | CaseTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaseTag createManyAndReturn
   */
  export type CaseTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseTag
     */
    select?: CaseTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CaseTag
     */
    omit?: CaseTagOmit<ExtArgs> | null
    /**
     * The data used to create many CaseTags.
     */
    data: CaseTagCreateManyInput | CaseTagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseTagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseTag update
   */
  export type CaseTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseTag
     */
    select?: CaseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseTag
     */
    omit?: CaseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseTagInclude<ExtArgs> | null
    /**
     * The data needed to update a CaseTag.
     */
    data: XOR<CaseTagUpdateInput, CaseTagUncheckedUpdateInput>
    /**
     * Choose, which CaseTag to update.
     */
    where: CaseTagWhereUniqueInput
  }

  /**
   * CaseTag updateMany
   */
  export type CaseTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CaseTags.
     */
    data: XOR<CaseTagUpdateManyMutationInput, CaseTagUncheckedUpdateManyInput>
    /**
     * Filter which CaseTags to update
     */
    where?: CaseTagWhereInput
    /**
     * Limit how many CaseTags to update.
     */
    limit?: number
  }

  /**
   * CaseTag updateManyAndReturn
   */
  export type CaseTagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseTag
     */
    select?: CaseTagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CaseTag
     */
    omit?: CaseTagOmit<ExtArgs> | null
    /**
     * The data used to update CaseTags.
     */
    data: XOR<CaseTagUpdateManyMutationInput, CaseTagUncheckedUpdateManyInput>
    /**
     * Filter which CaseTags to update
     */
    where?: CaseTagWhereInput
    /**
     * Limit how many CaseTags to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseTagIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseTag upsert
   */
  export type CaseTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseTag
     */
    select?: CaseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseTag
     */
    omit?: CaseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseTagInclude<ExtArgs> | null
    /**
     * The filter to search for the CaseTag to update in case it exists.
     */
    where: CaseTagWhereUniqueInput
    /**
     * In case the CaseTag found by the `where` argument doesn't exist, create a new CaseTag with this data.
     */
    create: XOR<CaseTagCreateInput, CaseTagUncheckedCreateInput>
    /**
     * In case the CaseTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseTagUpdateInput, CaseTagUncheckedUpdateInput>
  }

  /**
   * CaseTag delete
   */
  export type CaseTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseTag
     */
    select?: CaseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseTag
     */
    omit?: CaseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseTagInclude<ExtArgs> | null
    /**
     * Filter which CaseTag to delete.
     */
    where: CaseTagWhereUniqueInput
  }

  /**
   * CaseTag deleteMany
   */
  export type CaseTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseTags to delete
     */
    where?: CaseTagWhereInput
    /**
     * Limit how many CaseTags to delete.
     */
    limit?: number
  }

  /**
   * CaseTag without action
   */
  export type CaseTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseTag
     */
    select?: CaseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseTag
     */
    omit?: CaseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseTagInclude<ExtArgs> | null
  }


  /**
   * Model TeamMembership
   */

  export type AggregateTeamMembership = {
    _count: TeamMembershipCountAggregateOutputType | null
    _min: TeamMembershipMinAggregateOutputType | null
    _max: TeamMembershipMaxAggregateOutputType | null
  }

  export type TeamMembershipMinAggregateOutputType = {
    id: string | null
    teamMemberId: string | null
    caseId: string | null
    joinedAt: Date | null
  }

  export type TeamMembershipMaxAggregateOutputType = {
    id: string | null
    teamMemberId: string | null
    caseId: string | null
    joinedAt: Date | null
  }

  export type TeamMembershipCountAggregateOutputType = {
    id: number
    teamMemberId: number
    caseId: number
    joinedAt: number
    _all: number
  }


  export type TeamMembershipMinAggregateInputType = {
    id?: true
    teamMemberId?: true
    caseId?: true
    joinedAt?: true
  }

  export type TeamMembershipMaxAggregateInputType = {
    id?: true
    teamMemberId?: true
    caseId?: true
    joinedAt?: true
  }

  export type TeamMembershipCountAggregateInputType = {
    id?: true
    teamMemberId?: true
    caseId?: true
    joinedAt?: true
    _all?: true
  }

  export type TeamMembershipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamMembership to aggregate.
     */
    where?: TeamMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMemberships to fetch.
     */
    orderBy?: TeamMembershipOrderByWithRelationInput | TeamMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamMemberships
    **/
    _count?: true | TeamMembershipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMembershipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMembershipMaxAggregateInputType
  }

  export type GetTeamMembershipAggregateType<T extends TeamMembershipAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamMembership]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamMembership[P]>
      : GetScalarType<T[P], AggregateTeamMembership[P]>
  }




  export type TeamMembershipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMembershipWhereInput
    orderBy?: TeamMembershipOrderByWithAggregationInput | TeamMembershipOrderByWithAggregationInput[]
    by: TeamMembershipScalarFieldEnum[] | TeamMembershipScalarFieldEnum
    having?: TeamMembershipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamMembershipCountAggregateInputType | true
    _min?: TeamMembershipMinAggregateInputType
    _max?: TeamMembershipMaxAggregateInputType
  }

  export type TeamMembershipGroupByOutputType = {
    id: string
    teamMemberId: string
    caseId: string
    joinedAt: Date
    _count: TeamMembershipCountAggregateOutputType | null
    _min: TeamMembershipMinAggregateOutputType | null
    _max: TeamMembershipMaxAggregateOutputType | null
  }

  type GetTeamMembershipGroupByPayload<T extends TeamMembershipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamMembershipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamMembershipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamMembershipGroupByOutputType[P]>
            : GetScalarType<T[P], TeamMembershipGroupByOutputType[P]>
        }
      >
    >


  export type TeamMembershipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamMemberId?: boolean
    caseId?: boolean
    joinedAt?: boolean
    teamMember?: boolean | TeamMemberDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMembership"]>

  export type TeamMembershipSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamMemberId?: boolean
    caseId?: boolean
    joinedAt?: boolean
    teamMember?: boolean | TeamMemberDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMembership"]>

  export type TeamMembershipSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamMemberId?: boolean
    caseId?: boolean
    joinedAt?: boolean
    teamMember?: boolean | TeamMemberDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMembership"]>

  export type TeamMembershipSelectScalar = {
    id?: boolean
    teamMemberId?: boolean
    caseId?: boolean
    joinedAt?: boolean
  }

  export type TeamMembershipOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "teamMemberId" | "caseId" | "joinedAt", ExtArgs["result"]["teamMembership"]>
  export type TeamMembershipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teamMember?: boolean | TeamMemberDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }
  export type TeamMembershipIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teamMember?: boolean | TeamMemberDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }
  export type TeamMembershipIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teamMember?: boolean | TeamMemberDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }

  export type $TeamMembershipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamMembership"
    objects: {
      teamMember: Prisma.$TeamMemberPayload<ExtArgs>
      case: Prisma.$CasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      teamMemberId: string
      caseId: string
      joinedAt: Date
    }, ExtArgs["result"]["teamMembership"]>
    composites: {}
  }

  type TeamMembershipGetPayload<S extends boolean | null | undefined | TeamMembershipDefaultArgs> = $Result.GetResult<Prisma.$TeamMembershipPayload, S>

  type TeamMembershipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamMembershipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamMembershipCountAggregateInputType | true
    }

  export interface TeamMembershipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamMembership'], meta: { name: 'TeamMembership' } }
    /**
     * Find zero or one TeamMembership that matches the filter.
     * @param {TeamMembershipFindUniqueArgs} args - Arguments to find a TeamMembership
     * @example
     * // Get one TeamMembership
     * const teamMembership = await prisma.teamMembership.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamMembershipFindUniqueArgs>(args: SelectSubset<T, TeamMembershipFindUniqueArgs<ExtArgs>>): Prisma__TeamMembershipClient<$Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeamMembership that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamMembershipFindUniqueOrThrowArgs} args - Arguments to find a TeamMembership
     * @example
     * // Get one TeamMembership
     * const teamMembership = await prisma.teamMembership.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamMembershipFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamMembershipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamMembershipClient<$Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamMembership that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembershipFindFirstArgs} args - Arguments to find a TeamMembership
     * @example
     * // Get one TeamMembership
     * const teamMembership = await prisma.teamMembership.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamMembershipFindFirstArgs>(args?: SelectSubset<T, TeamMembershipFindFirstArgs<ExtArgs>>): Prisma__TeamMembershipClient<$Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamMembership that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembershipFindFirstOrThrowArgs} args - Arguments to find a TeamMembership
     * @example
     * // Get one TeamMembership
     * const teamMembership = await prisma.teamMembership.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamMembershipFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamMembershipFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamMembershipClient<$Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeamMemberships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembershipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamMemberships
     * const teamMemberships = await prisma.teamMembership.findMany()
     * 
     * // Get first 10 TeamMemberships
     * const teamMemberships = await prisma.teamMembership.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamMembershipWithIdOnly = await prisma.teamMembership.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamMembershipFindManyArgs>(args?: SelectSubset<T, TeamMembershipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeamMembership.
     * @param {TeamMembershipCreateArgs} args - Arguments to create a TeamMembership.
     * @example
     * // Create one TeamMembership
     * const TeamMembership = await prisma.teamMembership.create({
     *   data: {
     *     // ... data to create a TeamMembership
     *   }
     * })
     * 
     */
    create<T extends TeamMembershipCreateArgs>(args: SelectSubset<T, TeamMembershipCreateArgs<ExtArgs>>): Prisma__TeamMembershipClient<$Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeamMemberships.
     * @param {TeamMembershipCreateManyArgs} args - Arguments to create many TeamMemberships.
     * @example
     * // Create many TeamMemberships
     * const teamMembership = await prisma.teamMembership.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamMembershipCreateManyArgs>(args?: SelectSubset<T, TeamMembershipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeamMemberships and returns the data saved in the database.
     * @param {TeamMembershipCreateManyAndReturnArgs} args - Arguments to create many TeamMemberships.
     * @example
     * // Create many TeamMemberships
     * const teamMembership = await prisma.teamMembership.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeamMemberships and only return the `id`
     * const teamMembershipWithIdOnly = await prisma.teamMembership.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamMembershipCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamMembershipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeamMembership.
     * @param {TeamMembershipDeleteArgs} args - Arguments to delete one TeamMembership.
     * @example
     * // Delete one TeamMembership
     * const TeamMembership = await prisma.teamMembership.delete({
     *   where: {
     *     // ... filter to delete one TeamMembership
     *   }
     * })
     * 
     */
    delete<T extends TeamMembershipDeleteArgs>(args: SelectSubset<T, TeamMembershipDeleteArgs<ExtArgs>>): Prisma__TeamMembershipClient<$Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeamMembership.
     * @param {TeamMembershipUpdateArgs} args - Arguments to update one TeamMembership.
     * @example
     * // Update one TeamMembership
     * const teamMembership = await prisma.teamMembership.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamMembershipUpdateArgs>(args: SelectSubset<T, TeamMembershipUpdateArgs<ExtArgs>>): Prisma__TeamMembershipClient<$Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeamMemberships.
     * @param {TeamMembershipDeleteManyArgs} args - Arguments to filter TeamMemberships to delete.
     * @example
     * // Delete a few TeamMemberships
     * const { count } = await prisma.teamMembership.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamMembershipDeleteManyArgs>(args?: SelectSubset<T, TeamMembershipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembershipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamMemberships
     * const teamMembership = await prisma.teamMembership.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamMembershipUpdateManyArgs>(args: SelectSubset<T, TeamMembershipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamMemberships and returns the data updated in the database.
     * @param {TeamMembershipUpdateManyAndReturnArgs} args - Arguments to update many TeamMemberships.
     * @example
     * // Update many TeamMemberships
     * const teamMembership = await prisma.teamMembership.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeamMemberships and only return the `id`
     * const teamMembershipWithIdOnly = await prisma.teamMembership.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamMembershipUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamMembershipUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeamMembership.
     * @param {TeamMembershipUpsertArgs} args - Arguments to update or create a TeamMembership.
     * @example
     * // Update or create a TeamMembership
     * const teamMembership = await prisma.teamMembership.upsert({
     *   create: {
     *     // ... data to create a TeamMembership
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamMembership we want to update
     *   }
     * })
     */
    upsert<T extends TeamMembershipUpsertArgs>(args: SelectSubset<T, TeamMembershipUpsertArgs<ExtArgs>>): Prisma__TeamMembershipClient<$Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeamMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembershipCountArgs} args - Arguments to filter TeamMemberships to count.
     * @example
     * // Count the number of TeamMemberships
     * const count = await prisma.teamMembership.count({
     *   where: {
     *     // ... the filter for the TeamMemberships we want to count
     *   }
     * })
    **/
    count<T extends TeamMembershipCountArgs>(
      args?: Subset<T, TeamMembershipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamMembershipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamMembershipAggregateArgs>(args: Subset<T, TeamMembershipAggregateArgs>): Prisma.PrismaPromise<GetTeamMembershipAggregateType<T>>

    /**
     * Group by TeamMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembershipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamMembershipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamMembershipGroupByArgs['orderBy'] }
        : { orderBy?: TeamMembershipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamMembershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamMembershipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamMembership model
   */
  readonly fields: TeamMembershipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamMembership.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamMembershipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teamMember<T extends TeamMemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamMemberDefaultArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamMembership model
   */
  interface TeamMembershipFieldRefs {
    readonly id: FieldRef<"TeamMembership", 'String'>
    readonly teamMemberId: FieldRef<"TeamMembership", 'String'>
    readonly caseId: FieldRef<"TeamMembership", 'String'>
    readonly joinedAt: FieldRef<"TeamMembership", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TeamMembership findUnique
   */
  export type TeamMembershipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembership
     */
    select?: TeamMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembership
     */
    omit?: TeamMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembershipInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembership to fetch.
     */
    where: TeamMembershipWhereUniqueInput
  }

  /**
   * TeamMembership findUniqueOrThrow
   */
  export type TeamMembershipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembership
     */
    select?: TeamMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembership
     */
    omit?: TeamMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembershipInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembership to fetch.
     */
    where: TeamMembershipWhereUniqueInput
  }

  /**
   * TeamMembership findFirst
   */
  export type TeamMembershipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembership
     */
    select?: TeamMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembership
     */
    omit?: TeamMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembershipInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembership to fetch.
     */
    where?: TeamMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMemberships to fetch.
     */
    orderBy?: TeamMembershipOrderByWithRelationInput | TeamMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamMemberships.
     */
    cursor?: TeamMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamMemberships.
     */
    distinct?: TeamMembershipScalarFieldEnum | TeamMembershipScalarFieldEnum[]
  }

  /**
   * TeamMembership findFirstOrThrow
   */
  export type TeamMembershipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembership
     */
    select?: TeamMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembership
     */
    omit?: TeamMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembershipInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembership to fetch.
     */
    where?: TeamMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMemberships to fetch.
     */
    orderBy?: TeamMembershipOrderByWithRelationInput | TeamMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamMemberships.
     */
    cursor?: TeamMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamMemberships.
     */
    distinct?: TeamMembershipScalarFieldEnum | TeamMembershipScalarFieldEnum[]
  }

  /**
   * TeamMembership findMany
   */
  export type TeamMembershipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembership
     */
    select?: TeamMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembership
     */
    omit?: TeamMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembershipInclude<ExtArgs> | null
    /**
     * Filter, which TeamMemberships to fetch.
     */
    where?: TeamMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMemberships to fetch.
     */
    orderBy?: TeamMembershipOrderByWithRelationInput | TeamMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamMemberships.
     */
    cursor?: TeamMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMemberships.
     */
    skip?: number
    distinct?: TeamMembershipScalarFieldEnum | TeamMembershipScalarFieldEnum[]
  }

  /**
   * TeamMembership create
   */
  export type TeamMembershipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembership
     */
    select?: TeamMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembership
     */
    omit?: TeamMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembershipInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamMembership.
     */
    data: XOR<TeamMembershipCreateInput, TeamMembershipUncheckedCreateInput>
  }

  /**
   * TeamMembership createMany
   */
  export type TeamMembershipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamMemberships.
     */
    data: TeamMembershipCreateManyInput | TeamMembershipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeamMembership createManyAndReturn
   */
  export type TeamMembershipCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembership
     */
    select?: TeamMembershipSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembership
     */
    omit?: TeamMembershipOmit<ExtArgs> | null
    /**
     * The data used to create many TeamMemberships.
     */
    data: TeamMembershipCreateManyInput | TeamMembershipCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembershipIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamMembership update
   */
  export type TeamMembershipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembership
     */
    select?: TeamMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembership
     */
    omit?: TeamMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembershipInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamMembership.
     */
    data: XOR<TeamMembershipUpdateInput, TeamMembershipUncheckedUpdateInput>
    /**
     * Choose, which TeamMembership to update.
     */
    where: TeamMembershipWhereUniqueInput
  }

  /**
   * TeamMembership updateMany
   */
  export type TeamMembershipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamMemberships.
     */
    data: XOR<TeamMembershipUpdateManyMutationInput, TeamMembershipUncheckedUpdateManyInput>
    /**
     * Filter which TeamMemberships to update
     */
    where?: TeamMembershipWhereInput
    /**
     * Limit how many TeamMemberships to update.
     */
    limit?: number
  }

  /**
   * TeamMembership updateManyAndReturn
   */
  export type TeamMembershipUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembership
     */
    select?: TeamMembershipSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembership
     */
    omit?: TeamMembershipOmit<ExtArgs> | null
    /**
     * The data used to update TeamMemberships.
     */
    data: XOR<TeamMembershipUpdateManyMutationInput, TeamMembershipUncheckedUpdateManyInput>
    /**
     * Filter which TeamMemberships to update
     */
    where?: TeamMembershipWhereInput
    /**
     * Limit how many TeamMemberships to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembershipIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamMembership upsert
   */
  export type TeamMembershipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembership
     */
    select?: TeamMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembership
     */
    omit?: TeamMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembershipInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamMembership to update in case it exists.
     */
    where: TeamMembershipWhereUniqueInput
    /**
     * In case the TeamMembership found by the `where` argument doesn't exist, create a new TeamMembership with this data.
     */
    create: XOR<TeamMembershipCreateInput, TeamMembershipUncheckedCreateInput>
    /**
     * In case the TeamMembership was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamMembershipUpdateInput, TeamMembershipUncheckedUpdateInput>
  }

  /**
   * TeamMembership delete
   */
  export type TeamMembershipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembership
     */
    select?: TeamMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembership
     */
    omit?: TeamMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembershipInclude<ExtArgs> | null
    /**
     * Filter which TeamMembership to delete.
     */
    where: TeamMembershipWhereUniqueInput
  }

  /**
   * TeamMembership deleteMany
   */
  export type TeamMembershipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamMemberships to delete
     */
    where?: TeamMembershipWhereInput
    /**
     * Limit how many TeamMemberships to delete.
     */
    limit?: number
  }

  /**
   * TeamMembership without action
   */
  export type TeamMembershipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembership
     */
    select?: TeamMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembership
     */
    omit?: TeamMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembershipInclude<ExtArgs> | null
  }


  /**
   * Model ToDoList
   */

  export type AggregateToDoList = {
    _count: ToDoListCountAggregateOutputType | null
    _min: ToDoListMinAggregateOutputType | null
    _max: ToDoListMaxAggregateOutputType | null
  }

  export type ToDoListMinAggregateOutputType = {
    id: string | null
    task: string | null
    userId: string | null
    isTaskChecked: boolean | null
    taskForDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ToDoListMaxAggregateOutputType = {
    id: string | null
    task: string | null
    userId: string | null
    isTaskChecked: boolean | null
    taskForDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ToDoListCountAggregateOutputType = {
    id: number
    task: number
    userId: number
    isTaskChecked: number
    taskForDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ToDoListMinAggregateInputType = {
    id?: true
    task?: true
    userId?: true
    isTaskChecked?: true
    taskForDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ToDoListMaxAggregateInputType = {
    id?: true
    task?: true
    userId?: true
    isTaskChecked?: true
    taskForDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ToDoListCountAggregateInputType = {
    id?: true
    task?: true
    userId?: true
    isTaskChecked?: true
    taskForDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ToDoListAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ToDoList to aggregate.
     */
    where?: ToDoListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ToDoLists to fetch.
     */
    orderBy?: ToDoListOrderByWithRelationInput | ToDoListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ToDoListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ToDoLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ToDoLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ToDoLists
    **/
    _count?: true | ToDoListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ToDoListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ToDoListMaxAggregateInputType
  }

  export type GetToDoListAggregateType<T extends ToDoListAggregateArgs> = {
        [P in keyof T & keyof AggregateToDoList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateToDoList[P]>
      : GetScalarType<T[P], AggregateToDoList[P]>
  }




  export type ToDoListGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToDoListWhereInput
    orderBy?: ToDoListOrderByWithAggregationInput | ToDoListOrderByWithAggregationInput[]
    by: ToDoListScalarFieldEnum[] | ToDoListScalarFieldEnum
    having?: ToDoListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ToDoListCountAggregateInputType | true
    _min?: ToDoListMinAggregateInputType
    _max?: ToDoListMaxAggregateInputType
  }

  export type ToDoListGroupByOutputType = {
    id: string
    task: string
    userId: string | null
    isTaskChecked: boolean
    taskForDate: Date
    createdAt: Date
    updatedAt: Date
    _count: ToDoListCountAggregateOutputType | null
    _min: ToDoListMinAggregateOutputType | null
    _max: ToDoListMaxAggregateOutputType | null
  }

  type GetToDoListGroupByPayload<T extends ToDoListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ToDoListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ToDoListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ToDoListGroupByOutputType[P]>
            : GetScalarType<T[P], ToDoListGroupByOutputType[P]>
        }
      >
    >


  export type ToDoListSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    task?: boolean
    userId?: boolean
    isTaskChecked?: boolean
    taskForDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | ToDoList$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["toDoList"]>

  export type ToDoListSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    task?: boolean
    userId?: boolean
    isTaskChecked?: boolean
    taskForDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | ToDoList$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["toDoList"]>

  export type ToDoListSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    task?: boolean
    userId?: boolean
    isTaskChecked?: boolean
    taskForDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | ToDoList$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["toDoList"]>

  export type ToDoListSelectScalar = {
    id?: boolean
    task?: boolean
    userId?: boolean
    isTaskChecked?: boolean
    taskForDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ToDoListOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "task" | "userId" | "isTaskChecked" | "taskForDate" | "createdAt" | "updatedAt", ExtArgs["result"]["toDoList"]>
  export type ToDoListInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | ToDoList$createdByArgs<ExtArgs>
  }
  export type ToDoListIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | ToDoList$createdByArgs<ExtArgs>
  }
  export type ToDoListIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | ToDoList$createdByArgs<ExtArgs>
  }

  export type $ToDoListPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ToDoList"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      task: string
      userId: string | null
      isTaskChecked: boolean
      taskForDate: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["toDoList"]>
    composites: {}
  }

  type ToDoListGetPayload<S extends boolean | null | undefined | ToDoListDefaultArgs> = $Result.GetResult<Prisma.$ToDoListPayload, S>

  type ToDoListCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ToDoListFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ToDoListCountAggregateInputType | true
    }

  export interface ToDoListDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ToDoList'], meta: { name: 'ToDoList' } }
    /**
     * Find zero or one ToDoList that matches the filter.
     * @param {ToDoListFindUniqueArgs} args - Arguments to find a ToDoList
     * @example
     * // Get one ToDoList
     * const toDoList = await prisma.toDoList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ToDoListFindUniqueArgs>(args: SelectSubset<T, ToDoListFindUniqueArgs<ExtArgs>>): Prisma__ToDoListClient<$Result.GetResult<Prisma.$ToDoListPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ToDoList that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ToDoListFindUniqueOrThrowArgs} args - Arguments to find a ToDoList
     * @example
     * // Get one ToDoList
     * const toDoList = await prisma.toDoList.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ToDoListFindUniqueOrThrowArgs>(args: SelectSubset<T, ToDoListFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ToDoListClient<$Result.GetResult<Prisma.$ToDoListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ToDoList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToDoListFindFirstArgs} args - Arguments to find a ToDoList
     * @example
     * // Get one ToDoList
     * const toDoList = await prisma.toDoList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ToDoListFindFirstArgs>(args?: SelectSubset<T, ToDoListFindFirstArgs<ExtArgs>>): Prisma__ToDoListClient<$Result.GetResult<Prisma.$ToDoListPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ToDoList that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToDoListFindFirstOrThrowArgs} args - Arguments to find a ToDoList
     * @example
     * // Get one ToDoList
     * const toDoList = await prisma.toDoList.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ToDoListFindFirstOrThrowArgs>(args?: SelectSubset<T, ToDoListFindFirstOrThrowArgs<ExtArgs>>): Prisma__ToDoListClient<$Result.GetResult<Prisma.$ToDoListPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ToDoLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToDoListFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ToDoLists
     * const toDoLists = await prisma.toDoList.findMany()
     * 
     * // Get first 10 ToDoLists
     * const toDoLists = await prisma.toDoList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const toDoListWithIdOnly = await prisma.toDoList.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ToDoListFindManyArgs>(args?: SelectSubset<T, ToDoListFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToDoListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ToDoList.
     * @param {ToDoListCreateArgs} args - Arguments to create a ToDoList.
     * @example
     * // Create one ToDoList
     * const ToDoList = await prisma.toDoList.create({
     *   data: {
     *     // ... data to create a ToDoList
     *   }
     * })
     * 
     */
    create<T extends ToDoListCreateArgs>(args: SelectSubset<T, ToDoListCreateArgs<ExtArgs>>): Prisma__ToDoListClient<$Result.GetResult<Prisma.$ToDoListPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ToDoLists.
     * @param {ToDoListCreateManyArgs} args - Arguments to create many ToDoLists.
     * @example
     * // Create many ToDoLists
     * const toDoList = await prisma.toDoList.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ToDoListCreateManyArgs>(args?: SelectSubset<T, ToDoListCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ToDoLists and returns the data saved in the database.
     * @param {ToDoListCreateManyAndReturnArgs} args - Arguments to create many ToDoLists.
     * @example
     * // Create many ToDoLists
     * const toDoList = await prisma.toDoList.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ToDoLists and only return the `id`
     * const toDoListWithIdOnly = await prisma.toDoList.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ToDoListCreateManyAndReturnArgs>(args?: SelectSubset<T, ToDoListCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToDoListPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ToDoList.
     * @param {ToDoListDeleteArgs} args - Arguments to delete one ToDoList.
     * @example
     * // Delete one ToDoList
     * const ToDoList = await prisma.toDoList.delete({
     *   where: {
     *     // ... filter to delete one ToDoList
     *   }
     * })
     * 
     */
    delete<T extends ToDoListDeleteArgs>(args: SelectSubset<T, ToDoListDeleteArgs<ExtArgs>>): Prisma__ToDoListClient<$Result.GetResult<Prisma.$ToDoListPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ToDoList.
     * @param {ToDoListUpdateArgs} args - Arguments to update one ToDoList.
     * @example
     * // Update one ToDoList
     * const toDoList = await prisma.toDoList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ToDoListUpdateArgs>(args: SelectSubset<T, ToDoListUpdateArgs<ExtArgs>>): Prisma__ToDoListClient<$Result.GetResult<Prisma.$ToDoListPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ToDoLists.
     * @param {ToDoListDeleteManyArgs} args - Arguments to filter ToDoLists to delete.
     * @example
     * // Delete a few ToDoLists
     * const { count } = await prisma.toDoList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ToDoListDeleteManyArgs>(args?: SelectSubset<T, ToDoListDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ToDoLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToDoListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ToDoLists
     * const toDoList = await prisma.toDoList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ToDoListUpdateManyArgs>(args: SelectSubset<T, ToDoListUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ToDoLists and returns the data updated in the database.
     * @param {ToDoListUpdateManyAndReturnArgs} args - Arguments to update many ToDoLists.
     * @example
     * // Update many ToDoLists
     * const toDoList = await prisma.toDoList.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ToDoLists and only return the `id`
     * const toDoListWithIdOnly = await prisma.toDoList.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ToDoListUpdateManyAndReturnArgs>(args: SelectSubset<T, ToDoListUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToDoListPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ToDoList.
     * @param {ToDoListUpsertArgs} args - Arguments to update or create a ToDoList.
     * @example
     * // Update or create a ToDoList
     * const toDoList = await prisma.toDoList.upsert({
     *   create: {
     *     // ... data to create a ToDoList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ToDoList we want to update
     *   }
     * })
     */
    upsert<T extends ToDoListUpsertArgs>(args: SelectSubset<T, ToDoListUpsertArgs<ExtArgs>>): Prisma__ToDoListClient<$Result.GetResult<Prisma.$ToDoListPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ToDoLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToDoListCountArgs} args - Arguments to filter ToDoLists to count.
     * @example
     * // Count the number of ToDoLists
     * const count = await prisma.toDoList.count({
     *   where: {
     *     // ... the filter for the ToDoLists we want to count
     *   }
     * })
    **/
    count<T extends ToDoListCountArgs>(
      args?: Subset<T, ToDoListCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ToDoListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ToDoList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToDoListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ToDoListAggregateArgs>(args: Subset<T, ToDoListAggregateArgs>): Prisma.PrismaPromise<GetToDoListAggregateType<T>>

    /**
     * Group by ToDoList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToDoListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ToDoListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ToDoListGroupByArgs['orderBy'] }
        : { orderBy?: ToDoListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ToDoListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetToDoListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ToDoList model
   */
  readonly fields: ToDoListFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ToDoList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ToDoListClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends ToDoList$createdByArgs<ExtArgs> = {}>(args?: Subset<T, ToDoList$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ToDoList model
   */
  interface ToDoListFieldRefs {
    readonly id: FieldRef<"ToDoList", 'String'>
    readonly task: FieldRef<"ToDoList", 'String'>
    readonly userId: FieldRef<"ToDoList", 'String'>
    readonly isTaskChecked: FieldRef<"ToDoList", 'Boolean'>
    readonly taskForDate: FieldRef<"ToDoList", 'DateTime'>
    readonly createdAt: FieldRef<"ToDoList", 'DateTime'>
    readonly updatedAt: FieldRef<"ToDoList", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ToDoList findUnique
   */
  export type ToDoListFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ToDoList
     */
    select?: ToDoListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ToDoList
     */
    omit?: ToDoListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToDoListInclude<ExtArgs> | null
    /**
     * Filter, which ToDoList to fetch.
     */
    where: ToDoListWhereUniqueInput
  }

  /**
   * ToDoList findUniqueOrThrow
   */
  export type ToDoListFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ToDoList
     */
    select?: ToDoListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ToDoList
     */
    omit?: ToDoListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToDoListInclude<ExtArgs> | null
    /**
     * Filter, which ToDoList to fetch.
     */
    where: ToDoListWhereUniqueInput
  }

  /**
   * ToDoList findFirst
   */
  export type ToDoListFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ToDoList
     */
    select?: ToDoListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ToDoList
     */
    omit?: ToDoListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToDoListInclude<ExtArgs> | null
    /**
     * Filter, which ToDoList to fetch.
     */
    where?: ToDoListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ToDoLists to fetch.
     */
    orderBy?: ToDoListOrderByWithRelationInput | ToDoListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ToDoLists.
     */
    cursor?: ToDoListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ToDoLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ToDoLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ToDoLists.
     */
    distinct?: ToDoListScalarFieldEnum | ToDoListScalarFieldEnum[]
  }

  /**
   * ToDoList findFirstOrThrow
   */
  export type ToDoListFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ToDoList
     */
    select?: ToDoListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ToDoList
     */
    omit?: ToDoListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToDoListInclude<ExtArgs> | null
    /**
     * Filter, which ToDoList to fetch.
     */
    where?: ToDoListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ToDoLists to fetch.
     */
    orderBy?: ToDoListOrderByWithRelationInput | ToDoListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ToDoLists.
     */
    cursor?: ToDoListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ToDoLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ToDoLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ToDoLists.
     */
    distinct?: ToDoListScalarFieldEnum | ToDoListScalarFieldEnum[]
  }

  /**
   * ToDoList findMany
   */
  export type ToDoListFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ToDoList
     */
    select?: ToDoListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ToDoList
     */
    omit?: ToDoListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToDoListInclude<ExtArgs> | null
    /**
     * Filter, which ToDoLists to fetch.
     */
    where?: ToDoListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ToDoLists to fetch.
     */
    orderBy?: ToDoListOrderByWithRelationInput | ToDoListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ToDoLists.
     */
    cursor?: ToDoListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ToDoLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ToDoLists.
     */
    skip?: number
    distinct?: ToDoListScalarFieldEnum | ToDoListScalarFieldEnum[]
  }

  /**
   * ToDoList create
   */
  export type ToDoListCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ToDoList
     */
    select?: ToDoListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ToDoList
     */
    omit?: ToDoListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToDoListInclude<ExtArgs> | null
    /**
     * The data needed to create a ToDoList.
     */
    data: XOR<ToDoListCreateInput, ToDoListUncheckedCreateInput>
  }

  /**
   * ToDoList createMany
   */
  export type ToDoListCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ToDoLists.
     */
    data: ToDoListCreateManyInput | ToDoListCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ToDoList createManyAndReturn
   */
  export type ToDoListCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ToDoList
     */
    select?: ToDoListSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ToDoList
     */
    omit?: ToDoListOmit<ExtArgs> | null
    /**
     * The data used to create many ToDoLists.
     */
    data: ToDoListCreateManyInput | ToDoListCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToDoListIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ToDoList update
   */
  export type ToDoListUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ToDoList
     */
    select?: ToDoListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ToDoList
     */
    omit?: ToDoListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToDoListInclude<ExtArgs> | null
    /**
     * The data needed to update a ToDoList.
     */
    data: XOR<ToDoListUpdateInput, ToDoListUncheckedUpdateInput>
    /**
     * Choose, which ToDoList to update.
     */
    where: ToDoListWhereUniqueInput
  }

  /**
   * ToDoList updateMany
   */
  export type ToDoListUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ToDoLists.
     */
    data: XOR<ToDoListUpdateManyMutationInput, ToDoListUncheckedUpdateManyInput>
    /**
     * Filter which ToDoLists to update
     */
    where?: ToDoListWhereInput
    /**
     * Limit how many ToDoLists to update.
     */
    limit?: number
  }

  /**
   * ToDoList updateManyAndReturn
   */
  export type ToDoListUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ToDoList
     */
    select?: ToDoListSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ToDoList
     */
    omit?: ToDoListOmit<ExtArgs> | null
    /**
     * The data used to update ToDoLists.
     */
    data: XOR<ToDoListUpdateManyMutationInput, ToDoListUncheckedUpdateManyInput>
    /**
     * Filter which ToDoLists to update
     */
    where?: ToDoListWhereInput
    /**
     * Limit how many ToDoLists to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToDoListIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ToDoList upsert
   */
  export type ToDoListUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ToDoList
     */
    select?: ToDoListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ToDoList
     */
    omit?: ToDoListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToDoListInclude<ExtArgs> | null
    /**
     * The filter to search for the ToDoList to update in case it exists.
     */
    where: ToDoListWhereUniqueInput
    /**
     * In case the ToDoList found by the `where` argument doesn't exist, create a new ToDoList with this data.
     */
    create: XOR<ToDoListCreateInput, ToDoListUncheckedCreateInput>
    /**
     * In case the ToDoList was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ToDoListUpdateInput, ToDoListUncheckedUpdateInput>
  }

  /**
   * ToDoList delete
   */
  export type ToDoListDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ToDoList
     */
    select?: ToDoListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ToDoList
     */
    omit?: ToDoListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToDoListInclude<ExtArgs> | null
    /**
     * Filter which ToDoList to delete.
     */
    where: ToDoListWhereUniqueInput
  }

  /**
   * ToDoList deleteMany
   */
  export type ToDoListDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ToDoLists to delete
     */
    where?: ToDoListWhereInput
    /**
     * Limit how many ToDoLists to delete.
     */
    limit?: number
  }

  /**
   * ToDoList.createdBy
   */
  export type ToDoList$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ToDoList without action
   */
  export type ToDoListDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ToDoList
     */
    select?: ToDoListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ToDoList
     */
    omit?: ToDoListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToDoListInclude<ExtArgs> | null
  }


  /**
   * Model Case
   */

  export type AggregateCase = {
    _count: CaseCountAggregateOutputType | null
    _min: CaseMinAggregateOutputType | null
    _max: CaseMaxAggregateOutputType | null
  }

  export type CaseMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    practiseArea: $Enums.PracticeArea | null
    arrivalDate: Date | null
    status: $Enums.CaseStatus | null
    matterPriority: $Enums.matterPriority | null
    internalRefNumber: string | null
    filedDate: Date | null
    closedDate: Date | null
    estimatedCloseDate: Date | null
    stage: $Enums.CaseStage | null
    clientId: string | null
    adminId: string | null
    opponentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    practiseArea: $Enums.PracticeArea | null
    arrivalDate: Date | null
    status: $Enums.CaseStatus | null
    matterPriority: $Enums.matterPriority | null
    internalRefNumber: string | null
    filedDate: Date | null
    closedDate: Date | null
    estimatedCloseDate: Date | null
    stage: $Enums.CaseStage | null
    clientId: string | null
    adminId: string | null
    opponentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseCountAggregateOutputType = {
    id: number
    title: number
    description: number
    practiseArea: number
    arrivalDate: number
    status: number
    matterPriority: number
    internalRefNumber: number
    filedDate: number
    closedDate: number
    estimatedCloseDate: number
    stage: number
    clientId: number
    adminId: number
    opponentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CaseMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    practiseArea?: true
    arrivalDate?: true
    status?: true
    matterPriority?: true
    internalRefNumber?: true
    filedDate?: true
    closedDate?: true
    estimatedCloseDate?: true
    stage?: true
    clientId?: true
    adminId?: true
    opponentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    practiseArea?: true
    arrivalDate?: true
    status?: true
    matterPriority?: true
    internalRefNumber?: true
    filedDate?: true
    closedDate?: true
    estimatedCloseDate?: true
    stage?: true
    clientId?: true
    adminId?: true
    opponentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    practiseArea?: true
    arrivalDate?: true
    status?: true
    matterPriority?: true
    internalRefNumber?: true
    filedDate?: true
    closedDate?: true
    estimatedCloseDate?: true
    stage?: true
    clientId?: true
    adminId?: true
    opponentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Case to aggregate.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cases
    **/
    _count?: true | CaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseMaxAggregateInputType
  }

  export type GetCaseAggregateType<T extends CaseAggregateArgs> = {
        [P in keyof T & keyof AggregateCase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCase[P]>
      : GetScalarType<T[P], AggregateCase[P]>
  }




  export type CaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWhereInput
    orderBy?: CaseOrderByWithAggregationInput | CaseOrderByWithAggregationInput[]
    by: CaseScalarFieldEnum[] | CaseScalarFieldEnum
    having?: CaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseCountAggregateInputType | true
    _min?: CaseMinAggregateInputType
    _max?: CaseMaxAggregateInputType
  }

  export type CaseGroupByOutputType = {
    id: string
    title: string
    description: string | null
    practiseArea: $Enums.PracticeArea
    arrivalDate: Date | null
    status: $Enums.CaseStatus | null
    matterPriority: $Enums.matterPriority
    internalRefNumber: string | null
    filedDate: Date | null
    closedDate: Date | null
    estimatedCloseDate: Date | null
    stage: $Enums.CaseStage
    clientId: string
    adminId: string
    opponentId: string | null
    createdAt: Date
    updatedAt: Date
    _count: CaseCountAggregateOutputType | null
    _min: CaseMinAggregateOutputType | null
    _max: CaseMaxAggregateOutputType | null
  }

  type GetCaseGroupByPayload<T extends CaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseGroupByOutputType[P]>
            : GetScalarType<T[P], CaseGroupByOutputType[P]>
        }
      >
    >


  export type CaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    practiseArea?: boolean
    arrivalDate?: boolean
    status?: boolean
    matterPriority?: boolean
    internalRefNumber?: boolean
    filedDate?: boolean
    closedDate?: boolean
    estimatedCloseDate?: boolean
    stage?: boolean
    clientId?: boolean
    adminId?: boolean
    opponentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | TeamClientDefaultArgs<ExtArgs>
    admin?: boolean | TeamAdminDefaultArgs<ExtArgs>
    members?: boolean | Case$membersArgs<ExtArgs>
    Opponent?: boolean | Case$OpponentArgs<ExtArgs>
    caseTag?: boolean | Case$caseTagArgs<ExtArgs>
    caseDocument?: boolean | Case$caseDocumentArgs<ExtArgs>
    caseReminder?: boolean | Case$caseReminderArgs<ExtArgs>
    caseInvoice?: boolean | Case$caseInvoiceArgs<ExtArgs>
    caseBillings?: boolean | Case$caseBillingsArgs<ExtArgs>
    caseNote?: boolean | Case$caseNoteArgs<ExtArgs>
    _count?: boolean | CaseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["case"]>

  export type CaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    practiseArea?: boolean
    arrivalDate?: boolean
    status?: boolean
    matterPriority?: boolean
    internalRefNumber?: boolean
    filedDate?: boolean
    closedDate?: boolean
    estimatedCloseDate?: boolean
    stage?: boolean
    clientId?: boolean
    adminId?: boolean
    opponentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | TeamClientDefaultArgs<ExtArgs>
    admin?: boolean | TeamAdminDefaultArgs<ExtArgs>
    Opponent?: boolean | Case$OpponentArgs<ExtArgs>
  }, ExtArgs["result"]["case"]>

  export type CaseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    practiseArea?: boolean
    arrivalDate?: boolean
    status?: boolean
    matterPriority?: boolean
    internalRefNumber?: boolean
    filedDate?: boolean
    closedDate?: boolean
    estimatedCloseDate?: boolean
    stage?: boolean
    clientId?: boolean
    adminId?: boolean
    opponentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | TeamClientDefaultArgs<ExtArgs>
    admin?: boolean | TeamAdminDefaultArgs<ExtArgs>
    Opponent?: boolean | Case$OpponentArgs<ExtArgs>
  }, ExtArgs["result"]["case"]>

  export type CaseSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    practiseArea?: boolean
    arrivalDate?: boolean
    status?: boolean
    matterPriority?: boolean
    internalRefNumber?: boolean
    filedDate?: boolean
    closedDate?: boolean
    estimatedCloseDate?: boolean
    stage?: boolean
    clientId?: boolean
    adminId?: boolean
    opponentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "practiseArea" | "arrivalDate" | "status" | "matterPriority" | "internalRefNumber" | "filedDate" | "closedDate" | "estimatedCloseDate" | "stage" | "clientId" | "adminId" | "opponentId" | "createdAt" | "updatedAt", ExtArgs["result"]["case"]>
  export type CaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | TeamClientDefaultArgs<ExtArgs>
    admin?: boolean | TeamAdminDefaultArgs<ExtArgs>
    members?: boolean | Case$membersArgs<ExtArgs>
    Opponent?: boolean | Case$OpponentArgs<ExtArgs>
    caseTag?: boolean | Case$caseTagArgs<ExtArgs>
    caseDocument?: boolean | Case$caseDocumentArgs<ExtArgs>
    caseReminder?: boolean | Case$caseReminderArgs<ExtArgs>
    caseInvoice?: boolean | Case$caseInvoiceArgs<ExtArgs>
    caseBillings?: boolean | Case$caseBillingsArgs<ExtArgs>
    caseNote?: boolean | Case$caseNoteArgs<ExtArgs>
    _count?: boolean | CaseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | TeamClientDefaultArgs<ExtArgs>
    admin?: boolean | TeamAdminDefaultArgs<ExtArgs>
    Opponent?: boolean | Case$OpponentArgs<ExtArgs>
  }
  export type CaseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | TeamClientDefaultArgs<ExtArgs>
    admin?: boolean | TeamAdminDefaultArgs<ExtArgs>
    Opponent?: boolean | Case$OpponentArgs<ExtArgs>
  }

  export type $CasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Case"
    objects: {
      client: Prisma.$TeamClientPayload<ExtArgs>
      admin: Prisma.$TeamAdminPayload<ExtArgs>
      members: Prisma.$TeamMembershipPayload<ExtArgs>[]
      Opponent: Prisma.$OpponentPayload<ExtArgs> | null
      caseTag: Prisma.$CaseTagPayload<ExtArgs> | null
      caseDocument: Prisma.$CaseDocumentPayload<ExtArgs> | null
      caseReminder: Prisma.$CaseReminderPayload<ExtArgs>[]
      caseInvoice: Prisma.$CaseInvoicePayload<ExtArgs>[]
      caseBillings: Prisma.$CaseBillingPayload<ExtArgs> | null
      caseNote: Prisma.$CaseNotePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      practiseArea: $Enums.PracticeArea
      arrivalDate: Date | null
      status: $Enums.CaseStatus | null
      matterPriority: $Enums.matterPriority
      internalRefNumber: string | null
      filedDate: Date | null
      closedDate: Date | null
      estimatedCloseDate: Date | null
      stage: $Enums.CaseStage
      clientId: string
      adminId: string
      opponentId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["case"]>
    composites: {}
  }

  type CaseGetPayload<S extends boolean | null | undefined | CaseDefaultArgs> = $Result.GetResult<Prisma.$CasePayload, S>

  type CaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CaseCountAggregateInputType | true
    }

  export interface CaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Case'], meta: { name: 'Case' } }
    /**
     * Find zero or one Case that matches the filter.
     * @param {CaseFindUniqueArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseFindUniqueArgs>(args: SelectSubset<T, CaseFindUniqueArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Case that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CaseFindUniqueOrThrowArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Case that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindFirstArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseFindFirstArgs>(args?: SelectSubset<T, CaseFindFirstArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Case that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindFirstOrThrowArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cases
     * const cases = await prisma.case.findMany()
     * 
     * // Get first 10 Cases
     * const cases = await prisma.case.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseWithIdOnly = await prisma.case.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseFindManyArgs>(args?: SelectSubset<T, CaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Case.
     * @param {CaseCreateArgs} args - Arguments to create a Case.
     * @example
     * // Create one Case
     * const Case = await prisma.case.create({
     *   data: {
     *     // ... data to create a Case
     *   }
     * })
     * 
     */
    create<T extends CaseCreateArgs>(args: SelectSubset<T, CaseCreateArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cases.
     * @param {CaseCreateManyArgs} args - Arguments to create many Cases.
     * @example
     * // Create many Cases
     * const case = await prisma.case.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseCreateManyArgs>(args?: SelectSubset<T, CaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cases and returns the data saved in the database.
     * @param {CaseCreateManyAndReturnArgs} args - Arguments to create many Cases.
     * @example
     * // Create many Cases
     * const case = await prisma.case.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cases and only return the `id`
     * const caseWithIdOnly = await prisma.case.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Case.
     * @param {CaseDeleteArgs} args - Arguments to delete one Case.
     * @example
     * // Delete one Case
     * const Case = await prisma.case.delete({
     *   where: {
     *     // ... filter to delete one Case
     *   }
     * })
     * 
     */
    delete<T extends CaseDeleteArgs>(args: SelectSubset<T, CaseDeleteArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Case.
     * @param {CaseUpdateArgs} args - Arguments to update one Case.
     * @example
     * // Update one Case
     * const case = await prisma.case.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseUpdateArgs>(args: SelectSubset<T, CaseUpdateArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cases.
     * @param {CaseDeleteManyArgs} args - Arguments to filter Cases to delete.
     * @example
     * // Delete a few Cases
     * const { count } = await prisma.case.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseDeleteManyArgs>(args?: SelectSubset<T, CaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cases
     * const case = await prisma.case.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseUpdateManyArgs>(args: SelectSubset<T, CaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cases and returns the data updated in the database.
     * @param {CaseUpdateManyAndReturnArgs} args - Arguments to update many Cases.
     * @example
     * // Update many Cases
     * const case = await prisma.case.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Cases and only return the `id`
     * const caseWithIdOnly = await prisma.case.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CaseUpdateManyAndReturnArgs>(args: SelectSubset<T, CaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Case.
     * @param {CaseUpsertArgs} args - Arguments to update or create a Case.
     * @example
     * // Update or create a Case
     * const case = await prisma.case.upsert({
     *   create: {
     *     // ... data to create a Case
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Case we want to update
     *   }
     * })
     */
    upsert<T extends CaseUpsertArgs>(args: SelectSubset<T, CaseUpsertArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseCountArgs} args - Arguments to filter Cases to count.
     * @example
     * // Count the number of Cases
     * const count = await prisma.case.count({
     *   where: {
     *     // ... the filter for the Cases we want to count
     *   }
     * })
    **/
    count<T extends CaseCountArgs>(
      args?: Subset<T, CaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Case.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseAggregateArgs>(args: Subset<T, CaseAggregateArgs>): Prisma.PrismaPromise<GetCaseAggregateType<T>>

    /**
     * Group by Case.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseGroupByArgs['orderBy'] }
        : { orderBy?: CaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Case model
   */
  readonly fields: CaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Case.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends TeamClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamClientDefaultArgs<ExtArgs>>): Prisma__TeamClientClient<$Result.GetResult<Prisma.$TeamClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    admin<T extends TeamAdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamAdminDefaultArgs<ExtArgs>>): Prisma__TeamAdminClient<$Result.GetResult<Prisma.$TeamAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    members<T extends Case$membersArgs<ExtArgs> = {}>(args?: Subset<T, Case$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Opponent<T extends Case$OpponentArgs<ExtArgs> = {}>(args?: Subset<T, Case$OpponentArgs<ExtArgs>>): Prisma__OpponentClient<$Result.GetResult<Prisma.$OpponentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    caseTag<T extends Case$caseTagArgs<ExtArgs> = {}>(args?: Subset<T, Case$caseTagArgs<ExtArgs>>): Prisma__CaseTagClient<$Result.GetResult<Prisma.$CaseTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    caseDocument<T extends Case$caseDocumentArgs<ExtArgs> = {}>(args?: Subset<T, Case$caseDocumentArgs<ExtArgs>>): Prisma__CaseDocumentClient<$Result.GetResult<Prisma.$CaseDocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    caseReminder<T extends Case$caseReminderArgs<ExtArgs> = {}>(args?: Subset<T, Case$caseReminderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseReminderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    caseInvoice<T extends Case$caseInvoiceArgs<ExtArgs> = {}>(args?: Subset<T, Case$caseInvoiceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseInvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    caseBillings<T extends Case$caseBillingsArgs<ExtArgs> = {}>(args?: Subset<T, Case$caseBillingsArgs<ExtArgs>>): Prisma__CaseBillingClient<$Result.GetResult<Prisma.$CaseBillingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    caseNote<T extends Case$caseNoteArgs<ExtArgs> = {}>(args?: Subset<T, Case$caseNoteArgs<ExtArgs>>): Prisma__CaseNoteClient<$Result.GetResult<Prisma.$CaseNotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Case model
   */
  interface CaseFieldRefs {
    readonly id: FieldRef<"Case", 'String'>
    readonly title: FieldRef<"Case", 'String'>
    readonly description: FieldRef<"Case", 'String'>
    readonly practiseArea: FieldRef<"Case", 'PracticeArea'>
    readonly arrivalDate: FieldRef<"Case", 'DateTime'>
    readonly status: FieldRef<"Case", 'CaseStatus'>
    readonly matterPriority: FieldRef<"Case", 'matterPriority'>
    readonly internalRefNumber: FieldRef<"Case", 'String'>
    readonly filedDate: FieldRef<"Case", 'DateTime'>
    readonly closedDate: FieldRef<"Case", 'DateTime'>
    readonly estimatedCloseDate: FieldRef<"Case", 'DateTime'>
    readonly stage: FieldRef<"Case", 'CaseStage'>
    readonly clientId: FieldRef<"Case", 'String'>
    readonly adminId: FieldRef<"Case", 'String'>
    readonly opponentId: FieldRef<"Case", 'String'>
    readonly createdAt: FieldRef<"Case", 'DateTime'>
    readonly updatedAt: FieldRef<"Case", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Case findUnique
   */
  export type CaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case findUniqueOrThrow
   */
  export type CaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case findFirst
   */
  export type CaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cases.
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cases.
     */
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Case findFirstOrThrow
   */
  export type CaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cases.
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cases.
     */
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Case findMany
   */
  export type CaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Cases to fetch.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cases.
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Case create
   */
  export type CaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * The data needed to create a Case.
     */
    data: XOR<CaseCreateInput, CaseUncheckedCreateInput>
  }

  /**
   * Case createMany
   */
  export type CaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cases.
     */
    data: CaseCreateManyInput | CaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Case createManyAndReturn
   */
  export type CaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * The data used to create many Cases.
     */
    data: CaseCreateManyInput | CaseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Case update
   */
  export type CaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * The data needed to update a Case.
     */
    data: XOR<CaseUpdateInput, CaseUncheckedUpdateInput>
    /**
     * Choose, which Case to update.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case updateMany
   */
  export type CaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cases.
     */
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyInput>
    /**
     * Filter which Cases to update
     */
    where?: CaseWhereInput
    /**
     * Limit how many Cases to update.
     */
    limit?: number
  }

  /**
   * Case updateManyAndReturn
   */
  export type CaseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * The data used to update Cases.
     */
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyInput>
    /**
     * Filter which Cases to update
     */
    where?: CaseWhereInput
    /**
     * Limit how many Cases to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Case upsert
   */
  export type CaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * The filter to search for the Case to update in case it exists.
     */
    where: CaseWhereUniqueInput
    /**
     * In case the Case found by the `where` argument doesn't exist, create a new Case with this data.
     */
    create: XOR<CaseCreateInput, CaseUncheckedCreateInput>
    /**
     * In case the Case was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseUpdateInput, CaseUncheckedUpdateInput>
  }

  /**
   * Case delete
   */
  export type CaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter which Case to delete.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case deleteMany
   */
  export type CaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cases to delete
     */
    where?: CaseWhereInput
    /**
     * Limit how many Cases to delete.
     */
    limit?: number
  }

  /**
   * Case.members
   */
  export type Case$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembership
     */
    select?: TeamMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembership
     */
    omit?: TeamMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembershipInclude<ExtArgs> | null
    where?: TeamMembershipWhereInput
    orderBy?: TeamMembershipOrderByWithRelationInput | TeamMembershipOrderByWithRelationInput[]
    cursor?: TeamMembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamMembershipScalarFieldEnum | TeamMembershipScalarFieldEnum[]
  }

  /**
   * Case.Opponent
   */
  export type Case$OpponentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opponent
     */
    select?: OpponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Opponent
     */
    omit?: OpponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpponentInclude<ExtArgs> | null
    where?: OpponentWhereInput
  }

  /**
   * Case.caseTag
   */
  export type Case$caseTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseTag
     */
    select?: CaseTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseTag
     */
    omit?: CaseTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseTagInclude<ExtArgs> | null
    where?: CaseTagWhereInput
  }

  /**
   * Case.caseDocument
   */
  export type Case$caseDocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDocument
     */
    select?: CaseDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseDocument
     */
    omit?: CaseDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDocumentInclude<ExtArgs> | null
    where?: CaseDocumentWhereInput
  }

  /**
   * Case.caseReminder
   */
  export type Case$caseReminderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseReminder
     */
    select?: CaseReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseReminder
     */
    omit?: CaseReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseReminderInclude<ExtArgs> | null
    where?: CaseReminderWhereInput
    orderBy?: CaseReminderOrderByWithRelationInput | CaseReminderOrderByWithRelationInput[]
    cursor?: CaseReminderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseReminderScalarFieldEnum | CaseReminderScalarFieldEnum[]
  }

  /**
   * Case.caseInvoice
   */
  export type Case$caseInvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseInvoice
     */
    select?: CaseInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseInvoice
     */
    omit?: CaseInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInvoiceInclude<ExtArgs> | null
    where?: CaseInvoiceWhereInput
    orderBy?: CaseInvoiceOrderByWithRelationInput | CaseInvoiceOrderByWithRelationInput[]
    cursor?: CaseInvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseInvoiceScalarFieldEnum | CaseInvoiceScalarFieldEnum[]
  }

  /**
   * Case.caseBillings
   */
  export type Case$caseBillingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBilling
     */
    select?: CaseBillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseBilling
     */
    omit?: CaseBillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseBillingInclude<ExtArgs> | null
    where?: CaseBillingWhereInput
  }

  /**
   * Case.caseNote
   */
  export type Case$caseNoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseNote
     */
    select?: CaseNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseNote
     */
    omit?: CaseNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseNoteInclude<ExtArgs> | null
    where?: CaseNoteWhereInput
  }

  /**
   * Case without action
   */
  export type CaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
  }


  /**
   * Model CaseNote
   */

  export type AggregateCaseNote = {
    _count: CaseNoteCountAggregateOutputType | null
    _min: CaseNoteMinAggregateOutputType | null
    _max: CaseNoteMaxAggregateOutputType | null
  }

  export type CaseNoteMinAggregateOutputType = {
    id: string | null
    note: string | null
    caseId: string | null
    createdAt: Date | null
  }

  export type CaseNoteMaxAggregateOutputType = {
    id: string | null
    note: string | null
    caseId: string | null
    createdAt: Date | null
  }

  export type CaseNoteCountAggregateOutputType = {
    id: number
    note: number
    caseId: number
    createdAt: number
    _all: number
  }


  export type CaseNoteMinAggregateInputType = {
    id?: true
    note?: true
    caseId?: true
    createdAt?: true
  }

  export type CaseNoteMaxAggregateInputType = {
    id?: true
    note?: true
    caseId?: true
    createdAt?: true
  }

  export type CaseNoteCountAggregateInputType = {
    id?: true
    note?: true
    caseId?: true
    createdAt?: true
    _all?: true
  }

  export type CaseNoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseNote to aggregate.
     */
    where?: CaseNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseNotes to fetch.
     */
    orderBy?: CaseNoteOrderByWithRelationInput | CaseNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CaseNotes
    **/
    _count?: true | CaseNoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseNoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseNoteMaxAggregateInputType
  }

  export type GetCaseNoteAggregateType<T extends CaseNoteAggregateArgs> = {
        [P in keyof T & keyof AggregateCaseNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaseNote[P]>
      : GetScalarType<T[P], AggregateCaseNote[P]>
  }




  export type CaseNoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseNoteWhereInput
    orderBy?: CaseNoteOrderByWithAggregationInput | CaseNoteOrderByWithAggregationInput[]
    by: CaseNoteScalarFieldEnum[] | CaseNoteScalarFieldEnum
    having?: CaseNoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseNoteCountAggregateInputType | true
    _min?: CaseNoteMinAggregateInputType
    _max?: CaseNoteMaxAggregateInputType
  }

  export type CaseNoteGroupByOutputType = {
    id: string
    note: string | null
    caseId: string
    createdAt: Date
    _count: CaseNoteCountAggregateOutputType | null
    _min: CaseNoteMinAggregateOutputType | null
    _max: CaseNoteMaxAggregateOutputType | null
  }

  type GetCaseNoteGroupByPayload<T extends CaseNoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseNoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseNoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseNoteGroupByOutputType[P]>
            : GetScalarType<T[P], CaseNoteGroupByOutputType[P]>
        }
      >
    >


  export type CaseNoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    note?: boolean
    caseId?: boolean
    createdAt?: boolean
    case?: boolean | CaseNote$caseArgs<ExtArgs>
  }, ExtArgs["result"]["caseNote"]>

  export type CaseNoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    note?: boolean
    caseId?: boolean
    createdAt?: boolean
    case?: boolean | CaseNote$caseArgs<ExtArgs>
  }, ExtArgs["result"]["caseNote"]>

  export type CaseNoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    note?: boolean
    caseId?: boolean
    createdAt?: boolean
    case?: boolean | CaseNote$caseArgs<ExtArgs>
  }, ExtArgs["result"]["caseNote"]>

  export type CaseNoteSelectScalar = {
    id?: boolean
    note?: boolean
    caseId?: boolean
    createdAt?: boolean
  }

  export type CaseNoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "note" | "caseId" | "createdAt", ExtArgs["result"]["caseNote"]>
  export type CaseNoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseNote$caseArgs<ExtArgs>
  }
  export type CaseNoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseNote$caseArgs<ExtArgs>
  }
  export type CaseNoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseNote$caseArgs<ExtArgs>
  }

  export type $CaseNotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CaseNote"
    objects: {
      case: Prisma.$CasePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      note: string | null
      caseId: string
      createdAt: Date
    }, ExtArgs["result"]["caseNote"]>
    composites: {}
  }

  type CaseNoteGetPayload<S extends boolean | null | undefined | CaseNoteDefaultArgs> = $Result.GetResult<Prisma.$CaseNotePayload, S>

  type CaseNoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CaseNoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CaseNoteCountAggregateInputType | true
    }

  export interface CaseNoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CaseNote'], meta: { name: 'CaseNote' } }
    /**
     * Find zero or one CaseNote that matches the filter.
     * @param {CaseNoteFindUniqueArgs} args - Arguments to find a CaseNote
     * @example
     * // Get one CaseNote
     * const caseNote = await prisma.caseNote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseNoteFindUniqueArgs>(args: SelectSubset<T, CaseNoteFindUniqueArgs<ExtArgs>>): Prisma__CaseNoteClient<$Result.GetResult<Prisma.$CaseNotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CaseNote that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CaseNoteFindUniqueOrThrowArgs} args - Arguments to find a CaseNote
     * @example
     * // Get one CaseNote
     * const caseNote = await prisma.caseNote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseNoteFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseNoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseNoteClient<$Result.GetResult<Prisma.$CaseNotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CaseNote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseNoteFindFirstArgs} args - Arguments to find a CaseNote
     * @example
     * // Get one CaseNote
     * const caseNote = await prisma.caseNote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseNoteFindFirstArgs>(args?: SelectSubset<T, CaseNoteFindFirstArgs<ExtArgs>>): Prisma__CaseNoteClient<$Result.GetResult<Prisma.$CaseNotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CaseNote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseNoteFindFirstOrThrowArgs} args - Arguments to find a CaseNote
     * @example
     * // Get one CaseNote
     * const caseNote = await prisma.caseNote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseNoteFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseNoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseNoteClient<$Result.GetResult<Prisma.$CaseNotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CaseNotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseNoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CaseNotes
     * const caseNotes = await prisma.caseNote.findMany()
     * 
     * // Get first 10 CaseNotes
     * const caseNotes = await prisma.caseNote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseNoteWithIdOnly = await prisma.caseNote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseNoteFindManyArgs>(args?: SelectSubset<T, CaseNoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseNotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CaseNote.
     * @param {CaseNoteCreateArgs} args - Arguments to create a CaseNote.
     * @example
     * // Create one CaseNote
     * const CaseNote = await prisma.caseNote.create({
     *   data: {
     *     // ... data to create a CaseNote
     *   }
     * })
     * 
     */
    create<T extends CaseNoteCreateArgs>(args: SelectSubset<T, CaseNoteCreateArgs<ExtArgs>>): Prisma__CaseNoteClient<$Result.GetResult<Prisma.$CaseNotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CaseNotes.
     * @param {CaseNoteCreateManyArgs} args - Arguments to create many CaseNotes.
     * @example
     * // Create many CaseNotes
     * const caseNote = await prisma.caseNote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseNoteCreateManyArgs>(args?: SelectSubset<T, CaseNoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CaseNotes and returns the data saved in the database.
     * @param {CaseNoteCreateManyAndReturnArgs} args - Arguments to create many CaseNotes.
     * @example
     * // Create many CaseNotes
     * const caseNote = await prisma.caseNote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CaseNotes and only return the `id`
     * const caseNoteWithIdOnly = await prisma.caseNote.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseNoteCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseNoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseNotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CaseNote.
     * @param {CaseNoteDeleteArgs} args - Arguments to delete one CaseNote.
     * @example
     * // Delete one CaseNote
     * const CaseNote = await prisma.caseNote.delete({
     *   where: {
     *     // ... filter to delete one CaseNote
     *   }
     * })
     * 
     */
    delete<T extends CaseNoteDeleteArgs>(args: SelectSubset<T, CaseNoteDeleteArgs<ExtArgs>>): Prisma__CaseNoteClient<$Result.GetResult<Prisma.$CaseNotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CaseNote.
     * @param {CaseNoteUpdateArgs} args - Arguments to update one CaseNote.
     * @example
     * // Update one CaseNote
     * const caseNote = await prisma.caseNote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseNoteUpdateArgs>(args: SelectSubset<T, CaseNoteUpdateArgs<ExtArgs>>): Prisma__CaseNoteClient<$Result.GetResult<Prisma.$CaseNotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CaseNotes.
     * @param {CaseNoteDeleteManyArgs} args - Arguments to filter CaseNotes to delete.
     * @example
     * // Delete a few CaseNotes
     * const { count } = await prisma.caseNote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseNoteDeleteManyArgs>(args?: SelectSubset<T, CaseNoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseNoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CaseNotes
     * const caseNote = await prisma.caseNote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseNoteUpdateManyArgs>(args: SelectSubset<T, CaseNoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseNotes and returns the data updated in the database.
     * @param {CaseNoteUpdateManyAndReturnArgs} args - Arguments to update many CaseNotes.
     * @example
     * // Update many CaseNotes
     * const caseNote = await prisma.caseNote.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CaseNotes and only return the `id`
     * const caseNoteWithIdOnly = await prisma.caseNote.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CaseNoteUpdateManyAndReturnArgs>(args: SelectSubset<T, CaseNoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseNotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CaseNote.
     * @param {CaseNoteUpsertArgs} args - Arguments to update or create a CaseNote.
     * @example
     * // Update or create a CaseNote
     * const caseNote = await prisma.caseNote.upsert({
     *   create: {
     *     // ... data to create a CaseNote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CaseNote we want to update
     *   }
     * })
     */
    upsert<T extends CaseNoteUpsertArgs>(args: SelectSubset<T, CaseNoteUpsertArgs<ExtArgs>>): Prisma__CaseNoteClient<$Result.GetResult<Prisma.$CaseNotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CaseNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseNoteCountArgs} args - Arguments to filter CaseNotes to count.
     * @example
     * // Count the number of CaseNotes
     * const count = await prisma.caseNote.count({
     *   where: {
     *     // ... the filter for the CaseNotes we want to count
     *   }
     * })
    **/
    count<T extends CaseNoteCountArgs>(
      args?: Subset<T, CaseNoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseNoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CaseNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseNoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseNoteAggregateArgs>(args: Subset<T, CaseNoteAggregateArgs>): Prisma.PrismaPromise<GetCaseNoteAggregateType<T>>

    /**
     * Group by CaseNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseNoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseNoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseNoteGroupByArgs['orderBy'] }
        : { orderBy?: CaseNoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseNoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CaseNote model
   */
  readonly fields: CaseNoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CaseNote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseNoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseNote$caseArgs<ExtArgs> = {}>(args?: Subset<T, CaseNote$caseArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CaseNote model
   */
  interface CaseNoteFieldRefs {
    readonly id: FieldRef<"CaseNote", 'String'>
    readonly note: FieldRef<"CaseNote", 'String'>
    readonly caseId: FieldRef<"CaseNote", 'String'>
    readonly createdAt: FieldRef<"CaseNote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CaseNote findUnique
   */
  export type CaseNoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseNote
     */
    select?: CaseNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseNote
     */
    omit?: CaseNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseNoteInclude<ExtArgs> | null
    /**
     * Filter, which CaseNote to fetch.
     */
    where: CaseNoteWhereUniqueInput
  }

  /**
   * CaseNote findUniqueOrThrow
   */
  export type CaseNoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseNote
     */
    select?: CaseNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseNote
     */
    omit?: CaseNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseNoteInclude<ExtArgs> | null
    /**
     * Filter, which CaseNote to fetch.
     */
    where: CaseNoteWhereUniqueInput
  }

  /**
   * CaseNote findFirst
   */
  export type CaseNoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseNote
     */
    select?: CaseNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseNote
     */
    omit?: CaseNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseNoteInclude<ExtArgs> | null
    /**
     * Filter, which CaseNote to fetch.
     */
    where?: CaseNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseNotes to fetch.
     */
    orderBy?: CaseNoteOrderByWithRelationInput | CaseNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseNotes.
     */
    cursor?: CaseNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseNotes.
     */
    distinct?: CaseNoteScalarFieldEnum | CaseNoteScalarFieldEnum[]
  }

  /**
   * CaseNote findFirstOrThrow
   */
  export type CaseNoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseNote
     */
    select?: CaseNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseNote
     */
    omit?: CaseNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseNoteInclude<ExtArgs> | null
    /**
     * Filter, which CaseNote to fetch.
     */
    where?: CaseNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseNotes to fetch.
     */
    orderBy?: CaseNoteOrderByWithRelationInput | CaseNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseNotes.
     */
    cursor?: CaseNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseNotes.
     */
    distinct?: CaseNoteScalarFieldEnum | CaseNoteScalarFieldEnum[]
  }

  /**
   * CaseNote findMany
   */
  export type CaseNoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseNote
     */
    select?: CaseNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseNote
     */
    omit?: CaseNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseNoteInclude<ExtArgs> | null
    /**
     * Filter, which CaseNotes to fetch.
     */
    where?: CaseNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseNotes to fetch.
     */
    orderBy?: CaseNoteOrderByWithRelationInput | CaseNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CaseNotes.
     */
    cursor?: CaseNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseNotes.
     */
    skip?: number
    distinct?: CaseNoteScalarFieldEnum | CaseNoteScalarFieldEnum[]
  }

  /**
   * CaseNote create
   */
  export type CaseNoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseNote
     */
    select?: CaseNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseNote
     */
    omit?: CaseNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseNoteInclude<ExtArgs> | null
    /**
     * The data needed to create a CaseNote.
     */
    data: XOR<CaseNoteCreateInput, CaseNoteUncheckedCreateInput>
  }

  /**
   * CaseNote createMany
   */
  export type CaseNoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CaseNotes.
     */
    data: CaseNoteCreateManyInput | CaseNoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaseNote createManyAndReturn
   */
  export type CaseNoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseNote
     */
    select?: CaseNoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CaseNote
     */
    omit?: CaseNoteOmit<ExtArgs> | null
    /**
     * The data used to create many CaseNotes.
     */
    data: CaseNoteCreateManyInput | CaseNoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseNoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseNote update
   */
  export type CaseNoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseNote
     */
    select?: CaseNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseNote
     */
    omit?: CaseNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseNoteInclude<ExtArgs> | null
    /**
     * The data needed to update a CaseNote.
     */
    data: XOR<CaseNoteUpdateInput, CaseNoteUncheckedUpdateInput>
    /**
     * Choose, which CaseNote to update.
     */
    where: CaseNoteWhereUniqueInput
  }

  /**
   * CaseNote updateMany
   */
  export type CaseNoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CaseNotes.
     */
    data: XOR<CaseNoteUpdateManyMutationInput, CaseNoteUncheckedUpdateManyInput>
    /**
     * Filter which CaseNotes to update
     */
    where?: CaseNoteWhereInput
    /**
     * Limit how many CaseNotes to update.
     */
    limit?: number
  }

  /**
   * CaseNote updateManyAndReturn
   */
  export type CaseNoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseNote
     */
    select?: CaseNoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CaseNote
     */
    omit?: CaseNoteOmit<ExtArgs> | null
    /**
     * The data used to update CaseNotes.
     */
    data: XOR<CaseNoteUpdateManyMutationInput, CaseNoteUncheckedUpdateManyInput>
    /**
     * Filter which CaseNotes to update
     */
    where?: CaseNoteWhereInput
    /**
     * Limit how many CaseNotes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseNoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseNote upsert
   */
  export type CaseNoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseNote
     */
    select?: CaseNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseNote
     */
    omit?: CaseNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseNoteInclude<ExtArgs> | null
    /**
     * The filter to search for the CaseNote to update in case it exists.
     */
    where: CaseNoteWhereUniqueInput
    /**
     * In case the CaseNote found by the `where` argument doesn't exist, create a new CaseNote with this data.
     */
    create: XOR<CaseNoteCreateInput, CaseNoteUncheckedCreateInput>
    /**
     * In case the CaseNote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseNoteUpdateInput, CaseNoteUncheckedUpdateInput>
  }

  /**
   * CaseNote delete
   */
  export type CaseNoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseNote
     */
    select?: CaseNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseNote
     */
    omit?: CaseNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseNoteInclude<ExtArgs> | null
    /**
     * Filter which CaseNote to delete.
     */
    where: CaseNoteWhereUniqueInput
  }

  /**
   * CaseNote deleteMany
   */
  export type CaseNoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseNotes to delete
     */
    where?: CaseNoteWhereInput
    /**
     * Limit how many CaseNotes to delete.
     */
    limit?: number
  }

  /**
   * CaseNote.case
   */
  export type CaseNote$caseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    where?: CaseWhereInput
  }

  /**
   * CaseNote without action
   */
  export type CaseNoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseNote
     */
    select?: CaseNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseNote
     */
    omit?: CaseNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseNoteInclude<ExtArgs> | null
  }


  /**
   * Model CaseDocument
   */

  export type AggregateCaseDocument = {
    _count: CaseDocumentCountAggregateOutputType | null
    _min: CaseDocumentMinAggregateOutputType | null
    _max: CaseDocumentMaxAggregateOutputType | null
  }

  export type CaseDocumentMinAggregateOutputType = {
    id: string | null
    caseId: string | null
    documentUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseDocumentMaxAggregateOutputType = {
    id: string | null
    caseId: string | null
    documentUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseDocumentCountAggregateOutputType = {
    id: number
    caseId: number
    documentUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CaseDocumentMinAggregateInputType = {
    id?: true
    caseId?: true
    documentUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseDocumentMaxAggregateInputType = {
    id?: true
    caseId?: true
    documentUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseDocumentCountAggregateInputType = {
    id?: true
    caseId?: true
    documentUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CaseDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseDocument to aggregate.
     */
    where?: CaseDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseDocuments to fetch.
     */
    orderBy?: CaseDocumentOrderByWithRelationInput | CaseDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CaseDocuments
    **/
    _count?: true | CaseDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseDocumentMaxAggregateInputType
  }

  export type GetCaseDocumentAggregateType<T extends CaseDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateCaseDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaseDocument[P]>
      : GetScalarType<T[P], AggregateCaseDocument[P]>
  }




  export type CaseDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseDocumentWhereInput
    orderBy?: CaseDocumentOrderByWithAggregationInput | CaseDocumentOrderByWithAggregationInput[]
    by: CaseDocumentScalarFieldEnum[] | CaseDocumentScalarFieldEnum
    having?: CaseDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseDocumentCountAggregateInputType | true
    _min?: CaseDocumentMinAggregateInputType
    _max?: CaseDocumentMaxAggregateInputType
  }

  export type CaseDocumentGroupByOutputType = {
    id: string
    caseId: string
    documentUrl: string
    createdAt: Date
    updatedAt: Date
    _count: CaseDocumentCountAggregateOutputType | null
    _min: CaseDocumentMinAggregateOutputType | null
    _max: CaseDocumentMaxAggregateOutputType | null
  }

  type GetCaseDocumentGroupByPayload<T extends CaseDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], CaseDocumentGroupByOutputType[P]>
        }
      >
    >


  export type CaseDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    documentUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseDocument"]>

  export type CaseDocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    documentUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseDocument"]>

  export type CaseDocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    documentUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseDocument"]>

  export type CaseDocumentSelectScalar = {
    id?: boolean
    caseId?: boolean
    documentUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CaseDocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "caseId" | "documentUrl" | "createdAt" | "updatedAt", ExtArgs["result"]["caseDocument"]>
  export type CaseDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }
  export type CaseDocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }
  export type CaseDocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }

  export type $CaseDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CaseDocument"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      caseId: string
      documentUrl: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["caseDocument"]>
    composites: {}
  }

  type CaseDocumentGetPayload<S extends boolean | null | undefined | CaseDocumentDefaultArgs> = $Result.GetResult<Prisma.$CaseDocumentPayload, S>

  type CaseDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CaseDocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CaseDocumentCountAggregateInputType | true
    }

  export interface CaseDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CaseDocument'], meta: { name: 'CaseDocument' } }
    /**
     * Find zero or one CaseDocument that matches the filter.
     * @param {CaseDocumentFindUniqueArgs} args - Arguments to find a CaseDocument
     * @example
     * // Get one CaseDocument
     * const caseDocument = await prisma.caseDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseDocumentFindUniqueArgs>(args: SelectSubset<T, CaseDocumentFindUniqueArgs<ExtArgs>>): Prisma__CaseDocumentClient<$Result.GetResult<Prisma.$CaseDocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CaseDocument that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CaseDocumentFindUniqueOrThrowArgs} args - Arguments to find a CaseDocument
     * @example
     * // Get one CaseDocument
     * const caseDocument = await prisma.caseDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseDocumentClient<$Result.GetResult<Prisma.$CaseDocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CaseDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseDocumentFindFirstArgs} args - Arguments to find a CaseDocument
     * @example
     * // Get one CaseDocument
     * const caseDocument = await prisma.caseDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseDocumentFindFirstArgs>(args?: SelectSubset<T, CaseDocumentFindFirstArgs<ExtArgs>>): Prisma__CaseDocumentClient<$Result.GetResult<Prisma.$CaseDocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CaseDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseDocumentFindFirstOrThrowArgs} args - Arguments to find a CaseDocument
     * @example
     * // Get one CaseDocument
     * const caseDocument = await prisma.caseDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseDocumentClient<$Result.GetResult<Prisma.$CaseDocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CaseDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CaseDocuments
     * const caseDocuments = await prisma.caseDocument.findMany()
     * 
     * // Get first 10 CaseDocuments
     * const caseDocuments = await prisma.caseDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseDocumentWithIdOnly = await prisma.caseDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseDocumentFindManyArgs>(args?: SelectSubset<T, CaseDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CaseDocument.
     * @param {CaseDocumentCreateArgs} args - Arguments to create a CaseDocument.
     * @example
     * // Create one CaseDocument
     * const CaseDocument = await prisma.caseDocument.create({
     *   data: {
     *     // ... data to create a CaseDocument
     *   }
     * })
     * 
     */
    create<T extends CaseDocumentCreateArgs>(args: SelectSubset<T, CaseDocumentCreateArgs<ExtArgs>>): Prisma__CaseDocumentClient<$Result.GetResult<Prisma.$CaseDocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CaseDocuments.
     * @param {CaseDocumentCreateManyArgs} args - Arguments to create many CaseDocuments.
     * @example
     * // Create many CaseDocuments
     * const caseDocument = await prisma.caseDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseDocumentCreateManyArgs>(args?: SelectSubset<T, CaseDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CaseDocuments and returns the data saved in the database.
     * @param {CaseDocumentCreateManyAndReturnArgs} args - Arguments to create many CaseDocuments.
     * @example
     * // Create many CaseDocuments
     * const caseDocument = await prisma.caseDocument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CaseDocuments and only return the `id`
     * const caseDocumentWithIdOnly = await prisma.caseDocument.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseDocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseDocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CaseDocument.
     * @param {CaseDocumentDeleteArgs} args - Arguments to delete one CaseDocument.
     * @example
     * // Delete one CaseDocument
     * const CaseDocument = await prisma.caseDocument.delete({
     *   where: {
     *     // ... filter to delete one CaseDocument
     *   }
     * })
     * 
     */
    delete<T extends CaseDocumentDeleteArgs>(args: SelectSubset<T, CaseDocumentDeleteArgs<ExtArgs>>): Prisma__CaseDocumentClient<$Result.GetResult<Prisma.$CaseDocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CaseDocument.
     * @param {CaseDocumentUpdateArgs} args - Arguments to update one CaseDocument.
     * @example
     * // Update one CaseDocument
     * const caseDocument = await prisma.caseDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseDocumentUpdateArgs>(args: SelectSubset<T, CaseDocumentUpdateArgs<ExtArgs>>): Prisma__CaseDocumentClient<$Result.GetResult<Prisma.$CaseDocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CaseDocuments.
     * @param {CaseDocumentDeleteManyArgs} args - Arguments to filter CaseDocuments to delete.
     * @example
     * // Delete a few CaseDocuments
     * const { count } = await prisma.caseDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseDocumentDeleteManyArgs>(args?: SelectSubset<T, CaseDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CaseDocuments
     * const caseDocument = await prisma.caseDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseDocumentUpdateManyArgs>(args: SelectSubset<T, CaseDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseDocuments and returns the data updated in the database.
     * @param {CaseDocumentUpdateManyAndReturnArgs} args - Arguments to update many CaseDocuments.
     * @example
     * // Update many CaseDocuments
     * const caseDocument = await prisma.caseDocument.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CaseDocuments and only return the `id`
     * const caseDocumentWithIdOnly = await prisma.caseDocument.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CaseDocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, CaseDocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseDocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CaseDocument.
     * @param {CaseDocumentUpsertArgs} args - Arguments to update or create a CaseDocument.
     * @example
     * // Update or create a CaseDocument
     * const caseDocument = await prisma.caseDocument.upsert({
     *   create: {
     *     // ... data to create a CaseDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CaseDocument we want to update
     *   }
     * })
     */
    upsert<T extends CaseDocumentUpsertArgs>(args: SelectSubset<T, CaseDocumentUpsertArgs<ExtArgs>>): Prisma__CaseDocumentClient<$Result.GetResult<Prisma.$CaseDocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CaseDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseDocumentCountArgs} args - Arguments to filter CaseDocuments to count.
     * @example
     * // Count the number of CaseDocuments
     * const count = await prisma.caseDocument.count({
     *   where: {
     *     // ... the filter for the CaseDocuments we want to count
     *   }
     * })
    **/
    count<T extends CaseDocumentCountArgs>(
      args?: Subset<T, CaseDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CaseDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseDocumentAggregateArgs>(args: Subset<T, CaseDocumentAggregateArgs>): Prisma.PrismaPromise<GetCaseDocumentAggregateType<T>>

    /**
     * Group by CaseDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseDocumentGroupByArgs['orderBy'] }
        : { orderBy?: CaseDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CaseDocument model
   */
  readonly fields: CaseDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CaseDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CaseDocument model
   */
  interface CaseDocumentFieldRefs {
    readonly id: FieldRef<"CaseDocument", 'String'>
    readonly caseId: FieldRef<"CaseDocument", 'String'>
    readonly documentUrl: FieldRef<"CaseDocument", 'String'>
    readonly createdAt: FieldRef<"CaseDocument", 'DateTime'>
    readonly updatedAt: FieldRef<"CaseDocument", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CaseDocument findUnique
   */
  export type CaseDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDocument
     */
    select?: CaseDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseDocument
     */
    omit?: CaseDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CaseDocument to fetch.
     */
    where: CaseDocumentWhereUniqueInput
  }

  /**
   * CaseDocument findUniqueOrThrow
   */
  export type CaseDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDocument
     */
    select?: CaseDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseDocument
     */
    omit?: CaseDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CaseDocument to fetch.
     */
    where: CaseDocumentWhereUniqueInput
  }

  /**
   * CaseDocument findFirst
   */
  export type CaseDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDocument
     */
    select?: CaseDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseDocument
     */
    omit?: CaseDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CaseDocument to fetch.
     */
    where?: CaseDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseDocuments to fetch.
     */
    orderBy?: CaseDocumentOrderByWithRelationInput | CaseDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseDocuments.
     */
    cursor?: CaseDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseDocuments.
     */
    distinct?: CaseDocumentScalarFieldEnum | CaseDocumentScalarFieldEnum[]
  }

  /**
   * CaseDocument findFirstOrThrow
   */
  export type CaseDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDocument
     */
    select?: CaseDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseDocument
     */
    omit?: CaseDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CaseDocument to fetch.
     */
    where?: CaseDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseDocuments to fetch.
     */
    orderBy?: CaseDocumentOrderByWithRelationInput | CaseDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseDocuments.
     */
    cursor?: CaseDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseDocuments.
     */
    distinct?: CaseDocumentScalarFieldEnum | CaseDocumentScalarFieldEnum[]
  }

  /**
   * CaseDocument findMany
   */
  export type CaseDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDocument
     */
    select?: CaseDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseDocument
     */
    omit?: CaseDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CaseDocuments to fetch.
     */
    where?: CaseDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseDocuments to fetch.
     */
    orderBy?: CaseDocumentOrderByWithRelationInput | CaseDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CaseDocuments.
     */
    cursor?: CaseDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseDocuments.
     */
    skip?: number
    distinct?: CaseDocumentScalarFieldEnum | CaseDocumentScalarFieldEnum[]
  }

  /**
   * CaseDocument create
   */
  export type CaseDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDocument
     */
    select?: CaseDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseDocument
     */
    omit?: CaseDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a CaseDocument.
     */
    data: XOR<CaseDocumentCreateInput, CaseDocumentUncheckedCreateInput>
  }

  /**
   * CaseDocument createMany
   */
  export type CaseDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CaseDocuments.
     */
    data: CaseDocumentCreateManyInput | CaseDocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaseDocument createManyAndReturn
   */
  export type CaseDocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDocument
     */
    select?: CaseDocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CaseDocument
     */
    omit?: CaseDocumentOmit<ExtArgs> | null
    /**
     * The data used to create many CaseDocuments.
     */
    data: CaseDocumentCreateManyInput | CaseDocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseDocument update
   */
  export type CaseDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDocument
     */
    select?: CaseDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseDocument
     */
    omit?: CaseDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a CaseDocument.
     */
    data: XOR<CaseDocumentUpdateInput, CaseDocumentUncheckedUpdateInput>
    /**
     * Choose, which CaseDocument to update.
     */
    where: CaseDocumentWhereUniqueInput
  }

  /**
   * CaseDocument updateMany
   */
  export type CaseDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CaseDocuments.
     */
    data: XOR<CaseDocumentUpdateManyMutationInput, CaseDocumentUncheckedUpdateManyInput>
    /**
     * Filter which CaseDocuments to update
     */
    where?: CaseDocumentWhereInput
    /**
     * Limit how many CaseDocuments to update.
     */
    limit?: number
  }

  /**
   * CaseDocument updateManyAndReturn
   */
  export type CaseDocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDocument
     */
    select?: CaseDocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CaseDocument
     */
    omit?: CaseDocumentOmit<ExtArgs> | null
    /**
     * The data used to update CaseDocuments.
     */
    data: XOR<CaseDocumentUpdateManyMutationInput, CaseDocumentUncheckedUpdateManyInput>
    /**
     * Filter which CaseDocuments to update
     */
    where?: CaseDocumentWhereInput
    /**
     * Limit how many CaseDocuments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseDocument upsert
   */
  export type CaseDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDocument
     */
    select?: CaseDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseDocument
     */
    omit?: CaseDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the CaseDocument to update in case it exists.
     */
    where: CaseDocumentWhereUniqueInput
    /**
     * In case the CaseDocument found by the `where` argument doesn't exist, create a new CaseDocument with this data.
     */
    create: XOR<CaseDocumentCreateInput, CaseDocumentUncheckedCreateInput>
    /**
     * In case the CaseDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseDocumentUpdateInput, CaseDocumentUncheckedUpdateInput>
  }

  /**
   * CaseDocument delete
   */
  export type CaseDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDocument
     */
    select?: CaseDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseDocument
     */
    omit?: CaseDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDocumentInclude<ExtArgs> | null
    /**
     * Filter which CaseDocument to delete.
     */
    where: CaseDocumentWhereUniqueInput
  }

  /**
   * CaseDocument deleteMany
   */
  export type CaseDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseDocuments to delete
     */
    where?: CaseDocumentWhereInput
    /**
     * Limit how many CaseDocuments to delete.
     */
    limit?: number
  }

  /**
   * CaseDocument without action
   */
  export type CaseDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDocument
     */
    select?: CaseDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseDocument
     */
    omit?: CaseDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDocumentInclude<ExtArgs> | null
  }


  /**
   * Model CaseReminder
   */

  export type AggregateCaseReminder = {
    _count: CaseReminderCountAggregateOutputType | null
    _min: CaseReminderMinAggregateOutputType | null
    _max: CaseReminderMaxAggregateOutputType | null
  }

  export type CaseReminderMinAggregateOutputType = {
    id: string | null
    caseId: string | null
    reminderDate: Date | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseReminderMaxAggregateOutputType = {
    id: string | null
    caseId: string | null
    reminderDate: Date | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseReminderCountAggregateOutputType = {
    id: number
    caseId: number
    reminderDate: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CaseReminderMinAggregateInputType = {
    id?: true
    caseId?: true
    reminderDate?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseReminderMaxAggregateInputType = {
    id?: true
    caseId?: true
    reminderDate?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseReminderCountAggregateInputType = {
    id?: true
    caseId?: true
    reminderDate?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CaseReminderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseReminder to aggregate.
     */
    where?: CaseReminderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseReminders to fetch.
     */
    orderBy?: CaseReminderOrderByWithRelationInput | CaseReminderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseReminderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseReminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseReminders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CaseReminders
    **/
    _count?: true | CaseReminderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseReminderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseReminderMaxAggregateInputType
  }

  export type GetCaseReminderAggregateType<T extends CaseReminderAggregateArgs> = {
        [P in keyof T & keyof AggregateCaseReminder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaseReminder[P]>
      : GetScalarType<T[P], AggregateCaseReminder[P]>
  }




  export type CaseReminderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseReminderWhereInput
    orderBy?: CaseReminderOrderByWithAggregationInput | CaseReminderOrderByWithAggregationInput[]
    by: CaseReminderScalarFieldEnum[] | CaseReminderScalarFieldEnum
    having?: CaseReminderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseReminderCountAggregateInputType | true
    _min?: CaseReminderMinAggregateInputType
    _max?: CaseReminderMaxAggregateInputType
  }

  export type CaseReminderGroupByOutputType = {
    id: string
    caseId: string
    reminderDate: Date
    description: string
    createdAt: Date
    updatedAt: Date
    _count: CaseReminderCountAggregateOutputType | null
    _min: CaseReminderMinAggregateOutputType | null
    _max: CaseReminderMaxAggregateOutputType | null
  }

  type GetCaseReminderGroupByPayload<T extends CaseReminderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseReminderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseReminderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseReminderGroupByOutputType[P]>
            : GetScalarType<T[P], CaseReminderGroupByOutputType[P]>
        }
      >
    >


  export type CaseReminderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    reminderDate?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseReminder"]>

  export type CaseReminderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    reminderDate?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseReminder"]>

  export type CaseReminderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    reminderDate?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseReminder"]>

  export type CaseReminderSelectScalar = {
    id?: boolean
    caseId?: boolean
    reminderDate?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CaseReminderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "caseId" | "reminderDate" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["caseReminder"]>
  export type CaseReminderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }
  export type CaseReminderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }
  export type CaseReminderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }

  export type $CaseReminderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CaseReminder"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      caseId: string
      reminderDate: Date
      description: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["caseReminder"]>
    composites: {}
  }

  type CaseReminderGetPayload<S extends boolean | null | undefined | CaseReminderDefaultArgs> = $Result.GetResult<Prisma.$CaseReminderPayload, S>

  type CaseReminderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CaseReminderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CaseReminderCountAggregateInputType | true
    }

  export interface CaseReminderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CaseReminder'], meta: { name: 'CaseReminder' } }
    /**
     * Find zero or one CaseReminder that matches the filter.
     * @param {CaseReminderFindUniqueArgs} args - Arguments to find a CaseReminder
     * @example
     * // Get one CaseReminder
     * const caseReminder = await prisma.caseReminder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseReminderFindUniqueArgs>(args: SelectSubset<T, CaseReminderFindUniqueArgs<ExtArgs>>): Prisma__CaseReminderClient<$Result.GetResult<Prisma.$CaseReminderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CaseReminder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CaseReminderFindUniqueOrThrowArgs} args - Arguments to find a CaseReminder
     * @example
     * // Get one CaseReminder
     * const caseReminder = await prisma.caseReminder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseReminderFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseReminderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseReminderClient<$Result.GetResult<Prisma.$CaseReminderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CaseReminder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseReminderFindFirstArgs} args - Arguments to find a CaseReminder
     * @example
     * // Get one CaseReminder
     * const caseReminder = await prisma.caseReminder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseReminderFindFirstArgs>(args?: SelectSubset<T, CaseReminderFindFirstArgs<ExtArgs>>): Prisma__CaseReminderClient<$Result.GetResult<Prisma.$CaseReminderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CaseReminder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseReminderFindFirstOrThrowArgs} args - Arguments to find a CaseReminder
     * @example
     * // Get one CaseReminder
     * const caseReminder = await prisma.caseReminder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseReminderFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseReminderFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseReminderClient<$Result.GetResult<Prisma.$CaseReminderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CaseReminders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseReminderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CaseReminders
     * const caseReminders = await prisma.caseReminder.findMany()
     * 
     * // Get first 10 CaseReminders
     * const caseReminders = await prisma.caseReminder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseReminderWithIdOnly = await prisma.caseReminder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseReminderFindManyArgs>(args?: SelectSubset<T, CaseReminderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseReminderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CaseReminder.
     * @param {CaseReminderCreateArgs} args - Arguments to create a CaseReminder.
     * @example
     * // Create one CaseReminder
     * const CaseReminder = await prisma.caseReminder.create({
     *   data: {
     *     // ... data to create a CaseReminder
     *   }
     * })
     * 
     */
    create<T extends CaseReminderCreateArgs>(args: SelectSubset<T, CaseReminderCreateArgs<ExtArgs>>): Prisma__CaseReminderClient<$Result.GetResult<Prisma.$CaseReminderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CaseReminders.
     * @param {CaseReminderCreateManyArgs} args - Arguments to create many CaseReminders.
     * @example
     * // Create many CaseReminders
     * const caseReminder = await prisma.caseReminder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseReminderCreateManyArgs>(args?: SelectSubset<T, CaseReminderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CaseReminders and returns the data saved in the database.
     * @param {CaseReminderCreateManyAndReturnArgs} args - Arguments to create many CaseReminders.
     * @example
     * // Create many CaseReminders
     * const caseReminder = await prisma.caseReminder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CaseReminders and only return the `id`
     * const caseReminderWithIdOnly = await prisma.caseReminder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseReminderCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseReminderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseReminderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CaseReminder.
     * @param {CaseReminderDeleteArgs} args - Arguments to delete one CaseReminder.
     * @example
     * // Delete one CaseReminder
     * const CaseReminder = await prisma.caseReminder.delete({
     *   where: {
     *     // ... filter to delete one CaseReminder
     *   }
     * })
     * 
     */
    delete<T extends CaseReminderDeleteArgs>(args: SelectSubset<T, CaseReminderDeleteArgs<ExtArgs>>): Prisma__CaseReminderClient<$Result.GetResult<Prisma.$CaseReminderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CaseReminder.
     * @param {CaseReminderUpdateArgs} args - Arguments to update one CaseReminder.
     * @example
     * // Update one CaseReminder
     * const caseReminder = await prisma.caseReminder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseReminderUpdateArgs>(args: SelectSubset<T, CaseReminderUpdateArgs<ExtArgs>>): Prisma__CaseReminderClient<$Result.GetResult<Prisma.$CaseReminderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CaseReminders.
     * @param {CaseReminderDeleteManyArgs} args - Arguments to filter CaseReminders to delete.
     * @example
     * // Delete a few CaseReminders
     * const { count } = await prisma.caseReminder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseReminderDeleteManyArgs>(args?: SelectSubset<T, CaseReminderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseReminders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseReminderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CaseReminders
     * const caseReminder = await prisma.caseReminder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseReminderUpdateManyArgs>(args: SelectSubset<T, CaseReminderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseReminders and returns the data updated in the database.
     * @param {CaseReminderUpdateManyAndReturnArgs} args - Arguments to update many CaseReminders.
     * @example
     * // Update many CaseReminders
     * const caseReminder = await prisma.caseReminder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CaseReminders and only return the `id`
     * const caseReminderWithIdOnly = await prisma.caseReminder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CaseReminderUpdateManyAndReturnArgs>(args: SelectSubset<T, CaseReminderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseReminderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CaseReminder.
     * @param {CaseReminderUpsertArgs} args - Arguments to update or create a CaseReminder.
     * @example
     * // Update or create a CaseReminder
     * const caseReminder = await prisma.caseReminder.upsert({
     *   create: {
     *     // ... data to create a CaseReminder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CaseReminder we want to update
     *   }
     * })
     */
    upsert<T extends CaseReminderUpsertArgs>(args: SelectSubset<T, CaseReminderUpsertArgs<ExtArgs>>): Prisma__CaseReminderClient<$Result.GetResult<Prisma.$CaseReminderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CaseReminders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseReminderCountArgs} args - Arguments to filter CaseReminders to count.
     * @example
     * // Count the number of CaseReminders
     * const count = await prisma.caseReminder.count({
     *   where: {
     *     // ... the filter for the CaseReminders we want to count
     *   }
     * })
    **/
    count<T extends CaseReminderCountArgs>(
      args?: Subset<T, CaseReminderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseReminderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CaseReminder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseReminderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseReminderAggregateArgs>(args: Subset<T, CaseReminderAggregateArgs>): Prisma.PrismaPromise<GetCaseReminderAggregateType<T>>

    /**
     * Group by CaseReminder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseReminderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseReminderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseReminderGroupByArgs['orderBy'] }
        : { orderBy?: CaseReminderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseReminderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseReminderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CaseReminder model
   */
  readonly fields: CaseReminderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CaseReminder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseReminderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CaseReminder model
   */
  interface CaseReminderFieldRefs {
    readonly id: FieldRef<"CaseReminder", 'String'>
    readonly caseId: FieldRef<"CaseReminder", 'String'>
    readonly reminderDate: FieldRef<"CaseReminder", 'DateTime'>
    readonly description: FieldRef<"CaseReminder", 'String'>
    readonly createdAt: FieldRef<"CaseReminder", 'DateTime'>
    readonly updatedAt: FieldRef<"CaseReminder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CaseReminder findUnique
   */
  export type CaseReminderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseReminder
     */
    select?: CaseReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseReminder
     */
    omit?: CaseReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseReminderInclude<ExtArgs> | null
    /**
     * Filter, which CaseReminder to fetch.
     */
    where: CaseReminderWhereUniqueInput
  }

  /**
   * CaseReminder findUniqueOrThrow
   */
  export type CaseReminderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseReminder
     */
    select?: CaseReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseReminder
     */
    omit?: CaseReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseReminderInclude<ExtArgs> | null
    /**
     * Filter, which CaseReminder to fetch.
     */
    where: CaseReminderWhereUniqueInput
  }

  /**
   * CaseReminder findFirst
   */
  export type CaseReminderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseReminder
     */
    select?: CaseReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseReminder
     */
    omit?: CaseReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseReminderInclude<ExtArgs> | null
    /**
     * Filter, which CaseReminder to fetch.
     */
    where?: CaseReminderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseReminders to fetch.
     */
    orderBy?: CaseReminderOrderByWithRelationInput | CaseReminderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseReminders.
     */
    cursor?: CaseReminderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseReminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseReminders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseReminders.
     */
    distinct?: CaseReminderScalarFieldEnum | CaseReminderScalarFieldEnum[]
  }

  /**
   * CaseReminder findFirstOrThrow
   */
  export type CaseReminderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseReminder
     */
    select?: CaseReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseReminder
     */
    omit?: CaseReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseReminderInclude<ExtArgs> | null
    /**
     * Filter, which CaseReminder to fetch.
     */
    where?: CaseReminderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseReminders to fetch.
     */
    orderBy?: CaseReminderOrderByWithRelationInput | CaseReminderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseReminders.
     */
    cursor?: CaseReminderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseReminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseReminders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseReminders.
     */
    distinct?: CaseReminderScalarFieldEnum | CaseReminderScalarFieldEnum[]
  }

  /**
   * CaseReminder findMany
   */
  export type CaseReminderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseReminder
     */
    select?: CaseReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseReminder
     */
    omit?: CaseReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseReminderInclude<ExtArgs> | null
    /**
     * Filter, which CaseReminders to fetch.
     */
    where?: CaseReminderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseReminders to fetch.
     */
    orderBy?: CaseReminderOrderByWithRelationInput | CaseReminderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CaseReminders.
     */
    cursor?: CaseReminderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseReminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseReminders.
     */
    skip?: number
    distinct?: CaseReminderScalarFieldEnum | CaseReminderScalarFieldEnum[]
  }

  /**
   * CaseReminder create
   */
  export type CaseReminderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseReminder
     */
    select?: CaseReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseReminder
     */
    omit?: CaseReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseReminderInclude<ExtArgs> | null
    /**
     * The data needed to create a CaseReminder.
     */
    data: XOR<CaseReminderCreateInput, CaseReminderUncheckedCreateInput>
  }

  /**
   * CaseReminder createMany
   */
  export type CaseReminderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CaseReminders.
     */
    data: CaseReminderCreateManyInput | CaseReminderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaseReminder createManyAndReturn
   */
  export type CaseReminderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseReminder
     */
    select?: CaseReminderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CaseReminder
     */
    omit?: CaseReminderOmit<ExtArgs> | null
    /**
     * The data used to create many CaseReminders.
     */
    data: CaseReminderCreateManyInput | CaseReminderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseReminderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseReminder update
   */
  export type CaseReminderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseReminder
     */
    select?: CaseReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseReminder
     */
    omit?: CaseReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseReminderInclude<ExtArgs> | null
    /**
     * The data needed to update a CaseReminder.
     */
    data: XOR<CaseReminderUpdateInput, CaseReminderUncheckedUpdateInput>
    /**
     * Choose, which CaseReminder to update.
     */
    where: CaseReminderWhereUniqueInput
  }

  /**
   * CaseReminder updateMany
   */
  export type CaseReminderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CaseReminders.
     */
    data: XOR<CaseReminderUpdateManyMutationInput, CaseReminderUncheckedUpdateManyInput>
    /**
     * Filter which CaseReminders to update
     */
    where?: CaseReminderWhereInput
    /**
     * Limit how many CaseReminders to update.
     */
    limit?: number
  }

  /**
   * CaseReminder updateManyAndReturn
   */
  export type CaseReminderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseReminder
     */
    select?: CaseReminderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CaseReminder
     */
    omit?: CaseReminderOmit<ExtArgs> | null
    /**
     * The data used to update CaseReminders.
     */
    data: XOR<CaseReminderUpdateManyMutationInput, CaseReminderUncheckedUpdateManyInput>
    /**
     * Filter which CaseReminders to update
     */
    where?: CaseReminderWhereInput
    /**
     * Limit how many CaseReminders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseReminderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseReminder upsert
   */
  export type CaseReminderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseReminder
     */
    select?: CaseReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseReminder
     */
    omit?: CaseReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseReminderInclude<ExtArgs> | null
    /**
     * The filter to search for the CaseReminder to update in case it exists.
     */
    where: CaseReminderWhereUniqueInput
    /**
     * In case the CaseReminder found by the `where` argument doesn't exist, create a new CaseReminder with this data.
     */
    create: XOR<CaseReminderCreateInput, CaseReminderUncheckedCreateInput>
    /**
     * In case the CaseReminder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseReminderUpdateInput, CaseReminderUncheckedUpdateInput>
  }

  /**
   * CaseReminder delete
   */
  export type CaseReminderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseReminder
     */
    select?: CaseReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseReminder
     */
    omit?: CaseReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseReminderInclude<ExtArgs> | null
    /**
     * Filter which CaseReminder to delete.
     */
    where: CaseReminderWhereUniqueInput
  }

  /**
   * CaseReminder deleteMany
   */
  export type CaseReminderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseReminders to delete
     */
    where?: CaseReminderWhereInput
    /**
     * Limit how many CaseReminders to delete.
     */
    limit?: number
  }

  /**
   * CaseReminder without action
   */
  export type CaseReminderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseReminder
     */
    select?: CaseReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseReminder
     */
    omit?: CaseReminderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseReminderInclude<ExtArgs> | null
  }


  /**
   * Model CaseInvoice
   */

  export type AggregateCaseInvoice = {
    _count: CaseInvoiceCountAggregateOutputType | null
    _avg: CaseInvoiceAvgAggregateOutputType | null
    _sum: CaseInvoiceSumAggregateOutputType | null
    _min: CaseInvoiceMinAggregateOutputType | null
    _max: CaseInvoiceMaxAggregateOutputType | null
  }

  export type CaseInvoiceAvgAggregateOutputType = {
    amount: number | null
  }

  export type CaseInvoiceSumAggregateOutputType = {
    amount: number | null
  }

  export type CaseInvoiceMinAggregateOutputType = {
    id: string | null
    caseId: string | null
    amount: number | null
    status: string | null
    dueDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseInvoiceMaxAggregateOutputType = {
    id: string | null
    caseId: string | null
    amount: number | null
    status: string | null
    dueDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseInvoiceCountAggregateOutputType = {
    id: number
    caseId: number
    amount: number
    status: number
    dueDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CaseInvoiceAvgAggregateInputType = {
    amount?: true
  }

  export type CaseInvoiceSumAggregateInputType = {
    amount?: true
  }

  export type CaseInvoiceMinAggregateInputType = {
    id?: true
    caseId?: true
    amount?: true
    status?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseInvoiceMaxAggregateInputType = {
    id?: true
    caseId?: true
    amount?: true
    status?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseInvoiceCountAggregateInputType = {
    id?: true
    caseId?: true
    amount?: true
    status?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CaseInvoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseInvoice to aggregate.
     */
    where?: CaseInvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseInvoices to fetch.
     */
    orderBy?: CaseInvoiceOrderByWithRelationInput | CaseInvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseInvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseInvoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseInvoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CaseInvoices
    **/
    _count?: true | CaseInvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CaseInvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CaseInvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseInvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseInvoiceMaxAggregateInputType
  }

  export type GetCaseInvoiceAggregateType<T extends CaseInvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateCaseInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaseInvoice[P]>
      : GetScalarType<T[P], AggregateCaseInvoice[P]>
  }




  export type CaseInvoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseInvoiceWhereInput
    orderBy?: CaseInvoiceOrderByWithAggregationInput | CaseInvoiceOrderByWithAggregationInput[]
    by: CaseInvoiceScalarFieldEnum[] | CaseInvoiceScalarFieldEnum
    having?: CaseInvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseInvoiceCountAggregateInputType | true
    _avg?: CaseInvoiceAvgAggregateInputType
    _sum?: CaseInvoiceSumAggregateInputType
    _min?: CaseInvoiceMinAggregateInputType
    _max?: CaseInvoiceMaxAggregateInputType
  }

  export type CaseInvoiceGroupByOutputType = {
    id: string
    caseId: string
    amount: number
    status: string
    dueDate: Date
    createdAt: Date
    updatedAt: Date
    _count: CaseInvoiceCountAggregateOutputType | null
    _avg: CaseInvoiceAvgAggregateOutputType | null
    _sum: CaseInvoiceSumAggregateOutputType | null
    _min: CaseInvoiceMinAggregateOutputType | null
    _max: CaseInvoiceMaxAggregateOutputType | null
  }

  type GetCaseInvoiceGroupByPayload<T extends CaseInvoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseInvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseInvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseInvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], CaseInvoiceGroupByOutputType[P]>
        }
      >
    >


  export type CaseInvoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    amount?: boolean
    status?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseInvoice"]>

  export type CaseInvoiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    amount?: boolean
    status?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseInvoice"]>

  export type CaseInvoiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    amount?: boolean
    status?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseInvoice"]>

  export type CaseInvoiceSelectScalar = {
    id?: boolean
    caseId?: boolean
    amount?: boolean
    status?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CaseInvoiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "caseId" | "amount" | "status" | "dueDate" | "createdAt" | "updatedAt", ExtArgs["result"]["caseInvoice"]>
  export type CaseInvoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }
  export type CaseInvoiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }
  export type CaseInvoiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }

  export type $CaseInvoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CaseInvoice"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      caseId: string
      amount: number
      status: string
      dueDate: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["caseInvoice"]>
    composites: {}
  }

  type CaseInvoiceGetPayload<S extends boolean | null | undefined | CaseInvoiceDefaultArgs> = $Result.GetResult<Prisma.$CaseInvoicePayload, S>

  type CaseInvoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CaseInvoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CaseInvoiceCountAggregateInputType | true
    }

  export interface CaseInvoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CaseInvoice'], meta: { name: 'CaseInvoice' } }
    /**
     * Find zero or one CaseInvoice that matches the filter.
     * @param {CaseInvoiceFindUniqueArgs} args - Arguments to find a CaseInvoice
     * @example
     * // Get one CaseInvoice
     * const caseInvoice = await prisma.caseInvoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseInvoiceFindUniqueArgs>(args: SelectSubset<T, CaseInvoiceFindUniqueArgs<ExtArgs>>): Prisma__CaseInvoiceClient<$Result.GetResult<Prisma.$CaseInvoicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CaseInvoice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CaseInvoiceFindUniqueOrThrowArgs} args - Arguments to find a CaseInvoice
     * @example
     * // Get one CaseInvoice
     * const caseInvoice = await prisma.caseInvoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseInvoiceFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseInvoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseInvoiceClient<$Result.GetResult<Prisma.$CaseInvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CaseInvoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseInvoiceFindFirstArgs} args - Arguments to find a CaseInvoice
     * @example
     * // Get one CaseInvoice
     * const caseInvoice = await prisma.caseInvoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseInvoiceFindFirstArgs>(args?: SelectSubset<T, CaseInvoiceFindFirstArgs<ExtArgs>>): Prisma__CaseInvoiceClient<$Result.GetResult<Prisma.$CaseInvoicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CaseInvoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseInvoiceFindFirstOrThrowArgs} args - Arguments to find a CaseInvoice
     * @example
     * // Get one CaseInvoice
     * const caseInvoice = await prisma.caseInvoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseInvoiceFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseInvoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseInvoiceClient<$Result.GetResult<Prisma.$CaseInvoicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CaseInvoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseInvoiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CaseInvoices
     * const caseInvoices = await prisma.caseInvoice.findMany()
     * 
     * // Get first 10 CaseInvoices
     * const caseInvoices = await prisma.caseInvoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseInvoiceWithIdOnly = await prisma.caseInvoice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseInvoiceFindManyArgs>(args?: SelectSubset<T, CaseInvoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseInvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CaseInvoice.
     * @param {CaseInvoiceCreateArgs} args - Arguments to create a CaseInvoice.
     * @example
     * // Create one CaseInvoice
     * const CaseInvoice = await prisma.caseInvoice.create({
     *   data: {
     *     // ... data to create a CaseInvoice
     *   }
     * })
     * 
     */
    create<T extends CaseInvoiceCreateArgs>(args: SelectSubset<T, CaseInvoiceCreateArgs<ExtArgs>>): Prisma__CaseInvoiceClient<$Result.GetResult<Prisma.$CaseInvoicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CaseInvoices.
     * @param {CaseInvoiceCreateManyArgs} args - Arguments to create many CaseInvoices.
     * @example
     * // Create many CaseInvoices
     * const caseInvoice = await prisma.caseInvoice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseInvoiceCreateManyArgs>(args?: SelectSubset<T, CaseInvoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CaseInvoices and returns the data saved in the database.
     * @param {CaseInvoiceCreateManyAndReturnArgs} args - Arguments to create many CaseInvoices.
     * @example
     * // Create many CaseInvoices
     * const caseInvoice = await prisma.caseInvoice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CaseInvoices and only return the `id`
     * const caseInvoiceWithIdOnly = await prisma.caseInvoice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseInvoiceCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseInvoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseInvoicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CaseInvoice.
     * @param {CaseInvoiceDeleteArgs} args - Arguments to delete one CaseInvoice.
     * @example
     * // Delete one CaseInvoice
     * const CaseInvoice = await prisma.caseInvoice.delete({
     *   where: {
     *     // ... filter to delete one CaseInvoice
     *   }
     * })
     * 
     */
    delete<T extends CaseInvoiceDeleteArgs>(args: SelectSubset<T, CaseInvoiceDeleteArgs<ExtArgs>>): Prisma__CaseInvoiceClient<$Result.GetResult<Prisma.$CaseInvoicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CaseInvoice.
     * @param {CaseInvoiceUpdateArgs} args - Arguments to update one CaseInvoice.
     * @example
     * // Update one CaseInvoice
     * const caseInvoice = await prisma.caseInvoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseInvoiceUpdateArgs>(args: SelectSubset<T, CaseInvoiceUpdateArgs<ExtArgs>>): Prisma__CaseInvoiceClient<$Result.GetResult<Prisma.$CaseInvoicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CaseInvoices.
     * @param {CaseInvoiceDeleteManyArgs} args - Arguments to filter CaseInvoices to delete.
     * @example
     * // Delete a few CaseInvoices
     * const { count } = await prisma.caseInvoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseInvoiceDeleteManyArgs>(args?: SelectSubset<T, CaseInvoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseInvoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseInvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CaseInvoices
     * const caseInvoice = await prisma.caseInvoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseInvoiceUpdateManyArgs>(args: SelectSubset<T, CaseInvoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseInvoices and returns the data updated in the database.
     * @param {CaseInvoiceUpdateManyAndReturnArgs} args - Arguments to update many CaseInvoices.
     * @example
     * // Update many CaseInvoices
     * const caseInvoice = await prisma.caseInvoice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CaseInvoices and only return the `id`
     * const caseInvoiceWithIdOnly = await prisma.caseInvoice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CaseInvoiceUpdateManyAndReturnArgs>(args: SelectSubset<T, CaseInvoiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseInvoicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CaseInvoice.
     * @param {CaseInvoiceUpsertArgs} args - Arguments to update or create a CaseInvoice.
     * @example
     * // Update or create a CaseInvoice
     * const caseInvoice = await prisma.caseInvoice.upsert({
     *   create: {
     *     // ... data to create a CaseInvoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CaseInvoice we want to update
     *   }
     * })
     */
    upsert<T extends CaseInvoiceUpsertArgs>(args: SelectSubset<T, CaseInvoiceUpsertArgs<ExtArgs>>): Prisma__CaseInvoiceClient<$Result.GetResult<Prisma.$CaseInvoicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CaseInvoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseInvoiceCountArgs} args - Arguments to filter CaseInvoices to count.
     * @example
     * // Count the number of CaseInvoices
     * const count = await prisma.caseInvoice.count({
     *   where: {
     *     // ... the filter for the CaseInvoices we want to count
     *   }
     * })
    **/
    count<T extends CaseInvoiceCountArgs>(
      args?: Subset<T, CaseInvoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseInvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CaseInvoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseInvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseInvoiceAggregateArgs>(args: Subset<T, CaseInvoiceAggregateArgs>): Prisma.PrismaPromise<GetCaseInvoiceAggregateType<T>>

    /**
     * Group by CaseInvoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseInvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseInvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseInvoiceGroupByArgs['orderBy'] }
        : { orderBy?: CaseInvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseInvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseInvoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CaseInvoice model
   */
  readonly fields: CaseInvoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CaseInvoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseInvoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CaseInvoice model
   */
  interface CaseInvoiceFieldRefs {
    readonly id: FieldRef<"CaseInvoice", 'String'>
    readonly caseId: FieldRef<"CaseInvoice", 'String'>
    readonly amount: FieldRef<"CaseInvoice", 'Float'>
    readonly status: FieldRef<"CaseInvoice", 'String'>
    readonly dueDate: FieldRef<"CaseInvoice", 'DateTime'>
    readonly createdAt: FieldRef<"CaseInvoice", 'DateTime'>
    readonly updatedAt: FieldRef<"CaseInvoice", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CaseInvoice findUnique
   */
  export type CaseInvoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseInvoice
     */
    select?: CaseInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseInvoice
     */
    omit?: CaseInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which CaseInvoice to fetch.
     */
    where: CaseInvoiceWhereUniqueInput
  }

  /**
   * CaseInvoice findUniqueOrThrow
   */
  export type CaseInvoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseInvoice
     */
    select?: CaseInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseInvoice
     */
    omit?: CaseInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which CaseInvoice to fetch.
     */
    where: CaseInvoiceWhereUniqueInput
  }

  /**
   * CaseInvoice findFirst
   */
  export type CaseInvoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseInvoice
     */
    select?: CaseInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseInvoice
     */
    omit?: CaseInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which CaseInvoice to fetch.
     */
    where?: CaseInvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseInvoices to fetch.
     */
    orderBy?: CaseInvoiceOrderByWithRelationInput | CaseInvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseInvoices.
     */
    cursor?: CaseInvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseInvoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseInvoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseInvoices.
     */
    distinct?: CaseInvoiceScalarFieldEnum | CaseInvoiceScalarFieldEnum[]
  }

  /**
   * CaseInvoice findFirstOrThrow
   */
  export type CaseInvoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseInvoice
     */
    select?: CaseInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseInvoice
     */
    omit?: CaseInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which CaseInvoice to fetch.
     */
    where?: CaseInvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseInvoices to fetch.
     */
    orderBy?: CaseInvoiceOrderByWithRelationInput | CaseInvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseInvoices.
     */
    cursor?: CaseInvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseInvoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseInvoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseInvoices.
     */
    distinct?: CaseInvoiceScalarFieldEnum | CaseInvoiceScalarFieldEnum[]
  }

  /**
   * CaseInvoice findMany
   */
  export type CaseInvoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseInvoice
     */
    select?: CaseInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseInvoice
     */
    omit?: CaseInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which CaseInvoices to fetch.
     */
    where?: CaseInvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseInvoices to fetch.
     */
    orderBy?: CaseInvoiceOrderByWithRelationInput | CaseInvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CaseInvoices.
     */
    cursor?: CaseInvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseInvoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseInvoices.
     */
    skip?: number
    distinct?: CaseInvoiceScalarFieldEnum | CaseInvoiceScalarFieldEnum[]
  }

  /**
   * CaseInvoice create
   */
  export type CaseInvoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseInvoice
     */
    select?: CaseInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseInvoice
     */
    omit?: CaseInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInvoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a CaseInvoice.
     */
    data: XOR<CaseInvoiceCreateInput, CaseInvoiceUncheckedCreateInput>
  }

  /**
   * CaseInvoice createMany
   */
  export type CaseInvoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CaseInvoices.
     */
    data: CaseInvoiceCreateManyInput | CaseInvoiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaseInvoice createManyAndReturn
   */
  export type CaseInvoiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseInvoice
     */
    select?: CaseInvoiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CaseInvoice
     */
    omit?: CaseInvoiceOmit<ExtArgs> | null
    /**
     * The data used to create many CaseInvoices.
     */
    data: CaseInvoiceCreateManyInput | CaseInvoiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInvoiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseInvoice update
   */
  export type CaseInvoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseInvoice
     */
    select?: CaseInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseInvoice
     */
    omit?: CaseInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInvoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a CaseInvoice.
     */
    data: XOR<CaseInvoiceUpdateInput, CaseInvoiceUncheckedUpdateInput>
    /**
     * Choose, which CaseInvoice to update.
     */
    where: CaseInvoiceWhereUniqueInput
  }

  /**
   * CaseInvoice updateMany
   */
  export type CaseInvoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CaseInvoices.
     */
    data: XOR<CaseInvoiceUpdateManyMutationInput, CaseInvoiceUncheckedUpdateManyInput>
    /**
     * Filter which CaseInvoices to update
     */
    where?: CaseInvoiceWhereInput
    /**
     * Limit how many CaseInvoices to update.
     */
    limit?: number
  }

  /**
   * CaseInvoice updateManyAndReturn
   */
  export type CaseInvoiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseInvoice
     */
    select?: CaseInvoiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CaseInvoice
     */
    omit?: CaseInvoiceOmit<ExtArgs> | null
    /**
     * The data used to update CaseInvoices.
     */
    data: XOR<CaseInvoiceUpdateManyMutationInput, CaseInvoiceUncheckedUpdateManyInput>
    /**
     * Filter which CaseInvoices to update
     */
    where?: CaseInvoiceWhereInput
    /**
     * Limit how many CaseInvoices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInvoiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseInvoice upsert
   */
  export type CaseInvoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseInvoice
     */
    select?: CaseInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseInvoice
     */
    omit?: CaseInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInvoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the CaseInvoice to update in case it exists.
     */
    where: CaseInvoiceWhereUniqueInput
    /**
     * In case the CaseInvoice found by the `where` argument doesn't exist, create a new CaseInvoice with this data.
     */
    create: XOR<CaseInvoiceCreateInput, CaseInvoiceUncheckedCreateInput>
    /**
     * In case the CaseInvoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseInvoiceUpdateInput, CaseInvoiceUncheckedUpdateInput>
  }

  /**
   * CaseInvoice delete
   */
  export type CaseInvoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseInvoice
     */
    select?: CaseInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseInvoice
     */
    omit?: CaseInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInvoiceInclude<ExtArgs> | null
    /**
     * Filter which CaseInvoice to delete.
     */
    where: CaseInvoiceWhereUniqueInput
  }

  /**
   * CaseInvoice deleteMany
   */
  export type CaseInvoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseInvoices to delete
     */
    where?: CaseInvoiceWhereInput
    /**
     * Limit how many CaseInvoices to delete.
     */
    limit?: number
  }

  /**
   * CaseInvoice without action
   */
  export type CaseInvoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseInvoice
     */
    select?: CaseInvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseInvoice
     */
    omit?: CaseInvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInvoiceInclude<ExtArgs> | null
  }


  /**
   * Model CaseBilling
   */

  export type AggregateCaseBilling = {
    _count: CaseBillingCountAggregateOutputType | null
    _avg: CaseBillingAvgAggregateOutputType | null
    _sum: CaseBillingSumAggregateOutputType | null
    _min: CaseBillingMinAggregateOutputType | null
    _max: CaseBillingMaxAggregateOutputType | null
  }

  export type CaseBillingAvgAggregateOutputType = {
    amount: number | null
  }

  export type CaseBillingSumAggregateOutputType = {
    amount: number | null
  }

  export type CaseBillingMinAggregateOutputType = {
    id: string | null
    caseId: string | null
    amount: number | null
    currency: string | null
    rateType: $Enums.CaseRateType | null
    paymentStatus: $Enums.PaymentStatus | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentDate: Date | null
    billingNote: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseBillingMaxAggregateOutputType = {
    id: string | null
    caseId: string | null
    amount: number | null
    currency: string | null
    rateType: $Enums.CaseRateType | null
    paymentStatus: $Enums.PaymentStatus | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentDate: Date | null
    billingNote: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseBillingCountAggregateOutputType = {
    id: number
    caseId: number
    amount: number
    currency: number
    rateType: number
    paymentStatus: number
    paymentMethod: number
    paymentDate: number
    billingNote: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CaseBillingAvgAggregateInputType = {
    amount?: true
  }

  export type CaseBillingSumAggregateInputType = {
    amount?: true
  }

  export type CaseBillingMinAggregateInputType = {
    id?: true
    caseId?: true
    amount?: true
    currency?: true
    rateType?: true
    paymentStatus?: true
    paymentMethod?: true
    paymentDate?: true
    billingNote?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseBillingMaxAggregateInputType = {
    id?: true
    caseId?: true
    amount?: true
    currency?: true
    rateType?: true
    paymentStatus?: true
    paymentMethod?: true
    paymentDate?: true
    billingNote?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseBillingCountAggregateInputType = {
    id?: true
    caseId?: true
    amount?: true
    currency?: true
    rateType?: true
    paymentStatus?: true
    paymentMethod?: true
    paymentDate?: true
    billingNote?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CaseBillingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseBilling to aggregate.
     */
    where?: CaseBillingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseBillings to fetch.
     */
    orderBy?: CaseBillingOrderByWithRelationInput | CaseBillingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseBillingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseBillings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseBillings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CaseBillings
    **/
    _count?: true | CaseBillingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CaseBillingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CaseBillingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseBillingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseBillingMaxAggregateInputType
  }

  export type GetCaseBillingAggregateType<T extends CaseBillingAggregateArgs> = {
        [P in keyof T & keyof AggregateCaseBilling]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaseBilling[P]>
      : GetScalarType<T[P], AggregateCaseBilling[P]>
  }




  export type CaseBillingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseBillingWhereInput
    orderBy?: CaseBillingOrderByWithAggregationInput | CaseBillingOrderByWithAggregationInput[]
    by: CaseBillingScalarFieldEnum[] | CaseBillingScalarFieldEnum
    having?: CaseBillingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseBillingCountAggregateInputType | true
    _avg?: CaseBillingAvgAggregateInputType
    _sum?: CaseBillingSumAggregateInputType
    _min?: CaseBillingMinAggregateInputType
    _max?: CaseBillingMaxAggregateInputType
  }

  export type CaseBillingGroupByOutputType = {
    id: string
    caseId: string
    amount: number
    currency: string
    rateType: $Enums.CaseRateType
    paymentStatus: $Enums.PaymentStatus
    paymentMethod: $Enums.PaymentMethod
    paymentDate: Date | null
    billingNote: string | null
    createdAt: Date
    updatedAt: Date
    _count: CaseBillingCountAggregateOutputType | null
    _avg: CaseBillingAvgAggregateOutputType | null
    _sum: CaseBillingSumAggregateOutputType | null
    _min: CaseBillingMinAggregateOutputType | null
    _max: CaseBillingMaxAggregateOutputType | null
  }

  type GetCaseBillingGroupByPayload<T extends CaseBillingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseBillingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseBillingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseBillingGroupByOutputType[P]>
            : GetScalarType<T[P], CaseBillingGroupByOutputType[P]>
        }
      >
    >


  export type CaseBillingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    amount?: boolean
    currency?: boolean
    rateType?: boolean
    paymentStatus?: boolean
    paymentMethod?: boolean
    paymentDate?: boolean
    billingNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseBilling"]>

  export type CaseBillingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    amount?: boolean
    currency?: boolean
    rateType?: boolean
    paymentStatus?: boolean
    paymentMethod?: boolean
    paymentDate?: boolean
    billingNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseBilling"]>

  export type CaseBillingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    amount?: boolean
    currency?: boolean
    rateType?: boolean
    paymentStatus?: boolean
    paymentMethod?: boolean
    paymentDate?: boolean
    billingNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseBilling"]>

  export type CaseBillingSelectScalar = {
    id?: boolean
    caseId?: boolean
    amount?: boolean
    currency?: boolean
    rateType?: boolean
    paymentStatus?: boolean
    paymentMethod?: boolean
    paymentDate?: boolean
    billingNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CaseBillingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "caseId" | "amount" | "currency" | "rateType" | "paymentStatus" | "paymentMethod" | "paymentDate" | "billingNote" | "createdAt" | "updatedAt", ExtArgs["result"]["caseBilling"]>
  export type CaseBillingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }
  export type CaseBillingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }
  export type CaseBillingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }

  export type $CaseBillingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CaseBilling"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      caseId: string
      amount: number
      currency: string
      rateType: $Enums.CaseRateType
      paymentStatus: $Enums.PaymentStatus
      paymentMethod: $Enums.PaymentMethod
      paymentDate: Date | null
      billingNote: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["caseBilling"]>
    composites: {}
  }

  type CaseBillingGetPayload<S extends boolean | null | undefined | CaseBillingDefaultArgs> = $Result.GetResult<Prisma.$CaseBillingPayload, S>

  type CaseBillingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CaseBillingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CaseBillingCountAggregateInputType | true
    }

  export interface CaseBillingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CaseBilling'], meta: { name: 'CaseBilling' } }
    /**
     * Find zero or one CaseBilling that matches the filter.
     * @param {CaseBillingFindUniqueArgs} args - Arguments to find a CaseBilling
     * @example
     * // Get one CaseBilling
     * const caseBilling = await prisma.caseBilling.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseBillingFindUniqueArgs>(args: SelectSubset<T, CaseBillingFindUniqueArgs<ExtArgs>>): Prisma__CaseBillingClient<$Result.GetResult<Prisma.$CaseBillingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CaseBilling that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CaseBillingFindUniqueOrThrowArgs} args - Arguments to find a CaseBilling
     * @example
     * // Get one CaseBilling
     * const caseBilling = await prisma.caseBilling.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseBillingFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseBillingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseBillingClient<$Result.GetResult<Prisma.$CaseBillingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CaseBilling that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseBillingFindFirstArgs} args - Arguments to find a CaseBilling
     * @example
     * // Get one CaseBilling
     * const caseBilling = await prisma.caseBilling.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseBillingFindFirstArgs>(args?: SelectSubset<T, CaseBillingFindFirstArgs<ExtArgs>>): Prisma__CaseBillingClient<$Result.GetResult<Prisma.$CaseBillingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CaseBilling that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseBillingFindFirstOrThrowArgs} args - Arguments to find a CaseBilling
     * @example
     * // Get one CaseBilling
     * const caseBilling = await prisma.caseBilling.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseBillingFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseBillingFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseBillingClient<$Result.GetResult<Prisma.$CaseBillingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CaseBillings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseBillingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CaseBillings
     * const caseBillings = await prisma.caseBilling.findMany()
     * 
     * // Get first 10 CaseBillings
     * const caseBillings = await prisma.caseBilling.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseBillingWithIdOnly = await prisma.caseBilling.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseBillingFindManyArgs>(args?: SelectSubset<T, CaseBillingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseBillingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CaseBilling.
     * @param {CaseBillingCreateArgs} args - Arguments to create a CaseBilling.
     * @example
     * // Create one CaseBilling
     * const CaseBilling = await prisma.caseBilling.create({
     *   data: {
     *     // ... data to create a CaseBilling
     *   }
     * })
     * 
     */
    create<T extends CaseBillingCreateArgs>(args: SelectSubset<T, CaseBillingCreateArgs<ExtArgs>>): Prisma__CaseBillingClient<$Result.GetResult<Prisma.$CaseBillingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CaseBillings.
     * @param {CaseBillingCreateManyArgs} args - Arguments to create many CaseBillings.
     * @example
     * // Create many CaseBillings
     * const caseBilling = await prisma.caseBilling.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseBillingCreateManyArgs>(args?: SelectSubset<T, CaseBillingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CaseBillings and returns the data saved in the database.
     * @param {CaseBillingCreateManyAndReturnArgs} args - Arguments to create many CaseBillings.
     * @example
     * // Create many CaseBillings
     * const caseBilling = await prisma.caseBilling.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CaseBillings and only return the `id`
     * const caseBillingWithIdOnly = await prisma.caseBilling.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseBillingCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseBillingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseBillingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CaseBilling.
     * @param {CaseBillingDeleteArgs} args - Arguments to delete one CaseBilling.
     * @example
     * // Delete one CaseBilling
     * const CaseBilling = await prisma.caseBilling.delete({
     *   where: {
     *     // ... filter to delete one CaseBilling
     *   }
     * })
     * 
     */
    delete<T extends CaseBillingDeleteArgs>(args: SelectSubset<T, CaseBillingDeleteArgs<ExtArgs>>): Prisma__CaseBillingClient<$Result.GetResult<Prisma.$CaseBillingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CaseBilling.
     * @param {CaseBillingUpdateArgs} args - Arguments to update one CaseBilling.
     * @example
     * // Update one CaseBilling
     * const caseBilling = await prisma.caseBilling.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseBillingUpdateArgs>(args: SelectSubset<T, CaseBillingUpdateArgs<ExtArgs>>): Prisma__CaseBillingClient<$Result.GetResult<Prisma.$CaseBillingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CaseBillings.
     * @param {CaseBillingDeleteManyArgs} args - Arguments to filter CaseBillings to delete.
     * @example
     * // Delete a few CaseBillings
     * const { count } = await prisma.caseBilling.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseBillingDeleteManyArgs>(args?: SelectSubset<T, CaseBillingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseBillings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseBillingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CaseBillings
     * const caseBilling = await prisma.caseBilling.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseBillingUpdateManyArgs>(args: SelectSubset<T, CaseBillingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseBillings and returns the data updated in the database.
     * @param {CaseBillingUpdateManyAndReturnArgs} args - Arguments to update many CaseBillings.
     * @example
     * // Update many CaseBillings
     * const caseBilling = await prisma.caseBilling.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CaseBillings and only return the `id`
     * const caseBillingWithIdOnly = await prisma.caseBilling.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CaseBillingUpdateManyAndReturnArgs>(args: SelectSubset<T, CaseBillingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseBillingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CaseBilling.
     * @param {CaseBillingUpsertArgs} args - Arguments to update or create a CaseBilling.
     * @example
     * // Update or create a CaseBilling
     * const caseBilling = await prisma.caseBilling.upsert({
     *   create: {
     *     // ... data to create a CaseBilling
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CaseBilling we want to update
     *   }
     * })
     */
    upsert<T extends CaseBillingUpsertArgs>(args: SelectSubset<T, CaseBillingUpsertArgs<ExtArgs>>): Prisma__CaseBillingClient<$Result.GetResult<Prisma.$CaseBillingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CaseBillings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseBillingCountArgs} args - Arguments to filter CaseBillings to count.
     * @example
     * // Count the number of CaseBillings
     * const count = await prisma.caseBilling.count({
     *   where: {
     *     // ... the filter for the CaseBillings we want to count
     *   }
     * })
    **/
    count<T extends CaseBillingCountArgs>(
      args?: Subset<T, CaseBillingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseBillingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CaseBilling.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseBillingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseBillingAggregateArgs>(args: Subset<T, CaseBillingAggregateArgs>): Prisma.PrismaPromise<GetCaseBillingAggregateType<T>>

    /**
     * Group by CaseBilling.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseBillingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseBillingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseBillingGroupByArgs['orderBy'] }
        : { orderBy?: CaseBillingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseBillingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseBillingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CaseBilling model
   */
  readonly fields: CaseBillingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CaseBilling.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseBillingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CaseBilling model
   */
  interface CaseBillingFieldRefs {
    readonly id: FieldRef<"CaseBilling", 'String'>
    readonly caseId: FieldRef<"CaseBilling", 'String'>
    readonly amount: FieldRef<"CaseBilling", 'Float'>
    readonly currency: FieldRef<"CaseBilling", 'String'>
    readonly rateType: FieldRef<"CaseBilling", 'CaseRateType'>
    readonly paymentStatus: FieldRef<"CaseBilling", 'PaymentStatus'>
    readonly paymentMethod: FieldRef<"CaseBilling", 'PaymentMethod'>
    readonly paymentDate: FieldRef<"CaseBilling", 'DateTime'>
    readonly billingNote: FieldRef<"CaseBilling", 'String'>
    readonly createdAt: FieldRef<"CaseBilling", 'DateTime'>
    readonly updatedAt: FieldRef<"CaseBilling", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CaseBilling findUnique
   */
  export type CaseBillingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBilling
     */
    select?: CaseBillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseBilling
     */
    omit?: CaseBillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseBillingInclude<ExtArgs> | null
    /**
     * Filter, which CaseBilling to fetch.
     */
    where: CaseBillingWhereUniqueInput
  }

  /**
   * CaseBilling findUniqueOrThrow
   */
  export type CaseBillingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBilling
     */
    select?: CaseBillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseBilling
     */
    omit?: CaseBillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseBillingInclude<ExtArgs> | null
    /**
     * Filter, which CaseBilling to fetch.
     */
    where: CaseBillingWhereUniqueInput
  }

  /**
   * CaseBilling findFirst
   */
  export type CaseBillingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBilling
     */
    select?: CaseBillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseBilling
     */
    omit?: CaseBillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseBillingInclude<ExtArgs> | null
    /**
     * Filter, which CaseBilling to fetch.
     */
    where?: CaseBillingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseBillings to fetch.
     */
    orderBy?: CaseBillingOrderByWithRelationInput | CaseBillingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseBillings.
     */
    cursor?: CaseBillingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseBillings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseBillings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseBillings.
     */
    distinct?: CaseBillingScalarFieldEnum | CaseBillingScalarFieldEnum[]
  }

  /**
   * CaseBilling findFirstOrThrow
   */
  export type CaseBillingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBilling
     */
    select?: CaseBillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseBilling
     */
    omit?: CaseBillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseBillingInclude<ExtArgs> | null
    /**
     * Filter, which CaseBilling to fetch.
     */
    where?: CaseBillingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseBillings to fetch.
     */
    orderBy?: CaseBillingOrderByWithRelationInput | CaseBillingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseBillings.
     */
    cursor?: CaseBillingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseBillings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseBillings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseBillings.
     */
    distinct?: CaseBillingScalarFieldEnum | CaseBillingScalarFieldEnum[]
  }

  /**
   * CaseBilling findMany
   */
  export type CaseBillingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBilling
     */
    select?: CaseBillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseBilling
     */
    omit?: CaseBillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseBillingInclude<ExtArgs> | null
    /**
     * Filter, which CaseBillings to fetch.
     */
    where?: CaseBillingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseBillings to fetch.
     */
    orderBy?: CaseBillingOrderByWithRelationInput | CaseBillingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CaseBillings.
     */
    cursor?: CaseBillingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseBillings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseBillings.
     */
    skip?: number
    distinct?: CaseBillingScalarFieldEnum | CaseBillingScalarFieldEnum[]
  }

  /**
   * CaseBilling create
   */
  export type CaseBillingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBilling
     */
    select?: CaseBillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseBilling
     */
    omit?: CaseBillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseBillingInclude<ExtArgs> | null
    /**
     * The data needed to create a CaseBilling.
     */
    data: XOR<CaseBillingCreateInput, CaseBillingUncheckedCreateInput>
  }

  /**
   * CaseBilling createMany
   */
  export type CaseBillingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CaseBillings.
     */
    data: CaseBillingCreateManyInput | CaseBillingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaseBilling createManyAndReturn
   */
  export type CaseBillingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBilling
     */
    select?: CaseBillingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CaseBilling
     */
    omit?: CaseBillingOmit<ExtArgs> | null
    /**
     * The data used to create many CaseBillings.
     */
    data: CaseBillingCreateManyInput | CaseBillingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseBillingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseBilling update
   */
  export type CaseBillingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBilling
     */
    select?: CaseBillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseBilling
     */
    omit?: CaseBillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseBillingInclude<ExtArgs> | null
    /**
     * The data needed to update a CaseBilling.
     */
    data: XOR<CaseBillingUpdateInput, CaseBillingUncheckedUpdateInput>
    /**
     * Choose, which CaseBilling to update.
     */
    where: CaseBillingWhereUniqueInput
  }

  /**
   * CaseBilling updateMany
   */
  export type CaseBillingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CaseBillings.
     */
    data: XOR<CaseBillingUpdateManyMutationInput, CaseBillingUncheckedUpdateManyInput>
    /**
     * Filter which CaseBillings to update
     */
    where?: CaseBillingWhereInput
    /**
     * Limit how many CaseBillings to update.
     */
    limit?: number
  }

  /**
   * CaseBilling updateManyAndReturn
   */
  export type CaseBillingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBilling
     */
    select?: CaseBillingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CaseBilling
     */
    omit?: CaseBillingOmit<ExtArgs> | null
    /**
     * The data used to update CaseBillings.
     */
    data: XOR<CaseBillingUpdateManyMutationInput, CaseBillingUncheckedUpdateManyInput>
    /**
     * Filter which CaseBillings to update
     */
    where?: CaseBillingWhereInput
    /**
     * Limit how many CaseBillings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseBillingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseBilling upsert
   */
  export type CaseBillingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBilling
     */
    select?: CaseBillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseBilling
     */
    omit?: CaseBillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseBillingInclude<ExtArgs> | null
    /**
     * The filter to search for the CaseBilling to update in case it exists.
     */
    where: CaseBillingWhereUniqueInput
    /**
     * In case the CaseBilling found by the `where` argument doesn't exist, create a new CaseBilling with this data.
     */
    create: XOR<CaseBillingCreateInput, CaseBillingUncheckedCreateInput>
    /**
     * In case the CaseBilling was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseBillingUpdateInput, CaseBillingUncheckedUpdateInput>
  }

  /**
   * CaseBilling delete
   */
  export type CaseBillingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBilling
     */
    select?: CaseBillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseBilling
     */
    omit?: CaseBillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseBillingInclude<ExtArgs> | null
    /**
     * Filter which CaseBilling to delete.
     */
    where: CaseBillingWhereUniqueInput
  }

  /**
   * CaseBilling deleteMany
   */
  export type CaseBillingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseBillings to delete
     */
    where?: CaseBillingWhereInput
    /**
     * Limit how many CaseBillings to delete.
     */
    limit?: number
  }

  /**
   * CaseBilling without action
   */
  export type CaseBillingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBilling
     */
    select?: CaseBillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseBilling
     */
    omit?: CaseBillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseBillingInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentMinAggregateOutputType = {
    id: string | null
    title: string | null
    initialContent: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: string | null
    title: string | null
    initialContent: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    title: number
    initialContent: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type DocumentMinAggregateInputType = {
    id?: true
    title?: true
    initialContent?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    title?: true
    initialContent?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    title?: true
    initialContent?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: string
    title: string | null
    initialContent: string | null
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    initialContent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    initialContent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    initialContent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    title?: boolean
    initialContent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type DocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "initialContent" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["document"]>
  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string | null
      initialContent: string | null
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents and returns the data updated in the database.
     * @param {DocumentUpdateManyAndReturnArgs} args - Arguments to update many Documents.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'String'>
    readonly title: FieldRef<"Document", 'String'>
    readonly initialContent: FieldRef<"Document", 'String'>
    readonly createdAt: FieldRef<"Document", 'DateTime'>
    readonly updatedAt: FieldRef<"Document", 'DateTime'>
    readonly userId: FieldRef<"Document", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
  }

  /**
   * Document updateManyAndReturn
   */
  export type DocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to delete.
     */
    limit?: number
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    userName: 'userName',
    email: 'email',
    userProfile: 'userProfile',
    password: 'password',
    phoneNumber: 'phoneNumber',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    role: 'role',
    chatToken: 'chatToken'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    id: 'id',
    zip: 'zip',
    city: 'city',
    state: 'state',
    country: 'country',
    userId: 'userId',
    createdAt: 'createdAt',
    opponentId: 'opponentId'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionKey: 'sessionKey',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const TeamAdminScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    role: 'role',
    isVerified: 'isVerified',
    createdAt: 'createdAt'
  };

  export type TeamAdminScalarFieldEnum = (typeof TeamAdminScalarFieldEnum)[keyof typeof TeamAdminScalarFieldEnum]


  export const TeamMemberScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    role: 'role',
    createdAt: 'createdAt'
  };

  export type TeamMemberScalarFieldEnum = (typeof TeamMemberScalarFieldEnum)[keyof typeof TeamMemberScalarFieldEnum]


  export const OpponentScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    jobTitle: 'jobTitle',
    email: 'email',
    phoneNumber: 'phoneNumber',
    zip: 'zip',
    city: 'city',
    state: 'state',
    country: 'country'
  };

  export type OpponentScalarFieldEnum = (typeof OpponentScalarFieldEnum)[keyof typeof OpponentScalarFieldEnum]


  export const TeamClientScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    role: 'role',
    createdAt: 'createdAt'
  };

  export type TeamClientScalarFieldEnum = (typeof TeamClientScalarFieldEnum)[keyof typeof TeamClientScalarFieldEnum]


  export const CaseTagScalarFieldEnum: {
    id: 'id',
    label: 'label',
    caseId: 'caseId'
  };

  export type CaseTagScalarFieldEnum = (typeof CaseTagScalarFieldEnum)[keyof typeof CaseTagScalarFieldEnum]


  export const TeamMembershipScalarFieldEnum: {
    id: 'id',
    teamMemberId: 'teamMemberId',
    caseId: 'caseId',
    joinedAt: 'joinedAt'
  };

  export type TeamMembershipScalarFieldEnum = (typeof TeamMembershipScalarFieldEnum)[keyof typeof TeamMembershipScalarFieldEnum]


  export const ToDoListScalarFieldEnum: {
    id: 'id',
    task: 'task',
    userId: 'userId',
    isTaskChecked: 'isTaskChecked',
    taskForDate: 'taskForDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ToDoListScalarFieldEnum = (typeof ToDoListScalarFieldEnum)[keyof typeof ToDoListScalarFieldEnum]


  export const CaseScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    practiseArea: 'practiseArea',
    arrivalDate: 'arrivalDate',
    status: 'status',
    matterPriority: 'matterPriority',
    internalRefNumber: 'internalRefNumber',
    filedDate: 'filedDate',
    closedDate: 'closedDate',
    estimatedCloseDate: 'estimatedCloseDate',
    stage: 'stage',
    clientId: 'clientId',
    adminId: 'adminId',
    opponentId: 'opponentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CaseScalarFieldEnum = (typeof CaseScalarFieldEnum)[keyof typeof CaseScalarFieldEnum]


  export const CaseNoteScalarFieldEnum: {
    id: 'id',
    note: 'note',
    caseId: 'caseId',
    createdAt: 'createdAt'
  };

  export type CaseNoteScalarFieldEnum = (typeof CaseNoteScalarFieldEnum)[keyof typeof CaseNoteScalarFieldEnum]


  export const CaseDocumentScalarFieldEnum: {
    id: 'id',
    caseId: 'caseId',
    documentUrl: 'documentUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CaseDocumentScalarFieldEnum = (typeof CaseDocumentScalarFieldEnum)[keyof typeof CaseDocumentScalarFieldEnum]


  export const CaseReminderScalarFieldEnum: {
    id: 'id',
    caseId: 'caseId',
    reminderDate: 'reminderDate',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CaseReminderScalarFieldEnum = (typeof CaseReminderScalarFieldEnum)[keyof typeof CaseReminderScalarFieldEnum]


  export const CaseInvoiceScalarFieldEnum: {
    id: 'id',
    caseId: 'caseId',
    amount: 'amount',
    status: 'status',
    dueDate: 'dueDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CaseInvoiceScalarFieldEnum = (typeof CaseInvoiceScalarFieldEnum)[keyof typeof CaseInvoiceScalarFieldEnum]


  export const CaseBillingScalarFieldEnum: {
    id: 'id',
    caseId: 'caseId',
    amount: 'amount',
    currency: 'currency',
    rateType: 'rateType',
    paymentStatus: 'paymentStatus',
    paymentMethod: 'paymentMethod',
    paymentDate: 'paymentDate',
    billingNote: 'billingNote',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CaseBillingScalarFieldEnum = (typeof CaseBillingScalarFieldEnum)[keyof typeof CaseBillingScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    initialContent: 'initialContent',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'PracticeArea'
   */
  export type EnumPracticeAreaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PracticeArea'>
    


  /**
   * Reference to a field of type 'PracticeArea[]'
   */
  export type ListEnumPracticeAreaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PracticeArea[]'>
    


  /**
   * Reference to a field of type 'CaseStatus'
   */
  export type EnumCaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseStatus'>
    


  /**
   * Reference to a field of type 'CaseStatus[]'
   */
  export type ListEnumCaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseStatus[]'>
    


  /**
   * Reference to a field of type 'matterPriority'
   */
  export type EnummatterPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'matterPriority'>
    


  /**
   * Reference to a field of type 'matterPriority[]'
   */
  export type ListEnummatterPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'matterPriority[]'>
    


  /**
   * Reference to a field of type 'CaseStage'
   */
  export type EnumCaseStageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseStage'>
    


  /**
   * Reference to a field of type 'CaseStage[]'
   */
  export type ListEnumCaseStageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseStage[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'CaseRateType'
   */
  export type EnumCaseRateTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseRateType'>
    


  /**
   * Reference to a field of type 'CaseRateType[]'
   */
  export type ListEnumCaseRateTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseRateType[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringNullableFilter<"User"> | string | null
    userName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    userProfile?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    chatToken?: StringNullableFilter<"User"> | string | null
    Session?: XOR<SessionNullableScalarRelationFilter, SessionWhereInput> | null
    UserAddress?: XOR<AddressNullableScalarRelationFilter, AddressWhereInput> | null
    TeamAdmin?: XOR<TeamAdminNullableScalarRelationFilter, TeamAdminWhereInput> | null
    TeamMember?: XOR<TeamMemberNullableScalarRelationFilter, TeamMemberWhereInput> | null
    TeamClient?: XOR<TeamClientNullableScalarRelationFilter, TeamClientWhereInput> | null
    documents?: DocumentListRelationFilter
    ToDoList?: ToDoListListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrderInput | SortOrder
    userName?: SortOrder
    email?: SortOrder
    userProfile?: SortOrderInput | SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    chatToken?: SortOrderInput | SortOrder
    Session?: SessionOrderByWithRelationInput
    UserAddress?: AddressOrderByWithRelationInput
    TeamAdmin?: TeamAdminOrderByWithRelationInput
    TeamMember?: TeamMemberOrderByWithRelationInput
    TeamClient?: TeamClientOrderByWithRelationInput
    documents?: DocumentOrderByRelationAggregateInput
    ToDoList?: ToDoListOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userName?: string
    email?: string
    phoneNumber?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringNullableFilter<"User"> | string | null
    userProfile?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    chatToken?: StringNullableFilter<"User"> | string | null
    Session?: XOR<SessionNullableScalarRelationFilter, SessionWhereInput> | null
    UserAddress?: XOR<AddressNullableScalarRelationFilter, AddressWhereInput> | null
    TeamAdmin?: XOR<TeamAdminNullableScalarRelationFilter, TeamAdminWhereInput> | null
    TeamMember?: XOR<TeamMemberNullableScalarRelationFilter, TeamMemberWhereInput> | null
    TeamClient?: XOR<TeamClientNullableScalarRelationFilter, TeamClientWhereInput> | null
    documents?: DocumentListRelationFilter
    ToDoList?: ToDoListListRelationFilter
  }, "id" | "userName" | "email" | "phoneNumber">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrderInput | SortOrder
    userName?: SortOrder
    email?: SortOrder
    userProfile?: SortOrderInput | SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    chatToken?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    userName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    userProfile?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    chatToken?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type AddressWhereInput = {
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    id?: StringFilter<"Address"> | string
    zip?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    state?: StringFilter<"Address"> | string
    country?: StringFilter<"Address"> | string
    userId?: StringNullableFilter<"Address"> | string | null
    createdAt?: DateTimeFilter<"Address"> | Date | string
    opponentId?: StringNullableFilter<"Address"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    zip?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    opponentId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AddressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    zip?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    state?: StringFilter<"Address"> | string
    country?: StringFilter<"Address"> | string
    createdAt?: DateTimeFilter<"Address"> | Date | string
    opponentId?: StringNullableFilter<"Address"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "userId">

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    zip?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    opponentId?: SortOrderInput | SortOrder
    _count?: AddressCountOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    OR?: AddressScalarWhereWithAggregatesInput[]
    NOT?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Address"> | string
    zip?: StringWithAggregatesFilter<"Address"> | string
    city?: StringWithAggregatesFilter<"Address"> | string
    state?: StringWithAggregatesFilter<"Address"> | string
    country?: StringWithAggregatesFilter<"Address"> | string
    userId?: StringNullableWithAggregatesFilter<"Address"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Address"> | Date | string
    opponentId?: StringNullableWithAggregatesFilter<"Address"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionKey?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    userId?: StringFilter<"Session"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionKey?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionKey?: string
    userId?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionKey" | "userId">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionKey?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionKey?: StringWithAggregatesFilter<"Session"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    userId?: StringWithAggregatesFilter<"Session"> | string
  }

  export type TeamAdminWhereInput = {
    AND?: TeamAdminWhereInput | TeamAdminWhereInput[]
    OR?: TeamAdminWhereInput[]
    NOT?: TeamAdminWhereInput | TeamAdminWhereInput[]
    id?: StringFilter<"TeamAdmin"> | string
    userId?: StringNullableFilter<"TeamAdmin"> | string | null
    role?: EnumUserRoleFilter<"TeamAdmin"> | $Enums.UserRole
    isVerified?: BoolFilter<"TeamAdmin"> | boolean
    createdAt?: DateTimeFilter<"TeamAdmin"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    cases?: CaseListRelationFilter
  }

  export type TeamAdminOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    cases?: CaseOrderByRelationAggregateInput
  }

  export type TeamAdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: TeamAdminWhereInput | TeamAdminWhereInput[]
    OR?: TeamAdminWhereInput[]
    NOT?: TeamAdminWhereInput | TeamAdminWhereInput[]
    role?: EnumUserRoleFilter<"TeamAdmin"> | $Enums.UserRole
    isVerified?: BoolFilter<"TeamAdmin"> | boolean
    createdAt?: DateTimeFilter<"TeamAdmin"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    cases?: CaseListRelationFilter
  }, "id" | "userId">

  export type TeamAdminOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    _count?: TeamAdminCountOrderByAggregateInput
    _max?: TeamAdminMaxOrderByAggregateInput
    _min?: TeamAdminMinOrderByAggregateInput
  }

  export type TeamAdminScalarWhereWithAggregatesInput = {
    AND?: TeamAdminScalarWhereWithAggregatesInput | TeamAdminScalarWhereWithAggregatesInput[]
    OR?: TeamAdminScalarWhereWithAggregatesInput[]
    NOT?: TeamAdminScalarWhereWithAggregatesInput | TeamAdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TeamAdmin"> | string
    userId?: StringNullableWithAggregatesFilter<"TeamAdmin"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"TeamAdmin"> | $Enums.UserRole
    isVerified?: BoolWithAggregatesFilter<"TeamAdmin"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"TeamAdmin"> | Date | string
  }

  export type TeamMemberWhereInput = {
    AND?: TeamMemberWhereInput | TeamMemberWhereInput[]
    OR?: TeamMemberWhereInput[]
    NOT?: TeamMemberWhereInput | TeamMemberWhereInput[]
    id?: StringFilter<"TeamMember"> | string
    userId?: StringNullableFilter<"TeamMember"> | string | null
    role?: EnumUserRoleFilter<"TeamMember"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"TeamMember"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    memberships?: TeamMembershipListRelationFilter
  }

  export type TeamMemberOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    memberships?: TeamMembershipOrderByRelationAggregateInput
  }

  export type TeamMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: TeamMemberWhereInput | TeamMemberWhereInput[]
    OR?: TeamMemberWhereInput[]
    NOT?: TeamMemberWhereInput | TeamMemberWhereInput[]
    role?: EnumUserRoleFilter<"TeamMember"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"TeamMember"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    memberships?: TeamMembershipListRelationFilter
  }, "id" | "userId">

  export type TeamMemberOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    _count?: TeamMemberCountOrderByAggregateInput
    _max?: TeamMemberMaxOrderByAggregateInput
    _min?: TeamMemberMinOrderByAggregateInput
  }

  export type TeamMemberScalarWhereWithAggregatesInput = {
    AND?: TeamMemberScalarWhereWithAggregatesInput | TeamMemberScalarWhereWithAggregatesInput[]
    OR?: TeamMemberScalarWhereWithAggregatesInput[]
    NOT?: TeamMemberScalarWhereWithAggregatesInput | TeamMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TeamMember"> | string
    userId?: StringNullableWithAggregatesFilter<"TeamMember"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"TeamMember"> | $Enums.UserRole
    createdAt?: DateTimeWithAggregatesFilter<"TeamMember"> | Date | string
  }

  export type OpponentWhereInput = {
    AND?: OpponentWhereInput | OpponentWhereInput[]
    OR?: OpponentWhereInput[]
    NOT?: OpponentWhereInput | OpponentWhereInput[]
    id?: StringFilter<"Opponent"> | string
    firstName?: StringFilter<"Opponent"> | string
    lastName?: StringFilter<"Opponent"> | string
    jobTitle?: StringNullableFilter<"Opponent"> | string | null
    email?: StringNullableFilter<"Opponent"> | string | null
    phoneNumber?: StringNullableFilter<"Opponent"> | string | null
    zip?: StringFilter<"Opponent"> | string
    city?: StringFilter<"Opponent"> | string
    state?: StringFilter<"Opponent"> | string
    country?: StringFilter<"Opponent"> | string
    Case?: XOR<CaseNullableScalarRelationFilter, CaseWhereInput> | null
  }

  export type OpponentOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    jobTitle?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    zip?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    Case?: CaseOrderByWithRelationInput
  }

  export type OpponentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OpponentWhereInput | OpponentWhereInput[]
    OR?: OpponentWhereInput[]
    NOT?: OpponentWhereInput | OpponentWhereInput[]
    firstName?: StringFilter<"Opponent"> | string
    lastName?: StringFilter<"Opponent"> | string
    jobTitle?: StringNullableFilter<"Opponent"> | string | null
    email?: StringNullableFilter<"Opponent"> | string | null
    phoneNumber?: StringNullableFilter<"Opponent"> | string | null
    zip?: StringFilter<"Opponent"> | string
    city?: StringFilter<"Opponent"> | string
    state?: StringFilter<"Opponent"> | string
    country?: StringFilter<"Opponent"> | string
    Case?: XOR<CaseNullableScalarRelationFilter, CaseWhereInput> | null
  }, "id">

  export type OpponentOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    jobTitle?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    zip?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    _count?: OpponentCountOrderByAggregateInput
    _max?: OpponentMaxOrderByAggregateInput
    _min?: OpponentMinOrderByAggregateInput
  }

  export type OpponentScalarWhereWithAggregatesInput = {
    AND?: OpponentScalarWhereWithAggregatesInput | OpponentScalarWhereWithAggregatesInput[]
    OR?: OpponentScalarWhereWithAggregatesInput[]
    NOT?: OpponentScalarWhereWithAggregatesInput | OpponentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Opponent"> | string
    firstName?: StringWithAggregatesFilter<"Opponent"> | string
    lastName?: StringWithAggregatesFilter<"Opponent"> | string
    jobTitle?: StringNullableWithAggregatesFilter<"Opponent"> | string | null
    email?: StringNullableWithAggregatesFilter<"Opponent"> | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"Opponent"> | string | null
    zip?: StringWithAggregatesFilter<"Opponent"> | string
    city?: StringWithAggregatesFilter<"Opponent"> | string
    state?: StringWithAggregatesFilter<"Opponent"> | string
    country?: StringWithAggregatesFilter<"Opponent"> | string
  }

  export type TeamClientWhereInput = {
    AND?: TeamClientWhereInput | TeamClientWhereInput[]
    OR?: TeamClientWhereInput[]
    NOT?: TeamClientWhereInput | TeamClientWhereInput[]
    id?: StringFilter<"TeamClient"> | string
    userId?: StringNullableFilter<"TeamClient"> | string | null
    role?: EnumUserRoleFilter<"TeamClient"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"TeamClient"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    cases?: CaseListRelationFilter
  }

  export type TeamClientOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    cases?: CaseOrderByRelationAggregateInput
  }

  export type TeamClientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: TeamClientWhereInput | TeamClientWhereInput[]
    OR?: TeamClientWhereInput[]
    NOT?: TeamClientWhereInput | TeamClientWhereInput[]
    role?: EnumUserRoleFilter<"TeamClient"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"TeamClient"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    cases?: CaseListRelationFilter
  }, "id" | "userId">

  export type TeamClientOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    _count?: TeamClientCountOrderByAggregateInput
    _max?: TeamClientMaxOrderByAggregateInput
    _min?: TeamClientMinOrderByAggregateInput
  }

  export type TeamClientScalarWhereWithAggregatesInput = {
    AND?: TeamClientScalarWhereWithAggregatesInput | TeamClientScalarWhereWithAggregatesInput[]
    OR?: TeamClientScalarWhereWithAggregatesInput[]
    NOT?: TeamClientScalarWhereWithAggregatesInput | TeamClientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TeamClient"> | string
    userId?: StringNullableWithAggregatesFilter<"TeamClient"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"TeamClient"> | $Enums.UserRole
    createdAt?: DateTimeWithAggregatesFilter<"TeamClient"> | Date | string
  }

  export type CaseTagWhereInput = {
    AND?: CaseTagWhereInput | CaseTagWhereInput[]
    OR?: CaseTagWhereInput[]
    NOT?: CaseTagWhereInput | CaseTagWhereInput[]
    id?: StringFilter<"CaseTag"> | string
    label?: StringFilter<"CaseTag"> | string
    caseId?: StringFilter<"CaseTag"> | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
  }

  export type CaseTagOrderByWithRelationInput = {
    id?: SortOrder
    label?: SortOrder
    caseId?: SortOrder
    case?: CaseOrderByWithRelationInput
  }

  export type CaseTagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    label?: string
    caseId?: string
    AND?: CaseTagWhereInput | CaseTagWhereInput[]
    OR?: CaseTagWhereInput[]
    NOT?: CaseTagWhereInput | CaseTagWhereInput[]
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
  }, "id" | "caseId" | "label">

  export type CaseTagOrderByWithAggregationInput = {
    id?: SortOrder
    label?: SortOrder
    caseId?: SortOrder
    _count?: CaseTagCountOrderByAggregateInput
    _max?: CaseTagMaxOrderByAggregateInput
    _min?: CaseTagMinOrderByAggregateInput
  }

  export type CaseTagScalarWhereWithAggregatesInput = {
    AND?: CaseTagScalarWhereWithAggregatesInput | CaseTagScalarWhereWithAggregatesInput[]
    OR?: CaseTagScalarWhereWithAggregatesInput[]
    NOT?: CaseTagScalarWhereWithAggregatesInput | CaseTagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CaseTag"> | string
    label?: StringWithAggregatesFilter<"CaseTag"> | string
    caseId?: StringWithAggregatesFilter<"CaseTag"> | string
  }

  export type TeamMembershipWhereInput = {
    AND?: TeamMembershipWhereInput | TeamMembershipWhereInput[]
    OR?: TeamMembershipWhereInput[]
    NOT?: TeamMembershipWhereInput | TeamMembershipWhereInput[]
    id?: StringFilter<"TeamMembership"> | string
    teamMemberId?: StringFilter<"TeamMembership"> | string
    caseId?: StringFilter<"TeamMembership"> | string
    joinedAt?: DateTimeFilter<"TeamMembership"> | Date | string
    teamMember?: XOR<TeamMemberScalarRelationFilter, TeamMemberWhereInput>
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
  }

  export type TeamMembershipOrderByWithRelationInput = {
    id?: SortOrder
    teamMemberId?: SortOrder
    caseId?: SortOrder
    joinedAt?: SortOrder
    teamMember?: TeamMemberOrderByWithRelationInput
    case?: CaseOrderByWithRelationInput
  }

  export type TeamMembershipWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    teamMemberId_caseId?: TeamMembershipTeamMemberIdCaseIdCompoundUniqueInput
    AND?: TeamMembershipWhereInput | TeamMembershipWhereInput[]
    OR?: TeamMembershipWhereInput[]
    NOT?: TeamMembershipWhereInput | TeamMembershipWhereInput[]
    teamMemberId?: StringFilter<"TeamMembership"> | string
    caseId?: StringFilter<"TeamMembership"> | string
    joinedAt?: DateTimeFilter<"TeamMembership"> | Date | string
    teamMember?: XOR<TeamMemberScalarRelationFilter, TeamMemberWhereInput>
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
  }, "id" | "teamMemberId_caseId">

  export type TeamMembershipOrderByWithAggregationInput = {
    id?: SortOrder
    teamMemberId?: SortOrder
    caseId?: SortOrder
    joinedAt?: SortOrder
    _count?: TeamMembershipCountOrderByAggregateInput
    _max?: TeamMembershipMaxOrderByAggregateInput
    _min?: TeamMembershipMinOrderByAggregateInput
  }

  export type TeamMembershipScalarWhereWithAggregatesInput = {
    AND?: TeamMembershipScalarWhereWithAggregatesInput | TeamMembershipScalarWhereWithAggregatesInput[]
    OR?: TeamMembershipScalarWhereWithAggregatesInput[]
    NOT?: TeamMembershipScalarWhereWithAggregatesInput | TeamMembershipScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TeamMembership"> | string
    teamMemberId?: StringWithAggregatesFilter<"TeamMembership"> | string
    caseId?: StringWithAggregatesFilter<"TeamMembership"> | string
    joinedAt?: DateTimeWithAggregatesFilter<"TeamMembership"> | Date | string
  }

  export type ToDoListWhereInput = {
    AND?: ToDoListWhereInput | ToDoListWhereInput[]
    OR?: ToDoListWhereInput[]
    NOT?: ToDoListWhereInput | ToDoListWhereInput[]
    id?: StringFilter<"ToDoList"> | string
    task?: StringFilter<"ToDoList"> | string
    userId?: StringNullableFilter<"ToDoList"> | string | null
    isTaskChecked?: BoolFilter<"ToDoList"> | boolean
    taskForDate?: DateTimeFilter<"ToDoList"> | Date | string
    createdAt?: DateTimeFilter<"ToDoList"> | Date | string
    updatedAt?: DateTimeFilter<"ToDoList"> | Date | string
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ToDoListOrderByWithRelationInput = {
    id?: SortOrder
    task?: SortOrder
    userId?: SortOrderInput | SortOrder
    isTaskChecked?: SortOrder
    taskForDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: UserOrderByWithRelationInput
  }

  export type ToDoListWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ToDoListWhereInput | ToDoListWhereInput[]
    OR?: ToDoListWhereInput[]
    NOT?: ToDoListWhereInput | ToDoListWhereInput[]
    task?: StringFilter<"ToDoList"> | string
    userId?: StringNullableFilter<"ToDoList"> | string | null
    isTaskChecked?: BoolFilter<"ToDoList"> | boolean
    taskForDate?: DateTimeFilter<"ToDoList"> | Date | string
    createdAt?: DateTimeFilter<"ToDoList"> | Date | string
    updatedAt?: DateTimeFilter<"ToDoList"> | Date | string
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type ToDoListOrderByWithAggregationInput = {
    id?: SortOrder
    task?: SortOrder
    userId?: SortOrderInput | SortOrder
    isTaskChecked?: SortOrder
    taskForDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ToDoListCountOrderByAggregateInput
    _max?: ToDoListMaxOrderByAggregateInput
    _min?: ToDoListMinOrderByAggregateInput
  }

  export type ToDoListScalarWhereWithAggregatesInput = {
    AND?: ToDoListScalarWhereWithAggregatesInput | ToDoListScalarWhereWithAggregatesInput[]
    OR?: ToDoListScalarWhereWithAggregatesInput[]
    NOT?: ToDoListScalarWhereWithAggregatesInput | ToDoListScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ToDoList"> | string
    task?: StringWithAggregatesFilter<"ToDoList"> | string
    userId?: StringNullableWithAggregatesFilter<"ToDoList"> | string | null
    isTaskChecked?: BoolWithAggregatesFilter<"ToDoList"> | boolean
    taskForDate?: DateTimeWithAggregatesFilter<"ToDoList"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"ToDoList"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ToDoList"> | Date | string
  }

  export type CaseWhereInput = {
    AND?: CaseWhereInput | CaseWhereInput[]
    OR?: CaseWhereInput[]
    NOT?: CaseWhereInput | CaseWhereInput[]
    id?: StringFilter<"Case"> | string
    title?: StringFilter<"Case"> | string
    description?: StringNullableFilter<"Case"> | string | null
    practiseArea?: EnumPracticeAreaFilter<"Case"> | $Enums.PracticeArea
    arrivalDate?: DateTimeNullableFilter<"Case"> | Date | string | null
    status?: EnumCaseStatusNullableFilter<"Case"> | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFilter<"Case"> | $Enums.matterPriority
    internalRefNumber?: StringNullableFilter<"Case"> | string | null
    filedDate?: DateTimeNullableFilter<"Case"> | Date | string | null
    closedDate?: DateTimeNullableFilter<"Case"> | Date | string | null
    estimatedCloseDate?: DateTimeNullableFilter<"Case"> | Date | string | null
    stage?: EnumCaseStageFilter<"Case"> | $Enums.CaseStage
    clientId?: StringFilter<"Case"> | string
    adminId?: StringFilter<"Case"> | string
    opponentId?: StringNullableFilter<"Case"> | string | null
    createdAt?: DateTimeFilter<"Case"> | Date | string
    updatedAt?: DateTimeFilter<"Case"> | Date | string
    client?: XOR<TeamClientScalarRelationFilter, TeamClientWhereInput>
    admin?: XOR<TeamAdminScalarRelationFilter, TeamAdminWhereInput>
    members?: TeamMembershipListRelationFilter
    Opponent?: XOR<OpponentNullableScalarRelationFilter, OpponentWhereInput> | null
    caseTag?: XOR<CaseTagNullableScalarRelationFilter, CaseTagWhereInput> | null
    caseDocument?: XOR<CaseDocumentNullableScalarRelationFilter, CaseDocumentWhereInput> | null
    caseReminder?: CaseReminderListRelationFilter
    caseInvoice?: CaseInvoiceListRelationFilter
    caseBillings?: XOR<CaseBillingNullableScalarRelationFilter, CaseBillingWhereInput> | null
    caseNote?: XOR<CaseNoteNullableScalarRelationFilter, CaseNoteWhereInput> | null
  }

  export type CaseOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    practiseArea?: SortOrder
    arrivalDate?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    matterPriority?: SortOrder
    internalRefNumber?: SortOrderInput | SortOrder
    filedDate?: SortOrderInput | SortOrder
    closedDate?: SortOrderInput | SortOrder
    estimatedCloseDate?: SortOrderInput | SortOrder
    stage?: SortOrder
    clientId?: SortOrder
    adminId?: SortOrder
    opponentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    client?: TeamClientOrderByWithRelationInput
    admin?: TeamAdminOrderByWithRelationInput
    members?: TeamMembershipOrderByRelationAggregateInput
    Opponent?: OpponentOrderByWithRelationInput
    caseTag?: CaseTagOrderByWithRelationInput
    caseDocument?: CaseDocumentOrderByWithRelationInput
    caseReminder?: CaseReminderOrderByRelationAggregateInput
    caseInvoice?: CaseInvoiceOrderByRelationAggregateInput
    caseBillings?: CaseBillingOrderByWithRelationInput
    caseNote?: CaseNoteOrderByWithRelationInput
  }

  export type CaseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    opponentId?: string
    AND?: CaseWhereInput | CaseWhereInput[]
    OR?: CaseWhereInput[]
    NOT?: CaseWhereInput | CaseWhereInput[]
    title?: StringFilter<"Case"> | string
    description?: StringNullableFilter<"Case"> | string | null
    practiseArea?: EnumPracticeAreaFilter<"Case"> | $Enums.PracticeArea
    arrivalDate?: DateTimeNullableFilter<"Case"> | Date | string | null
    status?: EnumCaseStatusNullableFilter<"Case"> | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFilter<"Case"> | $Enums.matterPriority
    internalRefNumber?: StringNullableFilter<"Case"> | string | null
    filedDate?: DateTimeNullableFilter<"Case"> | Date | string | null
    closedDate?: DateTimeNullableFilter<"Case"> | Date | string | null
    estimatedCloseDate?: DateTimeNullableFilter<"Case"> | Date | string | null
    stage?: EnumCaseStageFilter<"Case"> | $Enums.CaseStage
    clientId?: StringFilter<"Case"> | string
    adminId?: StringFilter<"Case"> | string
    createdAt?: DateTimeFilter<"Case"> | Date | string
    updatedAt?: DateTimeFilter<"Case"> | Date | string
    client?: XOR<TeamClientScalarRelationFilter, TeamClientWhereInput>
    admin?: XOR<TeamAdminScalarRelationFilter, TeamAdminWhereInput>
    members?: TeamMembershipListRelationFilter
    Opponent?: XOR<OpponentNullableScalarRelationFilter, OpponentWhereInput> | null
    caseTag?: XOR<CaseTagNullableScalarRelationFilter, CaseTagWhereInput> | null
    caseDocument?: XOR<CaseDocumentNullableScalarRelationFilter, CaseDocumentWhereInput> | null
    caseReminder?: CaseReminderListRelationFilter
    caseInvoice?: CaseInvoiceListRelationFilter
    caseBillings?: XOR<CaseBillingNullableScalarRelationFilter, CaseBillingWhereInput> | null
    caseNote?: XOR<CaseNoteNullableScalarRelationFilter, CaseNoteWhereInput> | null
  }, "id" | "opponentId">

  export type CaseOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    practiseArea?: SortOrder
    arrivalDate?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    matterPriority?: SortOrder
    internalRefNumber?: SortOrderInput | SortOrder
    filedDate?: SortOrderInput | SortOrder
    closedDate?: SortOrderInput | SortOrder
    estimatedCloseDate?: SortOrderInput | SortOrder
    stage?: SortOrder
    clientId?: SortOrder
    adminId?: SortOrder
    opponentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CaseCountOrderByAggregateInput
    _max?: CaseMaxOrderByAggregateInput
    _min?: CaseMinOrderByAggregateInput
  }

  export type CaseScalarWhereWithAggregatesInput = {
    AND?: CaseScalarWhereWithAggregatesInput | CaseScalarWhereWithAggregatesInput[]
    OR?: CaseScalarWhereWithAggregatesInput[]
    NOT?: CaseScalarWhereWithAggregatesInput | CaseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Case"> | string
    title?: StringWithAggregatesFilter<"Case"> | string
    description?: StringNullableWithAggregatesFilter<"Case"> | string | null
    practiseArea?: EnumPracticeAreaWithAggregatesFilter<"Case"> | $Enums.PracticeArea
    arrivalDate?: DateTimeNullableWithAggregatesFilter<"Case"> | Date | string | null
    status?: EnumCaseStatusNullableWithAggregatesFilter<"Case"> | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityWithAggregatesFilter<"Case"> | $Enums.matterPriority
    internalRefNumber?: StringNullableWithAggregatesFilter<"Case"> | string | null
    filedDate?: DateTimeNullableWithAggregatesFilter<"Case"> | Date | string | null
    closedDate?: DateTimeNullableWithAggregatesFilter<"Case"> | Date | string | null
    estimatedCloseDate?: DateTimeNullableWithAggregatesFilter<"Case"> | Date | string | null
    stage?: EnumCaseStageWithAggregatesFilter<"Case"> | $Enums.CaseStage
    clientId?: StringWithAggregatesFilter<"Case"> | string
    adminId?: StringWithAggregatesFilter<"Case"> | string
    opponentId?: StringNullableWithAggregatesFilter<"Case"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Case"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Case"> | Date | string
  }

  export type CaseNoteWhereInput = {
    AND?: CaseNoteWhereInput | CaseNoteWhereInput[]
    OR?: CaseNoteWhereInput[]
    NOT?: CaseNoteWhereInput | CaseNoteWhereInput[]
    id?: StringFilter<"CaseNote"> | string
    note?: StringNullableFilter<"CaseNote"> | string | null
    caseId?: StringFilter<"CaseNote"> | string
    createdAt?: DateTimeFilter<"CaseNote"> | Date | string
    case?: XOR<CaseNullableScalarRelationFilter, CaseWhereInput> | null
  }

  export type CaseNoteOrderByWithRelationInput = {
    id?: SortOrder
    note?: SortOrderInput | SortOrder
    caseId?: SortOrder
    createdAt?: SortOrder
    case?: CaseOrderByWithRelationInput
  }

  export type CaseNoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    caseId?: string
    AND?: CaseNoteWhereInput | CaseNoteWhereInput[]
    OR?: CaseNoteWhereInput[]
    NOT?: CaseNoteWhereInput | CaseNoteWhereInput[]
    note?: StringNullableFilter<"CaseNote"> | string | null
    createdAt?: DateTimeFilter<"CaseNote"> | Date | string
    case?: XOR<CaseNullableScalarRelationFilter, CaseWhereInput> | null
  }, "id" | "caseId">

  export type CaseNoteOrderByWithAggregationInput = {
    id?: SortOrder
    note?: SortOrderInput | SortOrder
    caseId?: SortOrder
    createdAt?: SortOrder
    _count?: CaseNoteCountOrderByAggregateInput
    _max?: CaseNoteMaxOrderByAggregateInput
    _min?: CaseNoteMinOrderByAggregateInput
  }

  export type CaseNoteScalarWhereWithAggregatesInput = {
    AND?: CaseNoteScalarWhereWithAggregatesInput | CaseNoteScalarWhereWithAggregatesInput[]
    OR?: CaseNoteScalarWhereWithAggregatesInput[]
    NOT?: CaseNoteScalarWhereWithAggregatesInput | CaseNoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CaseNote"> | string
    note?: StringNullableWithAggregatesFilter<"CaseNote"> | string | null
    caseId?: StringWithAggregatesFilter<"CaseNote"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CaseNote"> | Date | string
  }

  export type CaseDocumentWhereInput = {
    AND?: CaseDocumentWhereInput | CaseDocumentWhereInput[]
    OR?: CaseDocumentWhereInput[]
    NOT?: CaseDocumentWhereInput | CaseDocumentWhereInput[]
    id?: StringFilter<"CaseDocument"> | string
    caseId?: StringFilter<"CaseDocument"> | string
    documentUrl?: StringFilter<"CaseDocument"> | string
    createdAt?: DateTimeFilter<"CaseDocument"> | Date | string
    updatedAt?: DateTimeFilter<"CaseDocument"> | Date | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
  }

  export type CaseDocumentOrderByWithRelationInput = {
    id?: SortOrder
    caseId?: SortOrder
    documentUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    case?: CaseOrderByWithRelationInput
  }

  export type CaseDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    caseId?: string
    AND?: CaseDocumentWhereInput | CaseDocumentWhereInput[]
    OR?: CaseDocumentWhereInput[]
    NOT?: CaseDocumentWhereInput | CaseDocumentWhereInput[]
    documentUrl?: StringFilter<"CaseDocument"> | string
    createdAt?: DateTimeFilter<"CaseDocument"> | Date | string
    updatedAt?: DateTimeFilter<"CaseDocument"> | Date | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
  }, "id" | "caseId">

  export type CaseDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    caseId?: SortOrder
    documentUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CaseDocumentCountOrderByAggregateInput
    _max?: CaseDocumentMaxOrderByAggregateInput
    _min?: CaseDocumentMinOrderByAggregateInput
  }

  export type CaseDocumentScalarWhereWithAggregatesInput = {
    AND?: CaseDocumentScalarWhereWithAggregatesInput | CaseDocumentScalarWhereWithAggregatesInput[]
    OR?: CaseDocumentScalarWhereWithAggregatesInput[]
    NOT?: CaseDocumentScalarWhereWithAggregatesInput | CaseDocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CaseDocument"> | string
    caseId?: StringWithAggregatesFilter<"CaseDocument"> | string
    documentUrl?: StringWithAggregatesFilter<"CaseDocument"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CaseDocument"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CaseDocument"> | Date | string
  }

  export type CaseReminderWhereInput = {
    AND?: CaseReminderWhereInput | CaseReminderWhereInput[]
    OR?: CaseReminderWhereInput[]
    NOT?: CaseReminderWhereInput | CaseReminderWhereInput[]
    id?: StringFilter<"CaseReminder"> | string
    caseId?: StringFilter<"CaseReminder"> | string
    reminderDate?: DateTimeFilter<"CaseReminder"> | Date | string
    description?: StringFilter<"CaseReminder"> | string
    createdAt?: DateTimeFilter<"CaseReminder"> | Date | string
    updatedAt?: DateTimeFilter<"CaseReminder"> | Date | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
  }

  export type CaseReminderOrderByWithRelationInput = {
    id?: SortOrder
    caseId?: SortOrder
    reminderDate?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    case?: CaseOrderByWithRelationInput
  }

  export type CaseReminderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CaseReminderWhereInput | CaseReminderWhereInput[]
    OR?: CaseReminderWhereInput[]
    NOT?: CaseReminderWhereInput | CaseReminderWhereInput[]
    caseId?: StringFilter<"CaseReminder"> | string
    reminderDate?: DateTimeFilter<"CaseReminder"> | Date | string
    description?: StringFilter<"CaseReminder"> | string
    createdAt?: DateTimeFilter<"CaseReminder"> | Date | string
    updatedAt?: DateTimeFilter<"CaseReminder"> | Date | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
  }, "id">

  export type CaseReminderOrderByWithAggregationInput = {
    id?: SortOrder
    caseId?: SortOrder
    reminderDate?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CaseReminderCountOrderByAggregateInput
    _max?: CaseReminderMaxOrderByAggregateInput
    _min?: CaseReminderMinOrderByAggregateInput
  }

  export type CaseReminderScalarWhereWithAggregatesInput = {
    AND?: CaseReminderScalarWhereWithAggregatesInput | CaseReminderScalarWhereWithAggregatesInput[]
    OR?: CaseReminderScalarWhereWithAggregatesInput[]
    NOT?: CaseReminderScalarWhereWithAggregatesInput | CaseReminderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CaseReminder"> | string
    caseId?: StringWithAggregatesFilter<"CaseReminder"> | string
    reminderDate?: DateTimeWithAggregatesFilter<"CaseReminder"> | Date | string
    description?: StringWithAggregatesFilter<"CaseReminder"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CaseReminder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CaseReminder"> | Date | string
  }

  export type CaseInvoiceWhereInput = {
    AND?: CaseInvoiceWhereInput | CaseInvoiceWhereInput[]
    OR?: CaseInvoiceWhereInput[]
    NOT?: CaseInvoiceWhereInput | CaseInvoiceWhereInput[]
    id?: StringFilter<"CaseInvoice"> | string
    caseId?: StringFilter<"CaseInvoice"> | string
    amount?: FloatFilter<"CaseInvoice"> | number
    status?: StringFilter<"CaseInvoice"> | string
    dueDate?: DateTimeFilter<"CaseInvoice"> | Date | string
    createdAt?: DateTimeFilter<"CaseInvoice"> | Date | string
    updatedAt?: DateTimeFilter<"CaseInvoice"> | Date | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
  }

  export type CaseInvoiceOrderByWithRelationInput = {
    id?: SortOrder
    caseId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    case?: CaseOrderByWithRelationInput
  }

  export type CaseInvoiceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CaseInvoiceWhereInput | CaseInvoiceWhereInput[]
    OR?: CaseInvoiceWhereInput[]
    NOT?: CaseInvoiceWhereInput | CaseInvoiceWhereInput[]
    caseId?: StringFilter<"CaseInvoice"> | string
    amount?: FloatFilter<"CaseInvoice"> | number
    status?: StringFilter<"CaseInvoice"> | string
    dueDate?: DateTimeFilter<"CaseInvoice"> | Date | string
    createdAt?: DateTimeFilter<"CaseInvoice"> | Date | string
    updatedAt?: DateTimeFilter<"CaseInvoice"> | Date | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
  }, "id">

  export type CaseInvoiceOrderByWithAggregationInput = {
    id?: SortOrder
    caseId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CaseInvoiceCountOrderByAggregateInput
    _avg?: CaseInvoiceAvgOrderByAggregateInput
    _max?: CaseInvoiceMaxOrderByAggregateInput
    _min?: CaseInvoiceMinOrderByAggregateInput
    _sum?: CaseInvoiceSumOrderByAggregateInput
  }

  export type CaseInvoiceScalarWhereWithAggregatesInput = {
    AND?: CaseInvoiceScalarWhereWithAggregatesInput | CaseInvoiceScalarWhereWithAggregatesInput[]
    OR?: CaseInvoiceScalarWhereWithAggregatesInput[]
    NOT?: CaseInvoiceScalarWhereWithAggregatesInput | CaseInvoiceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CaseInvoice"> | string
    caseId?: StringWithAggregatesFilter<"CaseInvoice"> | string
    amount?: FloatWithAggregatesFilter<"CaseInvoice"> | number
    status?: StringWithAggregatesFilter<"CaseInvoice"> | string
    dueDate?: DateTimeWithAggregatesFilter<"CaseInvoice"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"CaseInvoice"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CaseInvoice"> | Date | string
  }

  export type CaseBillingWhereInput = {
    AND?: CaseBillingWhereInput | CaseBillingWhereInput[]
    OR?: CaseBillingWhereInput[]
    NOT?: CaseBillingWhereInput | CaseBillingWhereInput[]
    id?: StringFilter<"CaseBilling"> | string
    caseId?: StringFilter<"CaseBilling"> | string
    amount?: FloatFilter<"CaseBilling"> | number
    currency?: StringFilter<"CaseBilling"> | string
    rateType?: EnumCaseRateTypeFilter<"CaseBilling"> | $Enums.CaseRateType
    paymentStatus?: EnumPaymentStatusFilter<"CaseBilling"> | $Enums.PaymentStatus
    paymentMethod?: EnumPaymentMethodFilter<"CaseBilling"> | $Enums.PaymentMethod
    paymentDate?: DateTimeNullableFilter<"CaseBilling"> | Date | string | null
    billingNote?: StringNullableFilter<"CaseBilling"> | string | null
    createdAt?: DateTimeFilter<"CaseBilling"> | Date | string
    updatedAt?: DateTimeFilter<"CaseBilling"> | Date | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
  }

  export type CaseBillingOrderByWithRelationInput = {
    id?: SortOrder
    caseId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    rateType?: SortOrder
    paymentStatus?: SortOrder
    paymentMethod?: SortOrder
    paymentDate?: SortOrderInput | SortOrder
    billingNote?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    case?: CaseOrderByWithRelationInput
  }

  export type CaseBillingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    caseId?: string
    AND?: CaseBillingWhereInput | CaseBillingWhereInput[]
    OR?: CaseBillingWhereInput[]
    NOT?: CaseBillingWhereInput | CaseBillingWhereInput[]
    amount?: FloatFilter<"CaseBilling"> | number
    currency?: StringFilter<"CaseBilling"> | string
    rateType?: EnumCaseRateTypeFilter<"CaseBilling"> | $Enums.CaseRateType
    paymentStatus?: EnumPaymentStatusFilter<"CaseBilling"> | $Enums.PaymentStatus
    paymentMethod?: EnumPaymentMethodFilter<"CaseBilling"> | $Enums.PaymentMethod
    paymentDate?: DateTimeNullableFilter<"CaseBilling"> | Date | string | null
    billingNote?: StringNullableFilter<"CaseBilling"> | string | null
    createdAt?: DateTimeFilter<"CaseBilling"> | Date | string
    updatedAt?: DateTimeFilter<"CaseBilling"> | Date | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
  }, "id" | "caseId">

  export type CaseBillingOrderByWithAggregationInput = {
    id?: SortOrder
    caseId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    rateType?: SortOrder
    paymentStatus?: SortOrder
    paymentMethod?: SortOrder
    paymentDate?: SortOrderInput | SortOrder
    billingNote?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CaseBillingCountOrderByAggregateInput
    _avg?: CaseBillingAvgOrderByAggregateInput
    _max?: CaseBillingMaxOrderByAggregateInput
    _min?: CaseBillingMinOrderByAggregateInput
    _sum?: CaseBillingSumOrderByAggregateInput
  }

  export type CaseBillingScalarWhereWithAggregatesInput = {
    AND?: CaseBillingScalarWhereWithAggregatesInput | CaseBillingScalarWhereWithAggregatesInput[]
    OR?: CaseBillingScalarWhereWithAggregatesInput[]
    NOT?: CaseBillingScalarWhereWithAggregatesInput | CaseBillingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CaseBilling"> | string
    caseId?: StringWithAggregatesFilter<"CaseBilling"> | string
    amount?: FloatWithAggregatesFilter<"CaseBilling"> | number
    currency?: StringWithAggregatesFilter<"CaseBilling"> | string
    rateType?: EnumCaseRateTypeWithAggregatesFilter<"CaseBilling"> | $Enums.CaseRateType
    paymentStatus?: EnumPaymentStatusWithAggregatesFilter<"CaseBilling"> | $Enums.PaymentStatus
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"CaseBilling"> | $Enums.PaymentMethod
    paymentDate?: DateTimeNullableWithAggregatesFilter<"CaseBilling"> | Date | string | null
    billingNote?: StringNullableWithAggregatesFilter<"CaseBilling"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CaseBilling"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CaseBilling"> | Date | string
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: StringFilter<"Document"> | string
    title?: StringNullableFilter<"Document"> | string | null
    initialContent?: StringNullableFilter<"Document"> | string | null
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    userId?: StringFilter<"Document"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrderInput | SortOrder
    initialContent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    title?: StringNullableFilter<"Document"> | string | null
    initialContent?: StringNullableFilter<"Document"> | string | null
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    userId?: StringFilter<"Document"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrderInput | SortOrder
    initialContent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Document"> | string
    title?: StringNullableWithAggregatesFilter<"Document"> | string | null
    initialContent?: StringNullableWithAggregatesFilter<"Document"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    userId?: StringWithAggregatesFilter<"Document"> | string
  }

  export type UserCreateInput = {
    id?: string
    firstName: string
    lastName?: string | null
    userName: string
    email: string
    userProfile?: string | null
    password: string
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    chatToken?: string | null
    Session?: SessionCreateNestedOneWithoutUserInput
    UserAddress?: AddressCreateNestedOneWithoutUserInput
    TeamAdmin?: TeamAdminCreateNestedOneWithoutUserInput
    TeamMember?: TeamMemberCreateNestedOneWithoutUserInput
    TeamClient?: TeamClientCreateNestedOneWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUserInput
    ToDoList?: ToDoListCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName?: string | null
    userName: string
    email: string
    userProfile?: string | null
    password: string
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    chatToken?: string | null
    Session?: SessionUncheckedCreateNestedOneWithoutUserInput
    UserAddress?: AddressUncheckedCreateNestedOneWithoutUserInput
    TeamAdmin?: TeamAdminUncheckedCreateNestedOneWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedOneWithoutUserInput
    TeamClient?: TeamClientUncheckedCreateNestedOneWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
    ToDoList?: ToDoListUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userProfile?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    chatToken?: NullableStringFieldUpdateOperationsInput | string | null
    Session?: SessionUpdateOneWithoutUserNestedInput
    UserAddress?: AddressUpdateOneWithoutUserNestedInput
    TeamAdmin?: TeamAdminUpdateOneWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateOneWithoutUserNestedInput
    TeamClient?: TeamClientUpdateOneWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
    ToDoList?: ToDoListUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userProfile?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    chatToken?: NullableStringFieldUpdateOperationsInput | string | null
    Session?: SessionUncheckedUpdateOneWithoutUserNestedInput
    UserAddress?: AddressUncheckedUpdateOneWithoutUserNestedInput
    TeamAdmin?: TeamAdminUncheckedUpdateOneWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateOneWithoutUserNestedInput
    TeamClient?: TeamClientUncheckedUpdateOneWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
    ToDoList?: ToDoListUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    firstName: string
    lastName?: string | null
    userName: string
    email: string
    userProfile?: string | null
    password: string
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    chatToken?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userProfile?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    chatToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userProfile?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    chatToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AddressCreateInput = {
    id?: string
    zip: string
    city: string
    state: string
    country: string
    createdAt?: Date | string
    opponentId?: string | null
    user?: UserCreateNestedOneWithoutUserAddressInput
  }

  export type AddressUncheckedCreateInput = {
    id?: string
    zip: string
    city: string
    state: string
    country: string
    userId?: string | null
    createdAt?: Date | string
    opponentId?: string | null
  }

  export type AddressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    opponentId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutUserAddressNestedInput
  }

  export type AddressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    opponentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AddressCreateManyInput = {
    id?: string
    zip: string
    city: string
    state: string
    country: string
    userId?: string | null
    createdAt?: Date | string
    opponentId?: string | null
  }

  export type AddressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    opponentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AddressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    opponentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionKey: string
    expiresAt: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSessionInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionKey: string
    expiresAt: Date | string
    createdAt?: Date | string
    userId: string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionKey?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionKey?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionKey: string
    expiresAt: Date | string
    createdAt?: Date | string
    userId: string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionKey?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionKey?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TeamAdminCreateInput = {
    id?: string
    role?: $Enums.UserRole
    isVerified?: boolean
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutTeamAdminInput
    cases?: CaseCreateNestedManyWithoutAdminInput
  }

  export type TeamAdminUncheckedCreateInput = {
    id?: string
    userId?: string | null
    role?: $Enums.UserRole
    isVerified?: boolean
    createdAt?: Date | string
    cases?: CaseUncheckedCreateNestedManyWithoutAdminInput
  }

  export type TeamAdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTeamAdminNestedInput
    cases?: CaseUpdateManyWithoutAdminNestedInput
  }

  export type TeamAdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cases?: CaseUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type TeamAdminCreateManyInput = {
    id?: string
    userId?: string | null
    role?: $Enums.UserRole
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type TeamAdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamAdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMemberCreateInput = {
    id?: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutTeamMemberInput
    memberships?: TeamMembershipCreateNestedManyWithoutTeamMemberInput
  }

  export type TeamMemberUncheckedCreateInput = {
    id?: string
    userId?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    memberships?: TeamMembershipUncheckedCreateNestedManyWithoutTeamMemberInput
  }

  export type TeamMemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTeamMemberNestedInput
    memberships?: TeamMembershipUpdateManyWithoutTeamMemberNestedInput
  }

  export type TeamMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: TeamMembershipUncheckedUpdateManyWithoutTeamMemberNestedInput
  }

  export type TeamMemberCreateManyInput = {
    id?: string
    userId?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
  }

  export type TeamMemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpponentCreateInput = {
    id?: string
    firstName: string
    lastName: string
    jobTitle?: string | null
    email?: string | null
    phoneNumber?: string | null
    zip: string
    city: string
    state: string
    country: string
    Case?: CaseCreateNestedOneWithoutOpponentInput
  }

  export type OpponentUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    jobTitle?: string | null
    email?: string | null
    phoneNumber?: string | null
    zip: string
    city: string
    state: string
    country: string
    Case?: CaseUncheckedCreateNestedOneWithoutOpponentInput
  }

  export type OpponentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    Case?: CaseUpdateOneWithoutOpponentNestedInput
  }

  export type OpponentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    Case?: CaseUncheckedUpdateOneWithoutOpponentNestedInput
  }

  export type OpponentCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    jobTitle?: string | null
    email?: string | null
    phoneNumber?: string | null
    zip: string
    city: string
    state: string
    country: string
  }

  export type OpponentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type OpponentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type TeamClientCreateInput = {
    id?: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutTeamClientInput
    cases?: CaseCreateNestedManyWithoutClientInput
  }

  export type TeamClientUncheckedCreateInput = {
    id?: string
    userId?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    cases?: CaseUncheckedCreateNestedManyWithoutClientInput
  }

  export type TeamClientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTeamClientNestedInput
    cases?: CaseUpdateManyWithoutClientNestedInput
  }

  export type TeamClientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cases?: CaseUncheckedUpdateManyWithoutClientNestedInput
  }

  export type TeamClientCreateManyInput = {
    id?: string
    userId?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
  }

  export type TeamClientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamClientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseTagCreateInput = {
    id?: string
    label: string
    case: CaseCreateNestedOneWithoutCaseTagInput
  }

  export type CaseTagUncheckedCreateInput = {
    id?: string
    label: string
    caseId: string
  }

  export type CaseTagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    case?: CaseUpdateOneRequiredWithoutCaseTagNestedInput
  }

  export type CaseTagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type CaseTagCreateManyInput = {
    id?: string
    label: string
    caseId: string
  }

  export type CaseTagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type CaseTagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type TeamMembershipCreateInput = {
    id?: string
    joinedAt?: Date | string
    teamMember: TeamMemberCreateNestedOneWithoutMembershipsInput
    case: CaseCreateNestedOneWithoutMembersInput
  }

  export type TeamMembershipUncheckedCreateInput = {
    id?: string
    teamMemberId: string
    caseId: string
    joinedAt?: Date | string
  }

  export type TeamMembershipUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamMember?: TeamMemberUpdateOneRequiredWithoutMembershipsNestedInput
    case?: CaseUpdateOneRequiredWithoutMembersNestedInput
  }

  export type TeamMembershipUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamMemberId?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMembershipCreateManyInput = {
    id?: string
    teamMemberId: string
    caseId: string
    joinedAt?: Date | string
  }

  export type TeamMembershipUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMembershipUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamMemberId?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ToDoListCreateInput = {
    id?: string
    task: string
    isTaskChecked?: boolean
    taskForDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutToDoListInput
  }

  export type ToDoListUncheckedCreateInput = {
    id?: string
    task: string
    userId?: string | null
    isTaskChecked?: boolean
    taskForDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ToDoListUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    task?: StringFieldUpdateOperationsInput | string
    isTaskChecked?: BoolFieldUpdateOperationsInput | boolean
    taskForDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutToDoListNestedInput
  }

  export type ToDoListUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    task?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    isTaskChecked?: BoolFieldUpdateOperationsInput | boolean
    taskForDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ToDoListCreateManyInput = {
    id?: string
    task: string
    userId?: string | null
    isTaskChecked?: boolean
    taskForDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ToDoListUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    task?: StringFieldUpdateOperationsInput | string
    isTaskChecked?: BoolFieldUpdateOperationsInput | boolean
    taskForDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ToDoListUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    task?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    isTaskChecked?: BoolFieldUpdateOperationsInput | boolean
    taskForDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseCreateInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    createdAt?: Date | string
    updatedAt?: Date | string
    client: TeamClientCreateNestedOneWithoutCasesInput
    admin: TeamAdminCreateNestedOneWithoutCasesInput
    members?: TeamMembershipCreateNestedManyWithoutCaseInput
    Opponent?: OpponentCreateNestedOneWithoutCaseInput
    caseTag?: CaseTagCreateNestedOneWithoutCaseInput
    caseDocument?: CaseDocumentCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderCreateNestedManyWithoutCaseInput
    caseInvoice?: CaseInvoiceCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingCreateNestedOneWithoutCaseInput
    caseNote?: CaseNoteCreateNestedOneWithoutCaseInput
  }

  export type CaseUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    clientId: string
    adminId: string
    opponentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: TeamMembershipUncheckedCreateNestedManyWithoutCaseInput
    caseTag?: CaseTagUncheckedCreateNestedOneWithoutCaseInput
    caseDocument?: CaseDocumentUncheckedCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderUncheckedCreateNestedManyWithoutCaseInput
    caseInvoice?: CaseInvoiceUncheckedCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingUncheckedCreateNestedOneWithoutCaseInput
    caseNote?: CaseNoteUncheckedCreateNestedOneWithoutCaseInput
  }

  export type CaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: TeamClientUpdateOneRequiredWithoutCasesNestedInput
    admin?: TeamAdminUpdateOneRequiredWithoutCasesNestedInput
    members?: TeamMembershipUpdateManyWithoutCaseNestedInput
    Opponent?: OpponentUpdateOneWithoutCaseNestedInput
    caseTag?: CaseTagUpdateOneWithoutCaseNestedInput
    caseDocument?: CaseDocumentUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUpdateManyWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUpdateOneWithoutCaseNestedInput
    caseNote?: CaseNoteUpdateOneWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    clientId?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    opponentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: TeamMembershipUncheckedUpdateManyWithoutCaseNestedInput
    caseTag?: CaseTagUncheckedUpdateOneWithoutCaseNestedInput
    caseDocument?: CaseDocumentUncheckedUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUncheckedUpdateManyWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUncheckedUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUncheckedUpdateOneWithoutCaseNestedInput
    caseNote?: CaseNoteUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type CaseCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    clientId: string
    adminId: string
    opponentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    clientId?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    opponentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseNoteCreateInput = {
    id?: string
    note?: string | null
    createdAt?: Date | string
    case?: CaseCreateNestedOneWithoutCaseNoteInput
  }

  export type CaseNoteUncheckedCreateInput = {
    id?: string
    note?: string | null
    caseId: string
    createdAt?: Date | string
  }

  export type CaseNoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneWithoutCaseNoteNestedInput
  }

  export type CaseNoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    caseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseNoteCreateManyInput = {
    id?: string
    note?: string | null
    caseId: string
    createdAt?: Date | string
  }

  export type CaseNoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseNoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    caseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseDocumentCreateInput = {
    id?: string
    documentUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutCaseDocumentInput
  }

  export type CaseDocumentUncheckedCreateInput = {
    id?: string
    caseId: string
    documentUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseDocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutCaseDocumentNestedInput
  }

  export type CaseDocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    documentUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseDocumentCreateManyInput = {
    id?: string
    caseId: string
    documentUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseDocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseDocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    documentUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseReminderCreateInput = {
    id?: string
    reminderDate: Date | string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutCaseReminderInput
  }

  export type CaseReminderUncheckedCreateInput = {
    id?: string
    caseId: string
    reminderDate: Date | string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseReminderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reminderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutCaseReminderNestedInput
  }

  export type CaseReminderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    reminderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseReminderCreateManyInput = {
    id?: string
    caseId: string
    reminderDate: Date | string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseReminderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reminderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseReminderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    reminderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseInvoiceCreateInput = {
    id?: string
    amount: number
    status: string
    dueDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutCaseInvoiceInput
  }

  export type CaseInvoiceUncheckedCreateInput = {
    id?: string
    caseId: string
    amount: number
    status: string
    dueDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseInvoiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutCaseInvoiceNestedInput
  }

  export type CaseInvoiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseInvoiceCreateManyInput = {
    id?: string
    caseId: string
    amount: number
    status: string
    dueDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseInvoiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseInvoiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseBillingCreateInput = {
    id?: string
    amount: number
    currency?: string
    rateType?: $Enums.CaseRateType
    paymentStatus?: $Enums.PaymentStatus
    paymentMethod?: $Enums.PaymentMethod
    paymentDate?: Date | string | null
    billingNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    case: CaseCreateNestedOneWithoutCaseBillingsInput
  }

  export type CaseBillingUncheckedCreateInput = {
    id?: string
    caseId: string
    amount: number
    currency?: string
    rateType?: $Enums.CaseRateType
    paymentStatus?: $Enums.PaymentStatus
    paymentMethod?: $Enums.PaymentMethod
    paymentDate?: Date | string | null
    billingNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseBillingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    rateType?: EnumCaseRateTypeFieldUpdateOperationsInput | $Enums.CaseRateType
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutCaseBillingsNestedInput
  }

  export type CaseBillingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    rateType?: EnumCaseRateTypeFieldUpdateOperationsInput | $Enums.CaseRateType
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseBillingCreateManyInput = {
    id?: string
    caseId: string
    amount: number
    currency?: string
    rateType?: $Enums.CaseRateType
    paymentStatus?: $Enums.PaymentStatus
    paymentMethod?: $Enums.PaymentMethod
    paymentDate?: Date | string | null
    billingNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseBillingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    rateType?: EnumCaseRateTypeFieldUpdateOperationsInput | $Enums.CaseRateType
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseBillingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    rateType?: EnumCaseRateTypeFieldUpdateOperationsInput | $Enums.CaseRateType
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentCreateInput = {
    id?: string
    title?: string | null
    initialContent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: string
    title?: string | null
    initialContent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type DocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    initialContent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    initialContent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentCreateManyInput = {
    id?: string
    title?: string | null
    initialContent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type DocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    initialContent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    initialContent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type SessionNullableScalarRelationFilter = {
    is?: SessionWhereInput | null
    isNot?: SessionWhereInput | null
  }

  export type AddressNullableScalarRelationFilter = {
    is?: AddressWhereInput | null
    isNot?: AddressWhereInput | null
  }

  export type TeamAdminNullableScalarRelationFilter = {
    is?: TeamAdminWhereInput | null
    isNot?: TeamAdminWhereInput | null
  }

  export type TeamMemberNullableScalarRelationFilter = {
    is?: TeamMemberWhereInput | null
    isNot?: TeamMemberWhereInput | null
  }

  export type TeamClientNullableScalarRelationFilter = {
    is?: TeamClientWhereInput | null
    isNot?: TeamClientWhereInput | null
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type ToDoListListRelationFilter = {
    every?: ToDoListWhereInput
    some?: ToDoListWhereInput
    none?: ToDoListWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ToDoListOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    userProfile?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    chatToken?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    userProfile?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    chatToken?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    userProfile?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    chatToken?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    zip?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    opponentId?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    zip?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    opponentId?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    zip?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    opponentId?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionKey?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionKey?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionKey?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CaseListRelationFilter = {
    every?: CaseWhereInput
    some?: CaseWhereInput
    none?: CaseWhereInput
  }

  export type CaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamAdminCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
  }

  export type TeamAdminMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
  }

  export type TeamAdminMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type TeamMembershipListRelationFilter = {
    every?: TeamMembershipWhereInput
    some?: TeamMembershipWhereInput
    none?: TeamMembershipWhereInput
  }

  export type TeamMembershipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamMemberCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type TeamMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type TeamMemberMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type CaseNullableScalarRelationFilter = {
    is?: CaseWhereInput | null
    isNot?: CaseWhereInput | null
  }

  export type OpponentCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    jobTitle?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    zip?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
  }

  export type OpponentMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    jobTitle?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    zip?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
  }

  export type OpponentMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    jobTitle?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    zip?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
  }

  export type TeamClientCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type TeamClientMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type TeamClientMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type CaseScalarRelationFilter = {
    is?: CaseWhereInput
    isNot?: CaseWhereInput
  }

  export type CaseTagCountOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    caseId?: SortOrder
  }

  export type CaseTagMaxOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    caseId?: SortOrder
  }

  export type CaseTagMinOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    caseId?: SortOrder
  }

  export type TeamMemberScalarRelationFilter = {
    is?: TeamMemberWhereInput
    isNot?: TeamMemberWhereInput
  }

  export type TeamMembershipTeamMemberIdCaseIdCompoundUniqueInput = {
    teamMemberId: string
    caseId: string
  }

  export type TeamMembershipCountOrderByAggregateInput = {
    id?: SortOrder
    teamMemberId?: SortOrder
    caseId?: SortOrder
    joinedAt?: SortOrder
  }

  export type TeamMembershipMaxOrderByAggregateInput = {
    id?: SortOrder
    teamMemberId?: SortOrder
    caseId?: SortOrder
    joinedAt?: SortOrder
  }

  export type TeamMembershipMinOrderByAggregateInput = {
    id?: SortOrder
    teamMemberId?: SortOrder
    caseId?: SortOrder
    joinedAt?: SortOrder
  }

  export type ToDoListCountOrderByAggregateInput = {
    id?: SortOrder
    task?: SortOrder
    userId?: SortOrder
    isTaskChecked?: SortOrder
    taskForDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ToDoListMaxOrderByAggregateInput = {
    id?: SortOrder
    task?: SortOrder
    userId?: SortOrder
    isTaskChecked?: SortOrder
    taskForDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ToDoListMinOrderByAggregateInput = {
    id?: SortOrder
    task?: SortOrder
    userId?: SortOrder
    isTaskChecked?: SortOrder
    taskForDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPracticeAreaFilter<$PrismaModel = never> = {
    equals?: $Enums.PracticeArea | EnumPracticeAreaFieldRefInput<$PrismaModel>
    in?: $Enums.PracticeArea[] | ListEnumPracticeAreaFieldRefInput<$PrismaModel>
    notIn?: $Enums.PracticeArea[] | ListEnumPracticeAreaFieldRefInput<$PrismaModel>
    not?: NestedEnumPracticeAreaFilter<$PrismaModel> | $Enums.PracticeArea
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumCaseStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStatus | EnumCaseStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCaseStatusNullableFilter<$PrismaModel> | $Enums.CaseStatus | null
  }

  export type EnummatterPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.matterPriority | EnummatterPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.matterPriority[] | ListEnummatterPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.matterPriority[] | ListEnummatterPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnummatterPriorityFilter<$PrismaModel> | $Enums.matterPriority
  }

  export type EnumCaseStageFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStage | EnumCaseStageFieldRefInput<$PrismaModel>
    in?: $Enums.CaseStage[] | ListEnumCaseStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseStage[] | ListEnumCaseStageFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseStageFilter<$PrismaModel> | $Enums.CaseStage
  }

  export type TeamClientScalarRelationFilter = {
    is?: TeamClientWhereInput
    isNot?: TeamClientWhereInput
  }

  export type TeamAdminScalarRelationFilter = {
    is?: TeamAdminWhereInput
    isNot?: TeamAdminWhereInput
  }

  export type OpponentNullableScalarRelationFilter = {
    is?: OpponentWhereInput | null
    isNot?: OpponentWhereInput | null
  }

  export type CaseTagNullableScalarRelationFilter = {
    is?: CaseTagWhereInput | null
    isNot?: CaseTagWhereInput | null
  }

  export type CaseDocumentNullableScalarRelationFilter = {
    is?: CaseDocumentWhereInput | null
    isNot?: CaseDocumentWhereInput | null
  }

  export type CaseReminderListRelationFilter = {
    every?: CaseReminderWhereInput
    some?: CaseReminderWhereInput
    none?: CaseReminderWhereInput
  }

  export type CaseInvoiceListRelationFilter = {
    every?: CaseInvoiceWhereInput
    some?: CaseInvoiceWhereInput
    none?: CaseInvoiceWhereInput
  }

  export type CaseBillingNullableScalarRelationFilter = {
    is?: CaseBillingWhereInput | null
    isNot?: CaseBillingWhereInput | null
  }

  export type CaseNoteNullableScalarRelationFilter = {
    is?: CaseNoteWhereInput | null
    isNot?: CaseNoteWhereInput | null
  }

  export type CaseReminderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CaseInvoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CaseCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    practiseArea?: SortOrder
    arrivalDate?: SortOrder
    status?: SortOrder
    matterPriority?: SortOrder
    internalRefNumber?: SortOrder
    filedDate?: SortOrder
    closedDate?: SortOrder
    estimatedCloseDate?: SortOrder
    stage?: SortOrder
    clientId?: SortOrder
    adminId?: SortOrder
    opponentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    practiseArea?: SortOrder
    arrivalDate?: SortOrder
    status?: SortOrder
    matterPriority?: SortOrder
    internalRefNumber?: SortOrder
    filedDate?: SortOrder
    closedDate?: SortOrder
    estimatedCloseDate?: SortOrder
    stage?: SortOrder
    clientId?: SortOrder
    adminId?: SortOrder
    opponentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    practiseArea?: SortOrder
    arrivalDate?: SortOrder
    status?: SortOrder
    matterPriority?: SortOrder
    internalRefNumber?: SortOrder
    filedDate?: SortOrder
    closedDate?: SortOrder
    estimatedCloseDate?: SortOrder
    stage?: SortOrder
    clientId?: SortOrder
    adminId?: SortOrder
    opponentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPracticeAreaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PracticeArea | EnumPracticeAreaFieldRefInput<$PrismaModel>
    in?: $Enums.PracticeArea[] | ListEnumPracticeAreaFieldRefInput<$PrismaModel>
    notIn?: $Enums.PracticeArea[] | ListEnumPracticeAreaFieldRefInput<$PrismaModel>
    not?: NestedEnumPracticeAreaWithAggregatesFilter<$PrismaModel> | $Enums.PracticeArea
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPracticeAreaFilter<$PrismaModel>
    _max?: NestedEnumPracticeAreaFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumCaseStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStatus | EnumCaseStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCaseStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.CaseStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCaseStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumCaseStatusNullableFilter<$PrismaModel>
  }

  export type EnummatterPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.matterPriority | EnummatterPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.matterPriority[] | ListEnummatterPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.matterPriority[] | ListEnummatterPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnummatterPriorityWithAggregatesFilter<$PrismaModel> | $Enums.matterPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnummatterPriorityFilter<$PrismaModel>
    _max?: NestedEnummatterPriorityFilter<$PrismaModel>
  }

  export type EnumCaseStageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStage | EnumCaseStageFieldRefInput<$PrismaModel>
    in?: $Enums.CaseStage[] | ListEnumCaseStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseStage[] | ListEnumCaseStageFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseStageWithAggregatesFilter<$PrismaModel> | $Enums.CaseStage
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCaseStageFilter<$PrismaModel>
    _max?: NestedEnumCaseStageFilter<$PrismaModel>
  }

  export type CaseNoteCountOrderByAggregateInput = {
    id?: SortOrder
    note?: SortOrder
    caseId?: SortOrder
    createdAt?: SortOrder
  }

  export type CaseNoteMaxOrderByAggregateInput = {
    id?: SortOrder
    note?: SortOrder
    caseId?: SortOrder
    createdAt?: SortOrder
  }

  export type CaseNoteMinOrderByAggregateInput = {
    id?: SortOrder
    note?: SortOrder
    caseId?: SortOrder
    createdAt?: SortOrder
  }

  export type CaseDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    documentUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    documentUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    documentUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseReminderCountOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    reminderDate?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseReminderMaxOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    reminderDate?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseReminderMinOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    reminderDate?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CaseInvoiceCountOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseInvoiceAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type CaseInvoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseInvoiceMinOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseInvoiceSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumCaseRateTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseRateType | EnumCaseRateTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CaseRateType[] | ListEnumCaseRateTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseRateType[] | ListEnumCaseRateTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseRateTypeFilter<$PrismaModel> | $Enums.CaseRateType
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type CaseBillingCountOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    rateType?: SortOrder
    paymentStatus?: SortOrder
    paymentMethod?: SortOrder
    paymentDate?: SortOrder
    billingNote?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseBillingAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type CaseBillingMaxOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    rateType?: SortOrder
    paymentStatus?: SortOrder
    paymentMethod?: SortOrder
    paymentDate?: SortOrder
    billingNote?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseBillingMinOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    rateType?: SortOrder
    paymentStatus?: SortOrder
    paymentMethod?: SortOrder
    paymentDate?: SortOrder
    billingNote?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseBillingSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumCaseRateTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseRateType | EnumCaseRateTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CaseRateType[] | ListEnumCaseRateTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseRateType[] | ListEnumCaseRateTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseRateTypeWithAggregatesFilter<$PrismaModel> | $Enums.CaseRateType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCaseRateTypeFilter<$PrismaModel>
    _max?: NestedEnumCaseRateTypeFilter<$PrismaModel>
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    initialContent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    initialContent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    initialContent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type SessionCreateNestedOneWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput
    connect?: SessionWhereUniqueInput
  }

  export type AddressCreateNestedOneWithoutUserInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput
    connect?: AddressWhereUniqueInput
  }

  export type TeamAdminCreateNestedOneWithoutUserInput = {
    create?: XOR<TeamAdminCreateWithoutUserInput, TeamAdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeamAdminCreateOrConnectWithoutUserInput
    connect?: TeamAdminWhereUniqueInput
  }

  export type TeamMemberCreateNestedOneWithoutUserInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput
    connect?: TeamMemberWhereUniqueInput
  }

  export type TeamClientCreateNestedOneWithoutUserInput = {
    create?: XOR<TeamClientCreateWithoutUserInput, TeamClientUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeamClientCreateOrConnectWithoutUserInput
    connect?: TeamClientWhereUniqueInput
  }

  export type DocumentCreateNestedManyWithoutUserInput = {
    create?: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput> | DocumentCreateWithoutUserInput[] | DocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUserInput | DocumentCreateOrConnectWithoutUserInput[]
    createMany?: DocumentCreateManyUserInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ToDoListCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ToDoListCreateWithoutCreatedByInput, ToDoListUncheckedCreateWithoutCreatedByInput> | ToDoListCreateWithoutCreatedByInput[] | ToDoListUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ToDoListCreateOrConnectWithoutCreatedByInput | ToDoListCreateOrConnectWithoutCreatedByInput[]
    createMany?: ToDoListCreateManyCreatedByInputEnvelope
    connect?: ToDoListWhereUniqueInput | ToDoListWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput
    connect?: SessionWhereUniqueInput
  }

  export type AddressUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput
    connect?: AddressWhereUniqueInput
  }

  export type TeamAdminUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<TeamAdminCreateWithoutUserInput, TeamAdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeamAdminCreateOrConnectWithoutUserInput
    connect?: TeamAdminWhereUniqueInput
  }

  export type TeamMemberUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput
    connect?: TeamMemberWhereUniqueInput
  }

  export type TeamClientUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<TeamClientCreateWithoutUserInput, TeamClientUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeamClientCreateOrConnectWithoutUserInput
    connect?: TeamClientWhereUniqueInput
  }

  export type DocumentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput> | DocumentCreateWithoutUserInput[] | DocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUserInput | DocumentCreateOrConnectWithoutUserInput[]
    createMany?: DocumentCreateManyUserInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ToDoListUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ToDoListCreateWithoutCreatedByInput, ToDoListUncheckedCreateWithoutCreatedByInput> | ToDoListCreateWithoutCreatedByInput[] | ToDoListUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ToDoListCreateOrConnectWithoutCreatedByInput | ToDoListCreateOrConnectWithoutCreatedByInput[]
    createMany?: ToDoListCreateManyCreatedByInputEnvelope
    connect?: ToDoListWhereUniqueInput | ToDoListWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type SessionUpdateOneWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput
    upsert?: SessionUpsertWithoutUserInput
    disconnect?: SessionWhereInput | boolean
    delete?: SessionWhereInput | boolean
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutUserInput, SessionUpdateWithoutUserInput>, SessionUncheckedUpdateWithoutUserInput>
  }

  export type AddressUpdateOneWithoutUserNestedInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput
    upsert?: AddressUpsertWithoutUserInput
    disconnect?: AddressWhereInput | boolean
    delete?: AddressWhereInput | boolean
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutUserInput, AddressUpdateWithoutUserInput>, AddressUncheckedUpdateWithoutUserInput>
  }

  export type TeamAdminUpdateOneWithoutUserNestedInput = {
    create?: XOR<TeamAdminCreateWithoutUserInput, TeamAdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeamAdminCreateOrConnectWithoutUserInput
    upsert?: TeamAdminUpsertWithoutUserInput
    disconnect?: TeamAdminWhereInput | boolean
    delete?: TeamAdminWhereInput | boolean
    connect?: TeamAdminWhereUniqueInput
    update?: XOR<XOR<TeamAdminUpdateToOneWithWhereWithoutUserInput, TeamAdminUpdateWithoutUserInput>, TeamAdminUncheckedUpdateWithoutUserInput>
  }

  export type TeamMemberUpdateOneWithoutUserNestedInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput
    upsert?: TeamMemberUpsertWithoutUserInput
    disconnect?: TeamMemberWhereInput | boolean
    delete?: TeamMemberWhereInput | boolean
    connect?: TeamMemberWhereUniqueInput
    update?: XOR<XOR<TeamMemberUpdateToOneWithWhereWithoutUserInput, TeamMemberUpdateWithoutUserInput>, TeamMemberUncheckedUpdateWithoutUserInput>
  }

  export type TeamClientUpdateOneWithoutUserNestedInput = {
    create?: XOR<TeamClientCreateWithoutUserInput, TeamClientUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeamClientCreateOrConnectWithoutUserInput
    upsert?: TeamClientUpsertWithoutUserInput
    disconnect?: TeamClientWhereInput | boolean
    delete?: TeamClientWhereInput | boolean
    connect?: TeamClientWhereUniqueInput
    update?: XOR<XOR<TeamClientUpdateToOneWithWhereWithoutUserInput, TeamClientUpdateWithoutUserInput>, TeamClientUncheckedUpdateWithoutUserInput>
  }

  export type DocumentUpdateManyWithoutUserNestedInput = {
    create?: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput> | DocumentCreateWithoutUserInput[] | DocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUserInput | DocumentCreateOrConnectWithoutUserInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUserInput | DocumentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DocumentCreateManyUserInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUserInput | DocumentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUserInput | DocumentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ToDoListUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ToDoListCreateWithoutCreatedByInput, ToDoListUncheckedCreateWithoutCreatedByInput> | ToDoListCreateWithoutCreatedByInput[] | ToDoListUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ToDoListCreateOrConnectWithoutCreatedByInput | ToDoListCreateOrConnectWithoutCreatedByInput[]
    upsert?: ToDoListUpsertWithWhereUniqueWithoutCreatedByInput | ToDoListUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ToDoListCreateManyCreatedByInputEnvelope
    set?: ToDoListWhereUniqueInput | ToDoListWhereUniqueInput[]
    disconnect?: ToDoListWhereUniqueInput | ToDoListWhereUniqueInput[]
    delete?: ToDoListWhereUniqueInput | ToDoListWhereUniqueInput[]
    connect?: ToDoListWhereUniqueInput | ToDoListWhereUniqueInput[]
    update?: ToDoListUpdateWithWhereUniqueWithoutCreatedByInput | ToDoListUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ToDoListUpdateManyWithWhereWithoutCreatedByInput | ToDoListUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ToDoListScalarWhereInput | ToDoListScalarWhereInput[]
  }

  export type SessionUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput
    upsert?: SessionUpsertWithoutUserInput
    disconnect?: SessionWhereInput | boolean
    delete?: SessionWhereInput | boolean
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutUserInput, SessionUpdateWithoutUserInput>, SessionUncheckedUpdateWithoutUserInput>
  }

  export type AddressUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput
    upsert?: AddressUpsertWithoutUserInput
    disconnect?: AddressWhereInput | boolean
    delete?: AddressWhereInput | boolean
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutUserInput, AddressUpdateWithoutUserInput>, AddressUncheckedUpdateWithoutUserInput>
  }

  export type TeamAdminUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<TeamAdminCreateWithoutUserInput, TeamAdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeamAdminCreateOrConnectWithoutUserInput
    upsert?: TeamAdminUpsertWithoutUserInput
    disconnect?: TeamAdminWhereInput | boolean
    delete?: TeamAdminWhereInput | boolean
    connect?: TeamAdminWhereUniqueInput
    update?: XOR<XOR<TeamAdminUpdateToOneWithWhereWithoutUserInput, TeamAdminUpdateWithoutUserInput>, TeamAdminUncheckedUpdateWithoutUserInput>
  }

  export type TeamMemberUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput
    upsert?: TeamMemberUpsertWithoutUserInput
    disconnect?: TeamMemberWhereInput | boolean
    delete?: TeamMemberWhereInput | boolean
    connect?: TeamMemberWhereUniqueInput
    update?: XOR<XOR<TeamMemberUpdateToOneWithWhereWithoutUserInput, TeamMemberUpdateWithoutUserInput>, TeamMemberUncheckedUpdateWithoutUserInput>
  }

  export type TeamClientUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<TeamClientCreateWithoutUserInput, TeamClientUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeamClientCreateOrConnectWithoutUserInput
    upsert?: TeamClientUpsertWithoutUserInput
    disconnect?: TeamClientWhereInput | boolean
    delete?: TeamClientWhereInput | boolean
    connect?: TeamClientWhereUniqueInput
    update?: XOR<XOR<TeamClientUpdateToOneWithWhereWithoutUserInput, TeamClientUpdateWithoutUserInput>, TeamClientUncheckedUpdateWithoutUserInput>
  }

  export type DocumentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput> | DocumentCreateWithoutUserInput[] | DocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUserInput | DocumentCreateOrConnectWithoutUserInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUserInput | DocumentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DocumentCreateManyUserInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUserInput | DocumentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUserInput | DocumentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ToDoListUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ToDoListCreateWithoutCreatedByInput, ToDoListUncheckedCreateWithoutCreatedByInput> | ToDoListCreateWithoutCreatedByInput[] | ToDoListUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ToDoListCreateOrConnectWithoutCreatedByInput | ToDoListCreateOrConnectWithoutCreatedByInput[]
    upsert?: ToDoListUpsertWithWhereUniqueWithoutCreatedByInput | ToDoListUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ToDoListCreateManyCreatedByInputEnvelope
    set?: ToDoListWhereUniqueInput | ToDoListWhereUniqueInput[]
    disconnect?: ToDoListWhereUniqueInput | ToDoListWhereUniqueInput[]
    delete?: ToDoListWhereUniqueInput | ToDoListWhereUniqueInput[]
    connect?: ToDoListWhereUniqueInput | ToDoListWhereUniqueInput[]
    update?: ToDoListUpdateWithWhereUniqueWithoutCreatedByInput | ToDoListUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ToDoListUpdateManyWithWhereWithoutCreatedByInput | ToDoListUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ToDoListScalarWhereInput | ToDoListScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserAddressInput = {
    create?: XOR<UserCreateWithoutUserAddressInput, UserUncheckedCreateWithoutUserAddressInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserAddressInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutUserAddressNestedInput = {
    create?: XOR<UserCreateWithoutUserAddressInput, UserUncheckedCreateWithoutUserAddressInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserAddressInput
    upsert?: UserUpsertWithoutUserAddressInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserAddressInput, UserUpdateWithoutUserAddressInput>, UserUncheckedUpdateWithoutUserAddressInput>
  }

  export type UserCreateNestedOneWithoutSessionInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionNestedInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    upsert?: UserUpsertWithoutSessionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionInput, UserUpdateWithoutSessionInput>, UserUncheckedUpdateWithoutSessionInput>
  }

  export type UserCreateNestedOneWithoutTeamAdminInput = {
    create?: XOR<UserCreateWithoutTeamAdminInput, UserUncheckedCreateWithoutTeamAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamAdminInput
    connect?: UserWhereUniqueInput
  }

  export type CaseCreateNestedManyWithoutAdminInput = {
    create?: XOR<CaseCreateWithoutAdminInput, CaseUncheckedCreateWithoutAdminInput> | CaseCreateWithoutAdminInput[] | CaseUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutAdminInput | CaseCreateOrConnectWithoutAdminInput[]
    createMany?: CaseCreateManyAdminInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type CaseUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<CaseCreateWithoutAdminInput, CaseUncheckedCreateWithoutAdminInput> | CaseCreateWithoutAdminInput[] | CaseUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutAdminInput | CaseCreateOrConnectWithoutAdminInput[]
    createMany?: CaseCreateManyAdminInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneWithoutTeamAdminNestedInput = {
    create?: XOR<UserCreateWithoutTeamAdminInput, UserUncheckedCreateWithoutTeamAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamAdminInput
    upsert?: UserUpsertWithoutTeamAdminInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeamAdminInput, UserUpdateWithoutTeamAdminInput>, UserUncheckedUpdateWithoutTeamAdminInput>
  }

  export type CaseUpdateManyWithoutAdminNestedInput = {
    create?: XOR<CaseCreateWithoutAdminInput, CaseUncheckedCreateWithoutAdminInput> | CaseCreateWithoutAdminInput[] | CaseUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutAdminInput | CaseCreateOrConnectWithoutAdminInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutAdminInput | CaseUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: CaseCreateManyAdminInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutAdminInput | CaseUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutAdminInput | CaseUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type CaseUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<CaseCreateWithoutAdminInput, CaseUncheckedCreateWithoutAdminInput> | CaseCreateWithoutAdminInput[] | CaseUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutAdminInput | CaseCreateOrConnectWithoutAdminInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutAdminInput | CaseUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: CaseCreateManyAdminInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutAdminInput | CaseUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutAdminInput | CaseUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTeamMemberInput = {
    create?: XOR<UserCreateWithoutTeamMemberInput, UserUncheckedCreateWithoutTeamMemberInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamMemberInput
    connect?: UserWhereUniqueInput
  }

  export type TeamMembershipCreateNestedManyWithoutTeamMemberInput = {
    create?: XOR<TeamMembershipCreateWithoutTeamMemberInput, TeamMembershipUncheckedCreateWithoutTeamMemberInput> | TeamMembershipCreateWithoutTeamMemberInput[] | TeamMembershipUncheckedCreateWithoutTeamMemberInput[]
    connectOrCreate?: TeamMembershipCreateOrConnectWithoutTeamMemberInput | TeamMembershipCreateOrConnectWithoutTeamMemberInput[]
    createMany?: TeamMembershipCreateManyTeamMemberInputEnvelope
    connect?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
  }

  export type TeamMembershipUncheckedCreateNestedManyWithoutTeamMemberInput = {
    create?: XOR<TeamMembershipCreateWithoutTeamMemberInput, TeamMembershipUncheckedCreateWithoutTeamMemberInput> | TeamMembershipCreateWithoutTeamMemberInput[] | TeamMembershipUncheckedCreateWithoutTeamMemberInput[]
    connectOrCreate?: TeamMembershipCreateOrConnectWithoutTeamMemberInput | TeamMembershipCreateOrConnectWithoutTeamMemberInput[]
    createMany?: TeamMembershipCreateManyTeamMemberInputEnvelope
    connect?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutTeamMemberNestedInput = {
    create?: XOR<UserCreateWithoutTeamMemberInput, UserUncheckedCreateWithoutTeamMemberInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamMemberInput
    upsert?: UserUpsertWithoutTeamMemberInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeamMemberInput, UserUpdateWithoutTeamMemberInput>, UserUncheckedUpdateWithoutTeamMemberInput>
  }

  export type TeamMembershipUpdateManyWithoutTeamMemberNestedInput = {
    create?: XOR<TeamMembershipCreateWithoutTeamMemberInput, TeamMembershipUncheckedCreateWithoutTeamMemberInput> | TeamMembershipCreateWithoutTeamMemberInput[] | TeamMembershipUncheckedCreateWithoutTeamMemberInput[]
    connectOrCreate?: TeamMembershipCreateOrConnectWithoutTeamMemberInput | TeamMembershipCreateOrConnectWithoutTeamMemberInput[]
    upsert?: TeamMembershipUpsertWithWhereUniqueWithoutTeamMemberInput | TeamMembershipUpsertWithWhereUniqueWithoutTeamMemberInput[]
    createMany?: TeamMembershipCreateManyTeamMemberInputEnvelope
    set?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
    disconnect?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
    delete?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
    connect?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
    update?: TeamMembershipUpdateWithWhereUniqueWithoutTeamMemberInput | TeamMembershipUpdateWithWhereUniqueWithoutTeamMemberInput[]
    updateMany?: TeamMembershipUpdateManyWithWhereWithoutTeamMemberInput | TeamMembershipUpdateManyWithWhereWithoutTeamMemberInput[]
    deleteMany?: TeamMembershipScalarWhereInput | TeamMembershipScalarWhereInput[]
  }

  export type TeamMembershipUncheckedUpdateManyWithoutTeamMemberNestedInput = {
    create?: XOR<TeamMembershipCreateWithoutTeamMemberInput, TeamMembershipUncheckedCreateWithoutTeamMemberInput> | TeamMembershipCreateWithoutTeamMemberInput[] | TeamMembershipUncheckedCreateWithoutTeamMemberInput[]
    connectOrCreate?: TeamMembershipCreateOrConnectWithoutTeamMemberInput | TeamMembershipCreateOrConnectWithoutTeamMemberInput[]
    upsert?: TeamMembershipUpsertWithWhereUniqueWithoutTeamMemberInput | TeamMembershipUpsertWithWhereUniqueWithoutTeamMemberInput[]
    createMany?: TeamMembershipCreateManyTeamMemberInputEnvelope
    set?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
    disconnect?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
    delete?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
    connect?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
    update?: TeamMembershipUpdateWithWhereUniqueWithoutTeamMemberInput | TeamMembershipUpdateWithWhereUniqueWithoutTeamMemberInput[]
    updateMany?: TeamMembershipUpdateManyWithWhereWithoutTeamMemberInput | TeamMembershipUpdateManyWithWhereWithoutTeamMemberInput[]
    deleteMany?: TeamMembershipScalarWhereInput | TeamMembershipScalarWhereInput[]
  }

  export type CaseCreateNestedOneWithoutOpponentInput = {
    create?: XOR<CaseCreateWithoutOpponentInput, CaseUncheckedCreateWithoutOpponentInput>
    connectOrCreate?: CaseCreateOrConnectWithoutOpponentInput
    connect?: CaseWhereUniqueInput
  }

  export type CaseUncheckedCreateNestedOneWithoutOpponentInput = {
    create?: XOR<CaseCreateWithoutOpponentInput, CaseUncheckedCreateWithoutOpponentInput>
    connectOrCreate?: CaseCreateOrConnectWithoutOpponentInput
    connect?: CaseWhereUniqueInput
  }

  export type CaseUpdateOneWithoutOpponentNestedInput = {
    create?: XOR<CaseCreateWithoutOpponentInput, CaseUncheckedCreateWithoutOpponentInput>
    connectOrCreate?: CaseCreateOrConnectWithoutOpponentInput
    upsert?: CaseUpsertWithoutOpponentInput
    disconnect?: CaseWhereInput | boolean
    delete?: CaseWhereInput | boolean
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutOpponentInput, CaseUpdateWithoutOpponentInput>, CaseUncheckedUpdateWithoutOpponentInput>
  }

  export type CaseUncheckedUpdateOneWithoutOpponentNestedInput = {
    create?: XOR<CaseCreateWithoutOpponentInput, CaseUncheckedCreateWithoutOpponentInput>
    connectOrCreate?: CaseCreateOrConnectWithoutOpponentInput
    upsert?: CaseUpsertWithoutOpponentInput
    disconnect?: CaseWhereInput | boolean
    delete?: CaseWhereInput | boolean
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutOpponentInput, CaseUpdateWithoutOpponentInput>, CaseUncheckedUpdateWithoutOpponentInput>
  }

  export type UserCreateNestedOneWithoutTeamClientInput = {
    create?: XOR<UserCreateWithoutTeamClientInput, UserUncheckedCreateWithoutTeamClientInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamClientInput
    connect?: UserWhereUniqueInput
  }

  export type CaseCreateNestedManyWithoutClientInput = {
    create?: XOR<CaseCreateWithoutClientInput, CaseUncheckedCreateWithoutClientInput> | CaseCreateWithoutClientInput[] | CaseUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutClientInput | CaseCreateOrConnectWithoutClientInput[]
    createMany?: CaseCreateManyClientInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type CaseUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<CaseCreateWithoutClientInput, CaseUncheckedCreateWithoutClientInput> | CaseCreateWithoutClientInput[] | CaseUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutClientInput | CaseCreateOrConnectWithoutClientInput[]
    createMany?: CaseCreateManyClientInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutTeamClientNestedInput = {
    create?: XOR<UserCreateWithoutTeamClientInput, UserUncheckedCreateWithoutTeamClientInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamClientInput
    upsert?: UserUpsertWithoutTeamClientInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeamClientInput, UserUpdateWithoutTeamClientInput>, UserUncheckedUpdateWithoutTeamClientInput>
  }

  export type CaseUpdateManyWithoutClientNestedInput = {
    create?: XOR<CaseCreateWithoutClientInput, CaseUncheckedCreateWithoutClientInput> | CaseCreateWithoutClientInput[] | CaseUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutClientInput | CaseCreateOrConnectWithoutClientInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutClientInput | CaseUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: CaseCreateManyClientInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutClientInput | CaseUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutClientInput | CaseUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type CaseUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<CaseCreateWithoutClientInput, CaseUncheckedCreateWithoutClientInput> | CaseCreateWithoutClientInput[] | CaseUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutClientInput | CaseCreateOrConnectWithoutClientInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutClientInput | CaseUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: CaseCreateManyClientInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutClientInput | CaseUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutClientInput | CaseUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type CaseCreateNestedOneWithoutCaseTagInput = {
    create?: XOR<CaseCreateWithoutCaseTagInput, CaseUncheckedCreateWithoutCaseTagInput>
    connectOrCreate?: CaseCreateOrConnectWithoutCaseTagInput
    connect?: CaseWhereUniqueInput
  }

  export type CaseUpdateOneRequiredWithoutCaseTagNestedInput = {
    create?: XOR<CaseCreateWithoutCaseTagInput, CaseUncheckedCreateWithoutCaseTagInput>
    connectOrCreate?: CaseCreateOrConnectWithoutCaseTagInput
    upsert?: CaseUpsertWithoutCaseTagInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutCaseTagInput, CaseUpdateWithoutCaseTagInput>, CaseUncheckedUpdateWithoutCaseTagInput>
  }

  export type TeamMemberCreateNestedOneWithoutMembershipsInput = {
    create?: XOR<TeamMemberCreateWithoutMembershipsInput, TeamMemberUncheckedCreateWithoutMembershipsInput>
    connectOrCreate?: TeamMemberCreateOrConnectWithoutMembershipsInput
    connect?: TeamMemberWhereUniqueInput
  }

  export type CaseCreateNestedOneWithoutMembersInput = {
    create?: XOR<CaseCreateWithoutMembersInput, CaseUncheckedCreateWithoutMembersInput>
    connectOrCreate?: CaseCreateOrConnectWithoutMembersInput
    connect?: CaseWhereUniqueInput
  }

  export type TeamMemberUpdateOneRequiredWithoutMembershipsNestedInput = {
    create?: XOR<TeamMemberCreateWithoutMembershipsInput, TeamMemberUncheckedCreateWithoutMembershipsInput>
    connectOrCreate?: TeamMemberCreateOrConnectWithoutMembershipsInput
    upsert?: TeamMemberUpsertWithoutMembershipsInput
    connect?: TeamMemberWhereUniqueInput
    update?: XOR<XOR<TeamMemberUpdateToOneWithWhereWithoutMembershipsInput, TeamMemberUpdateWithoutMembershipsInput>, TeamMemberUncheckedUpdateWithoutMembershipsInput>
  }

  export type CaseUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<CaseCreateWithoutMembersInput, CaseUncheckedCreateWithoutMembersInput>
    connectOrCreate?: CaseCreateOrConnectWithoutMembersInput
    upsert?: CaseUpsertWithoutMembersInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutMembersInput, CaseUpdateWithoutMembersInput>, CaseUncheckedUpdateWithoutMembersInput>
  }

  export type UserCreateNestedOneWithoutToDoListInput = {
    create?: XOR<UserCreateWithoutToDoListInput, UserUncheckedCreateWithoutToDoListInput>
    connectOrCreate?: UserCreateOrConnectWithoutToDoListInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutToDoListNestedInput = {
    create?: XOR<UserCreateWithoutToDoListInput, UserUncheckedCreateWithoutToDoListInput>
    connectOrCreate?: UserCreateOrConnectWithoutToDoListInput
    upsert?: UserUpsertWithoutToDoListInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutToDoListInput, UserUpdateWithoutToDoListInput>, UserUncheckedUpdateWithoutToDoListInput>
  }

  export type TeamClientCreateNestedOneWithoutCasesInput = {
    create?: XOR<TeamClientCreateWithoutCasesInput, TeamClientUncheckedCreateWithoutCasesInput>
    connectOrCreate?: TeamClientCreateOrConnectWithoutCasesInput
    connect?: TeamClientWhereUniqueInput
  }

  export type TeamAdminCreateNestedOneWithoutCasesInput = {
    create?: XOR<TeamAdminCreateWithoutCasesInput, TeamAdminUncheckedCreateWithoutCasesInput>
    connectOrCreate?: TeamAdminCreateOrConnectWithoutCasesInput
    connect?: TeamAdminWhereUniqueInput
  }

  export type TeamMembershipCreateNestedManyWithoutCaseInput = {
    create?: XOR<TeamMembershipCreateWithoutCaseInput, TeamMembershipUncheckedCreateWithoutCaseInput> | TeamMembershipCreateWithoutCaseInput[] | TeamMembershipUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: TeamMembershipCreateOrConnectWithoutCaseInput | TeamMembershipCreateOrConnectWithoutCaseInput[]
    createMany?: TeamMembershipCreateManyCaseInputEnvelope
    connect?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
  }

  export type OpponentCreateNestedOneWithoutCaseInput = {
    create?: XOR<OpponentCreateWithoutCaseInput, OpponentUncheckedCreateWithoutCaseInput>
    connectOrCreate?: OpponentCreateOrConnectWithoutCaseInput
    connect?: OpponentWhereUniqueInput
  }

  export type CaseTagCreateNestedOneWithoutCaseInput = {
    create?: XOR<CaseTagCreateWithoutCaseInput, CaseTagUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CaseTagCreateOrConnectWithoutCaseInput
    connect?: CaseTagWhereUniqueInput
  }

  export type CaseDocumentCreateNestedOneWithoutCaseInput = {
    create?: XOR<CaseDocumentCreateWithoutCaseInput, CaseDocumentUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CaseDocumentCreateOrConnectWithoutCaseInput
    connect?: CaseDocumentWhereUniqueInput
  }

  export type CaseReminderCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseReminderCreateWithoutCaseInput, CaseReminderUncheckedCreateWithoutCaseInput> | CaseReminderCreateWithoutCaseInput[] | CaseReminderUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseReminderCreateOrConnectWithoutCaseInput | CaseReminderCreateOrConnectWithoutCaseInput[]
    createMany?: CaseReminderCreateManyCaseInputEnvelope
    connect?: CaseReminderWhereUniqueInput | CaseReminderWhereUniqueInput[]
  }

  export type CaseInvoiceCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseInvoiceCreateWithoutCaseInput, CaseInvoiceUncheckedCreateWithoutCaseInput> | CaseInvoiceCreateWithoutCaseInput[] | CaseInvoiceUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseInvoiceCreateOrConnectWithoutCaseInput | CaseInvoiceCreateOrConnectWithoutCaseInput[]
    createMany?: CaseInvoiceCreateManyCaseInputEnvelope
    connect?: CaseInvoiceWhereUniqueInput | CaseInvoiceWhereUniqueInput[]
  }

  export type CaseBillingCreateNestedOneWithoutCaseInput = {
    create?: XOR<CaseBillingCreateWithoutCaseInput, CaseBillingUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CaseBillingCreateOrConnectWithoutCaseInput
    connect?: CaseBillingWhereUniqueInput
  }

  export type CaseNoteCreateNestedOneWithoutCaseInput = {
    create?: XOR<CaseNoteCreateWithoutCaseInput, CaseNoteUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CaseNoteCreateOrConnectWithoutCaseInput
    connect?: CaseNoteWhereUniqueInput
  }

  export type TeamMembershipUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<TeamMembershipCreateWithoutCaseInput, TeamMembershipUncheckedCreateWithoutCaseInput> | TeamMembershipCreateWithoutCaseInput[] | TeamMembershipUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: TeamMembershipCreateOrConnectWithoutCaseInput | TeamMembershipCreateOrConnectWithoutCaseInput[]
    createMany?: TeamMembershipCreateManyCaseInputEnvelope
    connect?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
  }

  export type CaseTagUncheckedCreateNestedOneWithoutCaseInput = {
    create?: XOR<CaseTagCreateWithoutCaseInput, CaseTagUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CaseTagCreateOrConnectWithoutCaseInput
    connect?: CaseTagWhereUniqueInput
  }

  export type CaseDocumentUncheckedCreateNestedOneWithoutCaseInput = {
    create?: XOR<CaseDocumentCreateWithoutCaseInput, CaseDocumentUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CaseDocumentCreateOrConnectWithoutCaseInput
    connect?: CaseDocumentWhereUniqueInput
  }

  export type CaseReminderUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseReminderCreateWithoutCaseInput, CaseReminderUncheckedCreateWithoutCaseInput> | CaseReminderCreateWithoutCaseInput[] | CaseReminderUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseReminderCreateOrConnectWithoutCaseInput | CaseReminderCreateOrConnectWithoutCaseInput[]
    createMany?: CaseReminderCreateManyCaseInputEnvelope
    connect?: CaseReminderWhereUniqueInput | CaseReminderWhereUniqueInput[]
  }

  export type CaseInvoiceUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseInvoiceCreateWithoutCaseInput, CaseInvoiceUncheckedCreateWithoutCaseInput> | CaseInvoiceCreateWithoutCaseInput[] | CaseInvoiceUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseInvoiceCreateOrConnectWithoutCaseInput | CaseInvoiceCreateOrConnectWithoutCaseInput[]
    createMany?: CaseInvoiceCreateManyCaseInputEnvelope
    connect?: CaseInvoiceWhereUniqueInput | CaseInvoiceWhereUniqueInput[]
  }

  export type CaseBillingUncheckedCreateNestedOneWithoutCaseInput = {
    create?: XOR<CaseBillingCreateWithoutCaseInput, CaseBillingUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CaseBillingCreateOrConnectWithoutCaseInput
    connect?: CaseBillingWhereUniqueInput
  }

  export type CaseNoteUncheckedCreateNestedOneWithoutCaseInput = {
    create?: XOR<CaseNoteCreateWithoutCaseInput, CaseNoteUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CaseNoteCreateOrConnectWithoutCaseInput
    connect?: CaseNoteWhereUniqueInput
  }

  export type EnumPracticeAreaFieldUpdateOperationsInput = {
    set?: $Enums.PracticeArea
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableEnumCaseStatusFieldUpdateOperationsInput = {
    set?: $Enums.CaseStatus | null
  }

  export type EnummatterPriorityFieldUpdateOperationsInput = {
    set?: $Enums.matterPriority
  }

  export type EnumCaseStageFieldUpdateOperationsInput = {
    set?: $Enums.CaseStage
  }

  export type TeamClientUpdateOneRequiredWithoutCasesNestedInput = {
    create?: XOR<TeamClientCreateWithoutCasesInput, TeamClientUncheckedCreateWithoutCasesInput>
    connectOrCreate?: TeamClientCreateOrConnectWithoutCasesInput
    upsert?: TeamClientUpsertWithoutCasesInput
    connect?: TeamClientWhereUniqueInput
    update?: XOR<XOR<TeamClientUpdateToOneWithWhereWithoutCasesInput, TeamClientUpdateWithoutCasesInput>, TeamClientUncheckedUpdateWithoutCasesInput>
  }

  export type TeamAdminUpdateOneRequiredWithoutCasesNestedInput = {
    create?: XOR<TeamAdminCreateWithoutCasesInput, TeamAdminUncheckedCreateWithoutCasesInput>
    connectOrCreate?: TeamAdminCreateOrConnectWithoutCasesInput
    upsert?: TeamAdminUpsertWithoutCasesInput
    connect?: TeamAdminWhereUniqueInput
    update?: XOR<XOR<TeamAdminUpdateToOneWithWhereWithoutCasesInput, TeamAdminUpdateWithoutCasesInput>, TeamAdminUncheckedUpdateWithoutCasesInput>
  }

  export type TeamMembershipUpdateManyWithoutCaseNestedInput = {
    create?: XOR<TeamMembershipCreateWithoutCaseInput, TeamMembershipUncheckedCreateWithoutCaseInput> | TeamMembershipCreateWithoutCaseInput[] | TeamMembershipUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: TeamMembershipCreateOrConnectWithoutCaseInput | TeamMembershipCreateOrConnectWithoutCaseInput[]
    upsert?: TeamMembershipUpsertWithWhereUniqueWithoutCaseInput | TeamMembershipUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: TeamMembershipCreateManyCaseInputEnvelope
    set?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
    disconnect?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
    delete?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
    connect?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
    update?: TeamMembershipUpdateWithWhereUniqueWithoutCaseInput | TeamMembershipUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: TeamMembershipUpdateManyWithWhereWithoutCaseInput | TeamMembershipUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: TeamMembershipScalarWhereInput | TeamMembershipScalarWhereInput[]
  }

  export type OpponentUpdateOneWithoutCaseNestedInput = {
    create?: XOR<OpponentCreateWithoutCaseInput, OpponentUncheckedCreateWithoutCaseInput>
    connectOrCreate?: OpponentCreateOrConnectWithoutCaseInput
    upsert?: OpponentUpsertWithoutCaseInput
    disconnect?: OpponentWhereInput | boolean
    delete?: OpponentWhereInput | boolean
    connect?: OpponentWhereUniqueInput
    update?: XOR<XOR<OpponentUpdateToOneWithWhereWithoutCaseInput, OpponentUpdateWithoutCaseInput>, OpponentUncheckedUpdateWithoutCaseInput>
  }

  export type CaseTagUpdateOneWithoutCaseNestedInput = {
    create?: XOR<CaseTagCreateWithoutCaseInput, CaseTagUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CaseTagCreateOrConnectWithoutCaseInput
    upsert?: CaseTagUpsertWithoutCaseInput
    disconnect?: CaseTagWhereInput | boolean
    delete?: CaseTagWhereInput | boolean
    connect?: CaseTagWhereUniqueInput
    update?: XOR<XOR<CaseTagUpdateToOneWithWhereWithoutCaseInput, CaseTagUpdateWithoutCaseInput>, CaseTagUncheckedUpdateWithoutCaseInput>
  }

  export type CaseDocumentUpdateOneWithoutCaseNestedInput = {
    create?: XOR<CaseDocumentCreateWithoutCaseInput, CaseDocumentUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CaseDocumentCreateOrConnectWithoutCaseInput
    upsert?: CaseDocumentUpsertWithoutCaseInput
    disconnect?: CaseDocumentWhereInput | boolean
    delete?: CaseDocumentWhereInput | boolean
    connect?: CaseDocumentWhereUniqueInput
    update?: XOR<XOR<CaseDocumentUpdateToOneWithWhereWithoutCaseInput, CaseDocumentUpdateWithoutCaseInput>, CaseDocumentUncheckedUpdateWithoutCaseInput>
  }

  export type CaseReminderUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseReminderCreateWithoutCaseInput, CaseReminderUncheckedCreateWithoutCaseInput> | CaseReminderCreateWithoutCaseInput[] | CaseReminderUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseReminderCreateOrConnectWithoutCaseInput | CaseReminderCreateOrConnectWithoutCaseInput[]
    upsert?: CaseReminderUpsertWithWhereUniqueWithoutCaseInput | CaseReminderUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseReminderCreateManyCaseInputEnvelope
    set?: CaseReminderWhereUniqueInput | CaseReminderWhereUniqueInput[]
    disconnect?: CaseReminderWhereUniqueInput | CaseReminderWhereUniqueInput[]
    delete?: CaseReminderWhereUniqueInput | CaseReminderWhereUniqueInput[]
    connect?: CaseReminderWhereUniqueInput | CaseReminderWhereUniqueInput[]
    update?: CaseReminderUpdateWithWhereUniqueWithoutCaseInput | CaseReminderUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseReminderUpdateManyWithWhereWithoutCaseInput | CaseReminderUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseReminderScalarWhereInput | CaseReminderScalarWhereInput[]
  }

  export type CaseInvoiceUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseInvoiceCreateWithoutCaseInput, CaseInvoiceUncheckedCreateWithoutCaseInput> | CaseInvoiceCreateWithoutCaseInput[] | CaseInvoiceUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseInvoiceCreateOrConnectWithoutCaseInput | CaseInvoiceCreateOrConnectWithoutCaseInput[]
    upsert?: CaseInvoiceUpsertWithWhereUniqueWithoutCaseInput | CaseInvoiceUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseInvoiceCreateManyCaseInputEnvelope
    set?: CaseInvoiceWhereUniqueInput | CaseInvoiceWhereUniqueInput[]
    disconnect?: CaseInvoiceWhereUniqueInput | CaseInvoiceWhereUniqueInput[]
    delete?: CaseInvoiceWhereUniqueInput | CaseInvoiceWhereUniqueInput[]
    connect?: CaseInvoiceWhereUniqueInput | CaseInvoiceWhereUniqueInput[]
    update?: CaseInvoiceUpdateWithWhereUniqueWithoutCaseInput | CaseInvoiceUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseInvoiceUpdateManyWithWhereWithoutCaseInput | CaseInvoiceUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseInvoiceScalarWhereInput | CaseInvoiceScalarWhereInput[]
  }

  export type CaseBillingUpdateOneWithoutCaseNestedInput = {
    create?: XOR<CaseBillingCreateWithoutCaseInput, CaseBillingUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CaseBillingCreateOrConnectWithoutCaseInput
    upsert?: CaseBillingUpsertWithoutCaseInput
    disconnect?: CaseBillingWhereInput | boolean
    delete?: CaseBillingWhereInput | boolean
    connect?: CaseBillingWhereUniqueInput
    update?: XOR<XOR<CaseBillingUpdateToOneWithWhereWithoutCaseInput, CaseBillingUpdateWithoutCaseInput>, CaseBillingUncheckedUpdateWithoutCaseInput>
  }

  export type CaseNoteUpdateOneWithoutCaseNestedInput = {
    create?: XOR<CaseNoteCreateWithoutCaseInput, CaseNoteUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CaseNoteCreateOrConnectWithoutCaseInput
    upsert?: CaseNoteUpsertWithoutCaseInput
    disconnect?: CaseNoteWhereInput | boolean
    delete?: CaseNoteWhereInput | boolean
    connect?: CaseNoteWhereUniqueInput
    update?: XOR<XOR<CaseNoteUpdateToOneWithWhereWithoutCaseInput, CaseNoteUpdateWithoutCaseInput>, CaseNoteUncheckedUpdateWithoutCaseInput>
  }

  export type TeamMembershipUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<TeamMembershipCreateWithoutCaseInput, TeamMembershipUncheckedCreateWithoutCaseInput> | TeamMembershipCreateWithoutCaseInput[] | TeamMembershipUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: TeamMembershipCreateOrConnectWithoutCaseInput | TeamMembershipCreateOrConnectWithoutCaseInput[]
    upsert?: TeamMembershipUpsertWithWhereUniqueWithoutCaseInput | TeamMembershipUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: TeamMembershipCreateManyCaseInputEnvelope
    set?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
    disconnect?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
    delete?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
    connect?: TeamMembershipWhereUniqueInput | TeamMembershipWhereUniqueInput[]
    update?: TeamMembershipUpdateWithWhereUniqueWithoutCaseInput | TeamMembershipUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: TeamMembershipUpdateManyWithWhereWithoutCaseInput | TeamMembershipUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: TeamMembershipScalarWhereInput | TeamMembershipScalarWhereInput[]
  }

  export type CaseTagUncheckedUpdateOneWithoutCaseNestedInput = {
    create?: XOR<CaseTagCreateWithoutCaseInput, CaseTagUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CaseTagCreateOrConnectWithoutCaseInput
    upsert?: CaseTagUpsertWithoutCaseInput
    disconnect?: CaseTagWhereInput | boolean
    delete?: CaseTagWhereInput | boolean
    connect?: CaseTagWhereUniqueInput
    update?: XOR<XOR<CaseTagUpdateToOneWithWhereWithoutCaseInput, CaseTagUpdateWithoutCaseInput>, CaseTagUncheckedUpdateWithoutCaseInput>
  }

  export type CaseDocumentUncheckedUpdateOneWithoutCaseNestedInput = {
    create?: XOR<CaseDocumentCreateWithoutCaseInput, CaseDocumentUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CaseDocumentCreateOrConnectWithoutCaseInput
    upsert?: CaseDocumentUpsertWithoutCaseInput
    disconnect?: CaseDocumentWhereInput | boolean
    delete?: CaseDocumentWhereInput | boolean
    connect?: CaseDocumentWhereUniqueInput
    update?: XOR<XOR<CaseDocumentUpdateToOneWithWhereWithoutCaseInput, CaseDocumentUpdateWithoutCaseInput>, CaseDocumentUncheckedUpdateWithoutCaseInput>
  }

  export type CaseReminderUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseReminderCreateWithoutCaseInput, CaseReminderUncheckedCreateWithoutCaseInput> | CaseReminderCreateWithoutCaseInput[] | CaseReminderUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseReminderCreateOrConnectWithoutCaseInput | CaseReminderCreateOrConnectWithoutCaseInput[]
    upsert?: CaseReminderUpsertWithWhereUniqueWithoutCaseInput | CaseReminderUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseReminderCreateManyCaseInputEnvelope
    set?: CaseReminderWhereUniqueInput | CaseReminderWhereUniqueInput[]
    disconnect?: CaseReminderWhereUniqueInput | CaseReminderWhereUniqueInput[]
    delete?: CaseReminderWhereUniqueInput | CaseReminderWhereUniqueInput[]
    connect?: CaseReminderWhereUniqueInput | CaseReminderWhereUniqueInput[]
    update?: CaseReminderUpdateWithWhereUniqueWithoutCaseInput | CaseReminderUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseReminderUpdateManyWithWhereWithoutCaseInput | CaseReminderUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseReminderScalarWhereInput | CaseReminderScalarWhereInput[]
  }

  export type CaseInvoiceUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseInvoiceCreateWithoutCaseInput, CaseInvoiceUncheckedCreateWithoutCaseInput> | CaseInvoiceCreateWithoutCaseInput[] | CaseInvoiceUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseInvoiceCreateOrConnectWithoutCaseInput | CaseInvoiceCreateOrConnectWithoutCaseInput[]
    upsert?: CaseInvoiceUpsertWithWhereUniqueWithoutCaseInput | CaseInvoiceUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseInvoiceCreateManyCaseInputEnvelope
    set?: CaseInvoiceWhereUniqueInput | CaseInvoiceWhereUniqueInput[]
    disconnect?: CaseInvoiceWhereUniqueInput | CaseInvoiceWhereUniqueInput[]
    delete?: CaseInvoiceWhereUniqueInput | CaseInvoiceWhereUniqueInput[]
    connect?: CaseInvoiceWhereUniqueInput | CaseInvoiceWhereUniqueInput[]
    update?: CaseInvoiceUpdateWithWhereUniqueWithoutCaseInput | CaseInvoiceUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseInvoiceUpdateManyWithWhereWithoutCaseInput | CaseInvoiceUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseInvoiceScalarWhereInput | CaseInvoiceScalarWhereInput[]
  }

  export type CaseBillingUncheckedUpdateOneWithoutCaseNestedInput = {
    create?: XOR<CaseBillingCreateWithoutCaseInput, CaseBillingUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CaseBillingCreateOrConnectWithoutCaseInput
    upsert?: CaseBillingUpsertWithoutCaseInput
    disconnect?: CaseBillingWhereInput | boolean
    delete?: CaseBillingWhereInput | boolean
    connect?: CaseBillingWhereUniqueInput
    update?: XOR<XOR<CaseBillingUpdateToOneWithWhereWithoutCaseInput, CaseBillingUpdateWithoutCaseInput>, CaseBillingUncheckedUpdateWithoutCaseInput>
  }

  export type CaseNoteUncheckedUpdateOneWithoutCaseNestedInput = {
    create?: XOR<CaseNoteCreateWithoutCaseInput, CaseNoteUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CaseNoteCreateOrConnectWithoutCaseInput
    upsert?: CaseNoteUpsertWithoutCaseInput
    disconnect?: CaseNoteWhereInput | boolean
    delete?: CaseNoteWhereInput | boolean
    connect?: CaseNoteWhereUniqueInput
    update?: XOR<XOR<CaseNoteUpdateToOneWithWhereWithoutCaseInput, CaseNoteUpdateWithoutCaseInput>, CaseNoteUncheckedUpdateWithoutCaseInput>
  }

  export type CaseCreateNestedOneWithoutCaseNoteInput = {
    create?: XOR<CaseCreateWithoutCaseNoteInput, CaseUncheckedCreateWithoutCaseNoteInput>
    connectOrCreate?: CaseCreateOrConnectWithoutCaseNoteInput
    connect?: CaseWhereUniqueInput
  }

  export type CaseUpdateOneWithoutCaseNoteNestedInput = {
    create?: XOR<CaseCreateWithoutCaseNoteInput, CaseUncheckedCreateWithoutCaseNoteInput>
    connectOrCreate?: CaseCreateOrConnectWithoutCaseNoteInput
    upsert?: CaseUpsertWithoutCaseNoteInput
    disconnect?: CaseWhereInput | boolean
    delete?: CaseWhereInput | boolean
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutCaseNoteInput, CaseUpdateWithoutCaseNoteInput>, CaseUncheckedUpdateWithoutCaseNoteInput>
  }

  export type CaseCreateNestedOneWithoutCaseDocumentInput = {
    create?: XOR<CaseCreateWithoutCaseDocumentInput, CaseUncheckedCreateWithoutCaseDocumentInput>
    connectOrCreate?: CaseCreateOrConnectWithoutCaseDocumentInput
    connect?: CaseWhereUniqueInput
  }

  export type CaseUpdateOneRequiredWithoutCaseDocumentNestedInput = {
    create?: XOR<CaseCreateWithoutCaseDocumentInput, CaseUncheckedCreateWithoutCaseDocumentInput>
    connectOrCreate?: CaseCreateOrConnectWithoutCaseDocumentInput
    upsert?: CaseUpsertWithoutCaseDocumentInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutCaseDocumentInput, CaseUpdateWithoutCaseDocumentInput>, CaseUncheckedUpdateWithoutCaseDocumentInput>
  }

  export type CaseCreateNestedOneWithoutCaseReminderInput = {
    create?: XOR<CaseCreateWithoutCaseReminderInput, CaseUncheckedCreateWithoutCaseReminderInput>
    connectOrCreate?: CaseCreateOrConnectWithoutCaseReminderInput
    connect?: CaseWhereUniqueInput
  }

  export type CaseUpdateOneRequiredWithoutCaseReminderNestedInput = {
    create?: XOR<CaseCreateWithoutCaseReminderInput, CaseUncheckedCreateWithoutCaseReminderInput>
    connectOrCreate?: CaseCreateOrConnectWithoutCaseReminderInput
    upsert?: CaseUpsertWithoutCaseReminderInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutCaseReminderInput, CaseUpdateWithoutCaseReminderInput>, CaseUncheckedUpdateWithoutCaseReminderInput>
  }

  export type CaseCreateNestedOneWithoutCaseInvoiceInput = {
    create?: XOR<CaseCreateWithoutCaseInvoiceInput, CaseUncheckedCreateWithoutCaseInvoiceInput>
    connectOrCreate?: CaseCreateOrConnectWithoutCaseInvoiceInput
    connect?: CaseWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CaseUpdateOneRequiredWithoutCaseInvoiceNestedInput = {
    create?: XOR<CaseCreateWithoutCaseInvoiceInput, CaseUncheckedCreateWithoutCaseInvoiceInput>
    connectOrCreate?: CaseCreateOrConnectWithoutCaseInvoiceInput
    upsert?: CaseUpsertWithoutCaseInvoiceInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutCaseInvoiceInput, CaseUpdateWithoutCaseInvoiceInput>, CaseUncheckedUpdateWithoutCaseInvoiceInput>
  }

  export type CaseCreateNestedOneWithoutCaseBillingsInput = {
    create?: XOR<CaseCreateWithoutCaseBillingsInput, CaseUncheckedCreateWithoutCaseBillingsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutCaseBillingsInput
    connect?: CaseWhereUniqueInput
  }

  export type EnumCaseRateTypeFieldUpdateOperationsInput = {
    set?: $Enums.CaseRateType
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type CaseUpdateOneRequiredWithoutCaseBillingsNestedInput = {
    create?: XOR<CaseCreateWithoutCaseBillingsInput, CaseUncheckedCreateWithoutCaseBillingsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutCaseBillingsInput
    upsert?: CaseUpsertWithoutCaseBillingsInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutCaseBillingsInput, CaseUpdateWithoutCaseBillingsInput>, CaseUncheckedUpdateWithoutCaseBillingsInput>
  }

  export type UserCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentsInput
    upsert?: UserUpsertWithoutDocumentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDocumentsInput, UserUpdateWithoutDocumentsInput>, UserUncheckedUpdateWithoutDocumentsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumPracticeAreaFilter<$PrismaModel = never> = {
    equals?: $Enums.PracticeArea | EnumPracticeAreaFieldRefInput<$PrismaModel>
    in?: $Enums.PracticeArea[] | ListEnumPracticeAreaFieldRefInput<$PrismaModel>
    notIn?: $Enums.PracticeArea[] | ListEnumPracticeAreaFieldRefInput<$PrismaModel>
    not?: NestedEnumPracticeAreaFilter<$PrismaModel> | $Enums.PracticeArea
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumCaseStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStatus | EnumCaseStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCaseStatusNullableFilter<$PrismaModel> | $Enums.CaseStatus | null
  }

  export type NestedEnummatterPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.matterPriority | EnummatterPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.matterPriority[] | ListEnummatterPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.matterPriority[] | ListEnummatterPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnummatterPriorityFilter<$PrismaModel> | $Enums.matterPriority
  }

  export type NestedEnumCaseStageFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStage | EnumCaseStageFieldRefInput<$PrismaModel>
    in?: $Enums.CaseStage[] | ListEnumCaseStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseStage[] | ListEnumCaseStageFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseStageFilter<$PrismaModel> | $Enums.CaseStage
  }

  export type NestedEnumPracticeAreaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PracticeArea | EnumPracticeAreaFieldRefInput<$PrismaModel>
    in?: $Enums.PracticeArea[] | ListEnumPracticeAreaFieldRefInput<$PrismaModel>
    notIn?: $Enums.PracticeArea[] | ListEnumPracticeAreaFieldRefInput<$PrismaModel>
    not?: NestedEnumPracticeAreaWithAggregatesFilter<$PrismaModel> | $Enums.PracticeArea
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPracticeAreaFilter<$PrismaModel>
    _max?: NestedEnumPracticeAreaFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumCaseStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStatus | EnumCaseStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCaseStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.CaseStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCaseStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumCaseStatusNullableFilter<$PrismaModel>
  }

  export type NestedEnummatterPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.matterPriority | EnummatterPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.matterPriority[] | ListEnummatterPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.matterPriority[] | ListEnummatterPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnummatterPriorityWithAggregatesFilter<$PrismaModel> | $Enums.matterPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnummatterPriorityFilter<$PrismaModel>
    _max?: NestedEnummatterPriorityFilter<$PrismaModel>
  }

  export type NestedEnumCaseStageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStage | EnumCaseStageFieldRefInput<$PrismaModel>
    in?: $Enums.CaseStage[] | ListEnumCaseStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseStage[] | ListEnumCaseStageFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseStageWithAggregatesFilter<$PrismaModel> | $Enums.CaseStage
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCaseStageFilter<$PrismaModel>
    _max?: NestedEnumCaseStageFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumCaseRateTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseRateType | EnumCaseRateTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CaseRateType[] | ListEnumCaseRateTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseRateType[] | ListEnumCaseRateTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseRateTypeFilter<$PrismaModel> | $Enums.CaseRateType
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedEnumCaseRateTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseRateType | EnumCaseRateTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CaseRateType[] | ListEnumCaseRateTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseRateType[] | ListEnumCaseRateTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseRateTypeWithAggregatesFilter<$PrismaModel> | $Enums.CaseRateType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCaseRateTypeFilter<$PrismaModel>
    _max?: NestedEnumCaseRateTypeFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionKey: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionKey: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type AddressCreateWithoutUserInput = {
    id?: string
    zip: string
    city: string
    state: string
    country: string
    createdAt?: Date | string
    opponentId?: string | null
  }

  export type AddressUncheckedCreateWithoutUserInput = {
    id?: string
    zip: string
    city: string
    state: string
    country: string
    createdAt?: Date | string
    opponentId?: string | null
  }

  export type AddressCreateOrConnectWithoutUserInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
  }

  export type TeamAdminCreateWithoutUserInput = {
    id?: string
    role?: $Enums.UserRole
    isVerified?: boolean
    createdAt?: Date | string
    cases?: CaseCreateNestedManyWithoutAdminInput
  }

  export type TeamAdminUncheckedCreateWithoutUserInput = {
    id?: string
    role?: $Enums.UserRole
    isVerified?: boolean
    createdAt?: Date | string
    cases?: CaseUncheckedCreateNestedManyWithoutAdminInput
  }

  export type TeamAdminCreateOrConnectWithoutUserInput = {
    where: TeamAdminWhereUniqueInput
    create: XOR<TeamAdminCreateWithoutUserInput, TeamAdminUncheckedCreateWithoutUserInput>
  }

  export type TeamMemberCreateWithoutUserInput = {
    id?: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    memberships?: TeamMembershipCreateNestedManyWithoutTeamMemberInput
  }

  export type TeamMemberUncheckedCreateWithoutUserInput = {
    id?: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    memberships?: TeamMembershipUncheckedCreateNestedManyWithoutTeamMemberInput
  }

  export type TeamMemberCreateOrConnectWithoutUserInput = {
    where: TeamMemberWhereUniqueInput
    create: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput>
  }

  export type TeamClientCreateWithoutUserInput = {
    id?: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    cases?: CaseCreateNestedManyWithoutClientInput
  }

  export type TeamClientUncheckedCreateWithoutUserInput = {
    id?: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    cases?: CaseUncheckedCreateNestedManyWithoutClientInput
  }

  export type TeamClientCreateOrConnectWithoutUserInput = {
    where: TeamClientWhereUniqueInput
    create: XOR<TeamClientCreateWithoutUserInput, TeamClientUncheckedCreateWithoutUserInput>
  }

  export type DocumentCreateWithoutUserInput = {
    id?: string
    title?: string | null
    initialContent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentUncheckedCreateWithoutUserInput = {
    id?: string
    title?: string | null
    initialContent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentCreateOrConnectWithoutUserInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput>
  }

  export type DocumentCreateManyUserInputEnvelope = {
    data: DocumentCreateManyUserInput | DocumentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ToDoListCreateWithoutCreatedByInput = {
    id?: string
    task: string
    isTaskChecked?: boolean
    taskForDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ToDoListUncheckedCreateWithoutCreatedByInput = {
    id?: string
    task: string
    isTaskChecked?: boolean
    taskForDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ToDoListCreateOrConnectWithoutCreatedByInput = {
    where: ToDoListWhereUniqueInput
    create: XOR<ToDoListCreateWithoutCreatedByInput, ToDoListUncheckedCreateWithoutCreatedByInput>
  }

  export type ToDoListCreateManyCreatedByInputEnvelope = {
    data: ToDoListCreateManyCreatedByInput | ToDoListCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithoutUserInput = {
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutUserInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionKey?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionKey?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUpsertWithoutUserInput = {
    update: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
    where?: AddressWhereInput
  }

  export type AddressUpdateToOneWithWhereWithoutUserInput = {
    where?: AddressWhereInput
    data: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
  }

  export type AddressUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    opponentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AddressUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    opponentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeamAdminUpsertWithoutUserInput = {
    update: XOR<TeamAdminUpdateWithoutUserInput, TeamAdminUncheckedUpdateWithoutUserInput>
    create: XOR<TeamAdminCreateWithoutUserInput, TeamAdminUncheckedCreateWithoutUserInput>
    where?: TeamAdminWhereInput
  }

  export type TeamAdminUpdateToOneWithWhereWithoutUserInput = {
    where?: TeamAdminWhereInput
    data: XOR<TeamAdminUpdateWithoutUserInput, TeamAdminUncheckedUpdateWithoutUserInput>
  }

  export type TeamAdminUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cases?: CaseUpdateManyWithoutAdminNestedInput
  }

  export type TeamAdminUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cases?: CaseUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type TeamMemberUpsertWithoutUserInput = {
    update: XOR<TeamMemberUpdateWithoutUserInput, TeamMemberUncheckedUpdateWithoutUserInput>
    create: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput>
    where?: TeamMemberWhereInput
  }

  export type TeamMemberUpdateToOneWithWhereWithoutUserInput = {
    where?: TeamMemberWhereInput
    data: XOR<TeamMemberUpdateWithoutUserInput, TeamMemberUncheckedUpdateWithoutUserInput>
  }

  export type TeamMemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: TeamMembershipUpdateManyWithoutTeamMemberNestedInput
  }

  export type TeamMemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    memberships?: TeamMembershipUncheckedUpdateManyWithoutTeamMemberNestedInput
  }

  export type TeamClientUpsertWithoutUserInput = {
    update: XOR<TeamClientUpdateWithoutUserInput, TeamClientUncheckedUpdateWithoutUserInput>
    create: XOR<TeamClientCreateWithoutUserInput, TeamClientUncheckedCreateWithoutUserInput>
    where?: TeamClientWhereInput
  }

  export type TeamClientUpdateToOneWithWhereWithoutUserInput = {
    where?: TeamClientWhereInput
    data: XOR<TeamClientUpdateWithoutUserInput, TeamClientUncheckedUpdateWithoutUserInput>
  }

  export type TeamClientUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cases?: CaseUpdateManyWithoutClientNestedInput
  }

  export type TeamClientUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cases?: CaseUncheckedUpdateManyWithoutClientNestedInput
  }

  export type DocumentUpsertWithWhereUniqueWithoutUserInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutUserInput, DocumentUncheckedUpdateWithoutUserInput>
    create: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutUserInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutUserInput, DocumentUncheckedUpdateWithoutUserInput>
  }

  export type DocumentUpdateManyWithWhereWithoutUserInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutUserInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: StringFilter<"Document"> | string
    title?: StringNullableFilter<"Document"> | string | null
    initialContent?: StringNullableFilter<"Document"> | string | null
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    userId?: StringFilter<"Document"> | string
  }

  export type ToDoListUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ToDoListWhereUniqueInput
    update: XOR<ToDoListUpdateWithoutCreatedByInput, ToDoListUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ToDoListCreateWithoutCreatedByInput, ToDoListUncheckedCreateWithoutCreatedByInput>
  }

  export type ToDoListUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ToDoListWhereUniqueInput
    data: XOR<ToDoListUpdateWithoutCreatedByInput, ToDoListUncheckedUpdateWithoutCreatedByInput>
  }

  export type ToDoListUpdateManyWithWhereWithoutCreatedByInput = {
    where: ToDoListScalarWhereInput
    data: XOR<ToDoListUpdateManyMutationInput, ToDoListUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ToDoListScalarWhereInput = {
    AND?: ToDoListScalarWhereInput | ToDoListScalarWhereInput[]
    OR?: ToDoListScalarWhereInput[]
    NOT?: ToDoListScalarWhereInput | ToDoListScalarWhereInput[]
    id?: StringFilter<"ToDoList"> | string
    task?: StringFilter<"ToDoList"> | string
    userId?: StringNullableFilter<"ToDoList"> | string | null
    isTaskChecked?: BoolFilter<"ToDoList"> | boolean
    taskForDate?: DateTimeFilter<"ToDoList"> | Date | string
    createdAt?: DateTimeFilter<"ToDoList"> | Date | string
    updatedAt?: DateTimeFilter<"ToDoList"> | Date | string
  }

  export type UserCreateWithoutUserAddressInput = {
    id?: string
    firstName: string
    lastName?: string | null
    userName: string
    email: string
    userProfile?: string | null
    password: string
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    chatToken?: string | null
    Session?: SessionCreateNestedOneWithoutUserInput
    TeamAdmin?: TeamAdminCreateNestedOneWithoutUserInput
    TeamMember?: TeamMemberCreateNestedOneWithoutUserInput
    TeamClient?: TeamClientCreateNestedOneWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUserInput
    ToDoList?: ToDoListCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUserAddressInput = {
    id?: string
    firstName: string
    lastName?: string | null
    userName: string
    email: string
    userProfile?: string | null
    password: string
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    chatToken?: string | null
    Session?: SessionUncheckedCreateNestedOneWithoutUserInput
    TeamAdmin?: TeamAdminUncheckedCreateNestedOneWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedOneWithoutUserInput
    TeamClient?: TeamClientUncheckedCreateNestedOneWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
    ToDoList?: ToDoListUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUserAddressInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserAddressInput, UserUncheckedCreateWithoutUserAddressInput>
  }

  export type UserUpsertWithoutUserAddressInput = {
    update: XOR<UserUpdateWithoutUserAddressInput, UserUncheckedUpdateWithoutUserAddressInput>
    create: XOR<UserCreateWithoutUserAddressInput, UserUncheckedCreateWithoutUserAddressInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserAddressInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserAddressInput, UserUncheckedUpdateWithoutUserAddressInput>
  }

  export type UserUpdateWithoutUserAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userProfile?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    chatToken?: NullableStringFieldUpdateOperationsInput | string | null
    Session?: SessionUpdateOneWithoutUserNestedInput
    TeamAdmin?: TeamAdminUpdateOneWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateOneWithoutUserNestedInput
    TeamClient?: TeamClientUpdateOneWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
    ToDoList?: ToDoListUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUserAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userProfile?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    chatToken?: NullableStringFieldUpdateOperationsInput | string | null
    Session?: SessionUncheckedUpdateOneWithoutUserNestedInput
    TeamAdmin?: TeamAdminUncheckedUpdateOneWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateOneWithoutUserNestedInput
    TeamClient?: TeamClientUncheckedUpdateOneWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
    ToDoList?: ToDoListUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateWithoutSessionInput = {
    id?: string
    firstName: string
    lastName?: string | null
    userName: string
    email: string
    userProfile?: string | null
    password: string
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    chatToken?: string | null
    UserAddress?: AddressCreateNestedOneWithoutUserInput
    TeamAdmin?: TeamAdminCreateNestedOneWithoutUserInput
    TeamMember?: TeamMemberCreateNestedOneWithoutUserInput
    TeamClient?: TeamClientCreateNestedOneWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUserInput
    ToDoList?: ToDoListCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutSessionInput = {
    id?: string
    firstName: string
    lastName?: string | null
    userName: string
    email: string
    userProfile?: string | null
    password: string
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    chatToken?: string | null
    UserAddress?: AddressUncheckedCreateNestedOneWithoutUserInput
    TeamAdmin?: TeamAdminUncheckedCreateNestedOneWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedOneWithoutUserInput
    TeamClient?: TeamClientUncheckedCreateNestedOneWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
    ToDoList?: ToDoListUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutSessionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
  }

  export type UserUpsertWithoutSessionInput = {
    update: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
  }

  export type UserUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userProfile?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    chatToken?: NullableStringFieldUpdateOperationsInput | string | null
    UserAddress?: AddressUpdateOneWithoutUserNestedInput
    TeamAdmin?: TeamAdminUpdateOneWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateOneWithoutUserNestedInput
    TeamClient?: TeamClientUpdateOneWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
    ToDoList?: ToDoListUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userProfile?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    chatToken?: NullableStringFieldUpdateOperationsInput | string | null
    UserAddress?: AddressUncheckedUpdateOneWithoutUserNestedInput
    TeamAdmin?: TeamAdminUncheckedUpdateOneWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateOneWithoutUserNestedInput
    TeamClient?: TeamClientUncheckedUpdateOneWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
    ToDoList?: ToDoListUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateWithoutTeamAdminInput = {
    id?: string
    firstName: string
    lastName?: string | null
    userName: string
    email: string
    userProfile?: string | null
    password: string
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    chatToken?: string | null
    Session?: SessionCreateNestedOneWithoutUserInput
    UserAddress?: AddressCreateNestedOneWithoutUserInput
    TeamMember?: TeamMemberCreateNestedOneWithoutUserInput
    TeamClient?: TeamClientCreateNestedOneWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUserInput
    ToDoList?: ToDoListCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutTeamAdminInput = {
    id?: string
    firstName: string
    lastName?: string | null
    userName: string
    email: string
    userProfile?: string | null
    password: string
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    chatToken?: string | null
    Session?: SessionUncheckedCreateNestedOneWithoutUserInput
    UserAddress?: AddressUncheckedCreateNestedOneWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedOneWithoutUserInput
    TeamClient?: TeamClientUncheckedCreateNestedOneWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
    ToDoList?: ToDoListUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutTeamAdminInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamAdminInput, UserUncheckedCreateWithoutTeamAdminInput>
  }

  export type CaseCreateWithoutAdminInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    createdAt?: Date | string
    updatedAt?: Date | string
    client: TeamClientCreateNestedOneWithoutCasesInput
    members?: TeamMembershipCreateNestedManyWithoutCaseInput
    Opponent?: OpponentCreateNestedOneWithoutCaseInput
    caseTag?: CaseTagCreateNestedOneWithoutCaseInput
    caseDocument?: CaseDocumentCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderCreateNestedManyWithoutCaseInput
    caseInvoice?: CaseInvoiceCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingCreateNestedOneWithoutCaseInput
    caseNote?: CaseNoteCreateNestedOneWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutAdminInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    clientId: string
    opponentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: TeamMembershipUncheckedCreateNestedManyWithoutCaseInput
    caseTag?: CaseTagUncheckedCreateNestedOneWithoutCaseInput
    caseDocument?: CaseDocumentUncheckedCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderUncheckedCreateNestedManyWithoutCaseInput
    caseInvoice?: CaseInvoiceUncheckedCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingUncheckedCreateNestedOneWithoutCaseInput
    caseNote?: CaseNoteUncheckedCreateNestedOneWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutAdminInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutAdminInput, CaseUncheckedCreateWithoutAdminInput>
  }

  export type CaseCreateManyAdminInputEnvelope = {
    data: CaseCreateManyAdminInput | CaseCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTeamAdminInput = {
    update: XOR<UserUpdateWithoutTeamAdminInput, UserUncheckedUpdateWithoutTeamAdminInput>
    create: XOR<UserCreateWithoutTeamAdminInput, UserUncheckedCreateWithoutTeamAdminInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeamAdminInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeamAdminInput, UserUncheckedUpdateWithoutTeamAdminInput>
  }

  export type UserUpdateWithoutTeamAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userProfile?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    chatToken?: NullableStringFieldUpdateOperationsInput | string | null
    Session?: SessionUpdateOneWithoutUserNestedInput
    UserAddress?: AddressUpdateOneWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateOneWithoutUserNestedInput
    TeamClient?: TeamClientUpdateOneWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
    ToDoList?: ToDoListUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userProfile?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    chatToken?: NullableStringFieldUpdateOperationsInput | string | null
    Session?: SessionUncheckedUpdateOneWithoutUserNestedInput
    UserAddress?: AddressUncheckedUpdateOneWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateOneWithoutUserNestedInput
    TeamClient?: TeamClientUncheckedUpdateOneWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
    ToDoList?: ToDoListUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type CaseUpsertWithWhereUniqueWithoutAdminInput = {
    where: CaseWhereUniqueInput
    update: XOR<CaseUpdateWithoutAdminInput, CaseUncheckedUpdateWithoutAdminInput>
    create: XOR<CaseCreateWithoutAdminInput, CaseUncheckedCreateWithoutAdminInput>
  }

  export type CaseUpdateWithWhereUniqueWithoutAdminInput = {
    where: CaseWhereUniqueInput
    data: XOR<CaseUpdateWithoutAdminInput, CaseUncheckedUpdateWithoutAdminInput>
  }

  export type CaseUpdateManyWithWhereWithoutAdminInput = {
    where: CaseScalarWhereInput
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyWithoutAdminInput>
  }

  export type CaseScalarWhereInput = {
    AND?: CaseScalarWhereInput | CaseScalarWhereInput[]
    OR?: CaseScalarWhereInput[]
    NOT?: CaseScalarWhereInput | CaseScalarWhereInput[]
    id?: StringFilter<"Case"> | string
    title?: StringFilter<"Case"> | string
    description?: StringNullableFilter<"Case"> | string | null
    practiseArea?: EnumPracticeAreaFilter<"Case"> | $Enums.PracticeArea
    arrivalDate?: DateTimeNullableFilter<"Case"> | Date | string | null
    status?: EnumCaseStatusNullableFilter<"Case"> | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFilter<"Case"> | $Enums.matterPriority
    internalRefNumber?: StringNullableFilter<"Case"> | string | null
    filedDate?: DateTimeNullableFilter<"Case"> | Date | string | null
    closedDate?: DateTimeNullableFilter<"Case"> | Date | string | null
    estimatedCloseDate?: DateTimeNullableFilter<"Case"> | Date | string | null
    stage?: EnumCaseStageFilter<"Case"> | $Enums.CaseStage
    clientId?: StringFilter<"Case"> | string
    adminId?: StringFilter<"Case"> | string
    opponentId?: StringNullableFilter<"Case"> | string | null
    createdAt?: DateTimeFilter<"Case"> | Date | string
    updatedAt?: DateTimeFilter<"Case"> | Date | string
  }

  export type UserCreateWithoutTeamMemberInput = {
    id?: string
    firstName: string
    lastName?: string | null
    userName: string
    email: string
    userProfile?: string | null
    password: string
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    chatToken?: string | null
    Session?: SessionCreateNestedOneWithoutUserInput
    UserAddress?: AddressCreateNestedOneWithoutUserInput
    TeamAdmin?: TeamAdminCreateNestedOneWithoutUserInput
    TeamClient?: TeamClientCreateNestedOneWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUserInput
    ToDoList?: ToDoListCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutTeamMemberInput = {
    id?: string
    firstName: string
    lastName?: string | null
    userName: string
    email: string
    userProfile?: string | null
    password: string
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    chatToken?: string | null
    Session?: SessionUncheckedCreateNestedOneWithoutUserInput
    UserAddress?: AddressUncheckedCreateNestedOneWithoutUserInput
    TeamAdmin?: TeamAdminUncheckedCreateNestedOneWithoutUserInput
    TeamClient?: TeamClientUncheckedCreateNestedOneWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
    ToDoList?: ToDoListUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutTeamMemberInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamMemberInput, UserUncheckedCreateWithoutTeamMemberInput>
  }

  export type TeamMembershipCreateWithoutTeamMemberInput = {
    id?: string
    joinedAt?: Date | string
    case: CaseCreateNestedOneWithoutMembersInput
  }

  export type TeamMembershipUncheckedCreateWithoutTeamMemberInput = {
    id?: string
    caseId: string
    joinedAt?: Date | string
  }

  export type TeamMembershipCreateOrConnectWithoutTeamMemberInput = {
    where: TeamMembershipWhereUniqueInput
    create: XOR<TeamMembershipCreateWithoutTeamMemberInput, TeamMembershipUncheckedCreateWithoutTeamMemberInput>
  }

  export type TeamMembershipCreateManyTeamMemberInputEnvelope = {
    data: TeamMembershipCreateManyTeamMemberInput | TeamMembershipCreateManyTeamMemberInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTeamMemberInput = {
    update: XOR<UserUpdateWithoutTeamMemberInput, UserUncheckedUpdateWithoutTeamMemberInput>
    create: XOR<UserCreateWithoutTeamMemberInput, UserUncheckedCreateWithoutTeamMemberInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeamMemberInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeamMemberInput, UserUncheckedUpdateWithoutTeamMemberInput>
  }

  export type UserUpdateWithoutTeamMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userProfile?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    chatToken?: NullableStringFieldUpdateOperationsInput | string | null
    Session?: SessionUpdateOneWithoutUserNestedInput
    UserAddress?: AddressUpdateOneWithoutUserNestedInput
    TeamAdmin?: TeamAdminUpdateOneWithoutUserNestedInput
    TeamClient?: TeamClientUpdateOneWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
    ToDoList?: ToDoListUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userProfile?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    chatToken?: NullableStringFieldUpdateOperationsInput | string | null
    Session?: SessionUncheckedUpdateOneWithoutUserNestedInput
    UserAddress?: AddressUncheckedUpdateOneWithoutUserNestedInput
    TeamAdmin?: TeamAdminUncheckedUpdateOneWithoutUserNestedInput
    TeamClient?: TeamClientUncheckedUpdateOneWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
    ToDoList?: ToDoListUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type TeamMembershipUpsertWithWhereUniqueWithoutTeamMemberInput = {
    where: TeamMembershipWhereUniqueInput
    update: XOR<TeamMembershipUpdateWithoutTeamMemberInput, TeamMembershipUncheckedUpdateWithoutTeamMemberInput>
    create: XOR<TeamMembershipCreateWithoutTeamMemberInput, TeamMembershipUncheckedCreateWithoutTeamMemberInput>
  }

  export type TeamMembershipUpdateWithWhereUniqueWithoutTeamMemberInput = {
    where: TeamMembershipWhereUniqueInput
    data: XOR<TeamMembershipUpdateWithoutTeamMemberInput, TeamMembershipUncheckedUpdateWithoutTeamMemberInput>
  }

  export type TeamMembershipUpdateManyWithWhereWithoutTeamMemberInput = {
    where: TeamMembershipScalarWhereInput
    data: XOR<TeamMembershipUpdateManyMutationInput, TeamMembershipUncheckedUpdateManyWithoutTeamMemberInput>
  }

  export type TeamMembershipScalarWhereInput = {
    AND?: TeamMembershipScalarWhereInput | TeamMembershipScalarWhereInput[]
    OR?: TeamMembershipScalarWhereInput[]
    NOT?: TeamMembershipScalarWhereInput | TeamMembershipScalarWhereInput[]
    id?: StringFilter<"TeamMembership"> | string
    teamMemberId?: StringFilter<"TeamMembership"> | string
    caseId?: StringFilter<"TeamMembership"> | string
    joinedAt?: DateTimeFilter<"TeamMembership"> | Date | string
  }

  export type CaseCreateWithoutOpponentInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    createdAt?: Date | string
    updatedAt?: Date | string
    client: TeamClientCreateNestedOneWithoutCasesInput
    admin: TeamAdminCreateNestedOneWithoutCasesInput
    members?: TeamMembershipCreateNestedManyWithoutCaseInput
    caseTag?: CaseTagCreateNestedOneWithoutCaseInput
    caseDocument?: CaseDocumentCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderCreateNestedManyWithoutCaseInput
    caseInvoice?: CaseInvoiceCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingCreateNestedOneWithoutCaseInput
    caseNote?: CaseNoteCreateNestedOneWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutOpponentInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    clientId: string
    adminId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: TeamMembershipUncheckedCreateNestedManyWithoutCaseInput
    caseTag?: CaseTagUncheckedCreateNestedOneWithoutCaseInput
    caseDocument?: CaseDocumentUncheckedCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderUncheckedCreateNestedManyWithoutCaseInput
    caseInvoice?: CaseInvoiceUncheckedCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingUncheckedCreateNestedOneWithoutCaseInput
    caseNote?: CaseNoteUncheckedCreateNestedOneWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutOpponentInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutOpponentInput, CaseUncheckedCreateWithoutOpponentInput>
  }

  export type CaseUpsertWithoutOpponentInput = {
    update: XOR<CaseUpdateWithoutOpponentInput, CaseUncheckedUpdateWithoutOpponentInput>
    create: XOR<CaseCreateWithoutOpponentInput, CaseUncheckedCreateWithoutOpponentInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutOpponentInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutOpponentInput, CaseUncheckedUpdateWithoutOpponentInput>
  }

  export type CaseUpdateWithoutOpponentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: TeamClientUpdateOneRequiredWithoutCasesNestedInput
    admin?: TeamAdminUpdateOneRequiredWithoutCasesNestedInput
    members?: TeamMembershipUpdateManyWithoutCaseNestedInput
    caseTag?: CaseTagUpdateOneWithoutCaseNestedInput
    caseDocument?: CaseDocumentUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUpdateManyWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUpdateOneWithoutCaseNestedInput
    caseNote?: CaseNoteUpdateOneWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutOpponentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    clientId?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: TeamMembershipUncheckedUpdateManyWithoutCaseNestedInput
    caseTag?: CaseTagUncheckedUpdateOneWithoutCaseNestedInput
    caseDocument?: CaseDocumentUncheckedUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUncheckedUpdateManyWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUncheckedUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUncheckedUpdateOneWithoutCaseNestedInput
    caseNote?: CaseNoteUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type UserCreateWithoutTeamClientInput = {
    id?: string
    firstName: string
    lastName?: string | null
    userName: string
    email: string
    userProfile?: string | null
    password: string
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    chatToken?: string | null
    Session?: SessionCreateNestedOneWithoutUserInput
    UserAddress?: AddressCreateNestedOneWithoutUserInput
    TeamAdmin?: TeamAdminCreateNestedOneWithoutUserInput
    TeamMember?: TeamMemberCreateNestedOneWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUserInput
    ToDoList?: ToDoListCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutTeamClientInput = {
    id?: string
    firstName: string
    lastName?: string | null
    userName: string
    email: string
    userProfile?: string | null
    password: string
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    chatToken?: string | null
    Session?: SessionUncheckedCreateNestedOneWithoutUserInput
    UserAddress?: AddressUncheckedCreateNestedOneWithoutUserInput
    TeamAdmin?: TeamAdminUncheckedCreateNestedOneWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedOneWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
    ToDoList?: ToDoListUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutTeamClientInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamClientInput, UserUncheckedCreateWithoutTeamClientInput>
  }

  export type CaseCreateWithoutClientInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    createdAt?: Date | string
    updatedAt?: Date | string
    admin: TeamAdminCreateNestedOneWithoutCasesInput
    members?: TeamMembershipCreateNestedManyWithoutCaseInput
    Opponent?: OpponentCreateNestedOneWithoutCaseInput
    caseTag?: CaseTagCreateNestedOneWithoutCaseInput
    caseDocument?: CaseDocumentCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderCreateNestedManyWithoutCaseInput
    caseInvoice?: CaseInvoiceCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingCreateNestedOneWithoutCaseInput
    caseNote?: CaseNoteCreateNestedOneWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutClientInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    adminId: string
    opponentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: TeamMembershipUncheckedCreateNestedManyWithoutCaseInput
    caseTag?: CaseTagUncheckedCreateNestedOneWithoutCaseInput
    caseDocument?: CaseDocumentUncheckedCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderUncheckedCreateNestedManyWithoutCaseInput
    caseInvoice?: CaseInvoiceUncheckedCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingUncheckedCreateNestedOneWithoutCaseInput
    caseNote?: CaseNoteUncheckedCreateNestedOneWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutClientInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutClientInput, CaseUncheckedCreateWithoutClientInput>
  }

  export type CaseCreateManyClientInputEnvelope = {
    data: CaseCreateManyClientInput | CaseCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTeamClientInput = {
    update: XOR<UserUpdateWithoutTeamClientInput, UserUncheckedUpdateWithoutTeamClientInput>
    create: XOR<UserCreateWithoutTeamClientInput, UserUncheckedCreateWithoutTeamClientInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeamClientInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeamClientInput, UserUncheckedUpdateWithoutTeamClientInput>
  }

  export type UserUpdateWithoutTeamClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userProfile?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    chatToken?: NullableStringFieldUpdateOperationsInput | string | null
    Session?: SessionUpdateOneWithoutUserNestedInput
    UserAddress?: AddressUpdateOneWithoutUserNestedInput
    TeamAdmin?: TeamAdminUpdateOneWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateOneWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
    ToDoList?: ToDoListUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userProfile?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    chatToken?: NullableStringFieldUpdateOperationsInput | string | null
    Session?: SessionUncheckedUpdateOneWithoutUserNestedInput
    UserAddress?: AddressUncheckedUpdateOneWithoutUserNestedInput
    TeamAdmin?: TeamAdminUncheckedUpdateOneWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateOneWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
    ToDoList?: ToDoListUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type CaseUpsertWithWhereUniqueWithoutClientInput = {
    where: CaseWhereUniqueInput
    update: XOR<CaseUpdateWithoutClientInput, CaseUncheckedUpdateWithoutClientInput>
    create: XOR<CaseCreateWithoutClientInput, CaseUncheckedCreateWithoutClientInput>
  }

  export type CaseUpdateWithWhereUniqueWithoutClientInput = {
    where: CaseWhereUniqueInput
    data: XOR<CaseUpdateWithoutClientInput, CaseUncheckedUpdateWithoutClientInput>
  }

  export type CaseUpdateManyWithWhereWithoutClientInput = {
    where: CaseScalarWhereInput
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyWithoutClientInput>
  }

  export type CaseCreateWithoutCaseTagInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    createdAt?: Date | string
    updatedAt?: Date | string
    client: TeamClientCreateNestedOneWithoutCasesInput
    admin: TeamAdminCreateNestedOneWithoutCasesInput
    members?: TeamMembershipCreateNestedManyWithoutCaseInput
    Opponent?: OpponentCreateNestedOneWithoutCaseInput
    caseDocument?: CaseDocumentCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderCreateNestedManyWithoutCaseInput
    caseInvoice?: CaseInvoiceCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingCreateNestedOneWithoutCaseInput
    caseNote?: CaseNoteCreateNestedOneWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutCaseTagInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    clientId: string
    adminId: string
    opponentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: TeamMembershipUncheckedCreateNestedManyWithoutCaseInput
    caseDocument?: CaseDocumentUncheckedCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderUncheckedCreateNestedManyWithoutCaseInput
    caseInvoice?: CaseInvoiceUncheckedCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingUncheckedCreateNestedOneWithoutCaseInput
    caseNote?: CaseNoteUncheckedCreateNestedOneWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutCaseTagInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutCaseTagInput, CaseUncheckedCreateWithoutCaseTagInput>
  }

  export type CaseUpsertWithoutCaseTagInput = {
    update: XOR<CaseUpdateWithoutCaseTagInput, CaseUncheckedUpdateWithoutCaseTagInput>
    create: XOR<CaseCreateWithoutCaseTagInput, CaseUncheckedCreateWithoutCaseTagInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutCaseTagInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutCaseTagInput, CaseUncheckedUpdateWithoutCaseTagInput>
  }

  export type CaseUpdateWithoutCaseTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: TeamClientUpdateOneRequiredWithoutCasesNestedInput
    admin?: TeamAdminUpdateOneRequiredWithoutCasesNestedInput
    members?: TeamMembershipUpdateManyWithoutCaseNestedInput
    Opponent?: OpponentUpdateOneWithoutCaseNestedInput
    caseDocument?: CaseDocumentUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUpdateManyWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUpdateOneWithoutCaseNestedInput
    caseNote?: CaseNoteUpdateOneWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutCaseTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    clientId?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    opponentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: TeamMembershipUncheckedUpdateManyWithoutCaseNestedInput
    caseDocument?: CaseDocumentUncheckedUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUncheckedUpdateManyWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUncheckedUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUncheckedUpdateOneWithoutCaseNestedInput
    caseNote?: CaseNoteUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type TeamMemberCreateWithoutMembershipsInput = {
    id?: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutTeamMemberInput
  }

  export type TeamMemberUncheckedCreateWithoutMembershipsInput = {
    id?: string
    userId?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
  }

  export type TeamMemberCreateOrConnectWithoutMembershipsInput = {
    where: TeamMemberWhereUniqueInput
    create: XOR<TeamMemberCreateWithoutMembershipsInput, TeamMemberUncheckedCreateWithoutMembershipsInput>
  }

  export type CaseCreateWithoutMembersInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    createdAt?: Date | string
    updatedAt?: Date | string
    client: TeamClientCreateNestedOneWithoutCasesInput
    admin: TeamAdminCreateNestedOneWithoutCasesInput
    Opponent?: OpponentCreateNestedOneWithoutCaseInput
    caseTag?: CaseTagCreateNestedOneWithoutCaseInput
    caseDocument?: CaseDocumentCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderCreateNestedManyWithoutCaseInput
    caseInvoice?: CaseInvoiceCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingCreateNestedOneWithoutCaseInput
    caseNote?: CaseNoteCreateNestedOneWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutMembersInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    clientId: string
    adminId: string
    opponentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    caseTag?: CaseTagUncheckedCreateNestedOneWithoutCaseInput
    caseDocument?: CaseDocumentUncheckedCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderUncheckedCreateNestedManyWithoutCaseInput
    caseInvoice?: CaseInvoiceUncheckedCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingUncheckedCreateNestedOneWithoutCaseInput
    caseNote?: CaseNoteUncheckedCreateNestedOneWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutMembersInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutMembersInput, CaseUncheckedCreateWithoutMembersInput>
  }

  export type TeamMemberUpsertWithoutMembershipsInput = {
    update: XOR<TeamMemberUpdateWithoutMembershipsInput, TeamMemberUncheckedUpdateWithoutMembershipsInput>
    create: XOR<TeamMemberCreateWithoutMembershipsInput, TeamMemberUncheckedCreateWithoutMembershipsInput>
    where?: TeamMemberWhereInput
  }

  export type TeamMemberUpdateToOneWithWhereWithoutMembershipsInput = {
    where?: TeamMemberWhereInput
    data: XOR<TeamMemberUpdateWithoutMembershipsInput, TeamMemberUncheckedUpdateWithoutMembershipsInput>
  }

  export type TeamMemberUpdateWithoutMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTeamMemberNestedInput
  }

  export type TeamMemberUncheckedUpdateWithoutMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseUpsertWithoutMembersInput = {
    update: XOR<CaseUpdateWithoutMembersInput, CaseUncheckedUpdateWithoutMembersInput>
    create: XOR<CaseCreateWithoutMembersInput, CaseUncheckedCreateWithoutMembersInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutMembersInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutMembersInput, CaseUncheckedUpdateWithoutMembersInput>
  }

  export type CaseUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: TeamClientUpdateOneRequiredWithoutCasesNestedInput
    admin?: TeamAdminUpdateOneRequiredWithoutCasesNestedInput
    Opponent?: OpponentUpdateOneWithoutCaseNestedInput
    caseTag?: CaseTagUpdateOneWithoutCaseNestedInput
    caseDocument?: CaseDocumentUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUpdateManyWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUpdateOneWithoutCaseNestedInput
    caseNote?: CaseNoteUpdateOneWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    clientId?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    opponentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseTag?: CaseTagUncheckedUpdateOneWithoutCaseNestedInput
    caseDocument?: CaseDocumentUncheckedUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUncheckedUpdateManyWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUncheckedUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUncheckedUpdateOneWithoutCaseNestedInput
    caseNote?: CaseNoteUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type UserCreateWithoutToDoListInput = {
    id?: string
    firstName: string
    lastName?: string | null
    userName: string
    email: string
    userProfile?: string | null
    password: string
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    chatToken?: string | null
    Session?: SessionCreateNestedOneWithoutUserInput
    UserAddress?: AddressCreateNestedOneWithoutUserInput
    TeamAdmin?: TeamAdminCreateNestedOneWithoutUserInput
    TeamMember?: TeamMemberCreateNestedOneWithoutUserInput
    TeamClient?: TeamClientCreateNestedOneWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutToDoListInput = {
    id?: string
    firstName: string
    lastName?: string | null
    userName: string
    email: string
    userProfile?: string | null
    password: string
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    chatToken?: string | null
    Session?: SessionUncheckedCreateNestedOneWithoutUserInput
    UserAddress?: AddressUncheckedCreateNestedOneWithoutUserInput
    TeamAdmin?: TeamAdminUncheckedCreateNestedOneWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedOneWithoutUserInput
    TeamClient?: TeamClientUncheckedCreateNestedOneWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutToDoListInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutToDoListInput, UserUncheckedCreateWithoutToDoListInput>
  }

  export type UserUpsertWithoutToDoListInput = {
    update: XOR<UserUpdateWithoutToDoListInput, UserUncheckedUpdateWithoutToDoListInput>
    create: XOR<UserCreateWithoutToDoListInput, UserUncheckedCreateWithoutToDoListInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutToDoListInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutToDoListInput, UserUncheckedUpdateWithoutToDoListInput>
  }

  export type UserUpdateWithoutToDoListInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userProfile?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    chatToken?: NullableStringFieldUpdateOperationsInput | string | null
    Session?: SessionUpdateOneWithoutUserNestedInput
    UserAddress?: AddressUpdateOneWithoutUserNestedInput
    TeamAdmin?: TeamAdminUpdateOneWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateOneWithoutUserNestedInput
    TeamClient?: TeamClientUpdateOneWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutToDoListInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userProfile?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    chatToken?: NullableStringFieldUpdateOperationsInput | string | null
    Session?: SessionUncheckedUpdateOneWithoutUserNestedInput
    UserAddress?: AddressUncheckedUpdateOneWithoutUserNestedInput
    TeamAdmin?: TeamAdminUncheckedUpdateOneWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateOneWithoutUserNestedInput
    TeamClient?: TeamClientUncheckedUpdateOneWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TeamClientCreateWithoutCasesInput = {
    id?: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutTeamClientInput
  }

  export type TeamClientUncheckedCreateWithoutCasesInput = {
    id?: string
    userId?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
  }

  export type TeamClientCreateOrConnectWithoutCasesInput = {
    where: TeamClientWhereUniqueInput
    create: XOR<TeamClientCreateWithoutCasesInput, TeamClientUncheckedCreateWithoutCasesInput>
  }

  export type TeamAdminCreateWithoutCasesInput = {
    id?: string
    role?: $Enums.UserRole
    isVerified?: boolean
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutTeamAdminInput
  }

  export type TeamAdminUncheckedCreateWithoutCasesInput = {
    id?: string
    userId?: string | null
    role?: $Enums.UserRole
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type TeamAdminCreateOrConnectWithoutCasesInput = {
    where: TeamAdminWhereUniqueInput
    create: XOR<TeamAdminCreateWithoutCasesInput, TeamAdminUncheckedCreateWithoutCasesInput>
  }

  export type TeamMembershipCreateWithoutCaseInput = {
    id?: string
    joinedAt?: Date | string
    teamMember: TeamMemberCreateNestedOneWithoutMembershipsInput
  }

  export type TeamMembershipUncheckedCreateWithoutCaseInput = {
    id?: string
    teamMemberId: string
    joinedAt?: Date | string
  }

  export type TeamMembershipCreateOrConnectWithoutCaseInput = {
    where: TeamMembershipWhereUniqueInput
    create: XOR<TeamMembershipCreateWithoutCaseInput, TeamMembershipUncheckedCreateWithoutCaseInput>
  }

  export type TeamMembershipCreateManyCaseInputEnvelope = {
    data: TeamMembershipCreateManyCaseInput | TeamMembershipCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type OpponentCreateWithoutCaseInput = {
    id?: string
    firstName: string
    lastName: string
    jobTitle?: string | null
    email?: string | null
    phoneNumber?: string | null
    zip: string
    city: string
    state: string
    country: string
  }

  export type OpponentUncheckedCreateWithoutCaseInput = {
    id?: string
    firstName: string
    lastName: string
    jobTitle?: string | null
    email?: string | null
    phoneNumber?: string | null
    zip: string
    city: string
    state: string
    country: string
  }

  export type OpponentCreateOrConnectWithoutCaseInput = {
    where: OpponentWhereUniqueInput
    create: XOR<OpponentCreateWithoutCaseInput, OpponentUncheckedCreateWithoutCaseInput>
  }

  export type CaseTagCreateWithoutCaseInput = {
    id?: string
    label: string
  }

  export type CaseTagUncheckedCreateWithoutCaseInput = {
    id?: string
    label: string
  }

  export type CaseTagCreateOrConnectWithoutCaseInput = {
    where: CaseTagWhereUniqueInput
    create: XOR<CaseTagCreateWithoutCaseInput, CaseTagUncheckedCreateWithoutCaseInput>
  }

  export type CaseDocumentCreateWithoutCaseInput = {
    id?: string
    documentUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseDocumentUncheckedCreateWithoutCaseInput = {
    id?: string
    documentUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseDocumentCreateOrConnectWithoutCaseInput = {
    where: CaseDocumentWhereUniqueInput
    create: XOR<CaseDocumentCreateWithoutCaseInput, CaseDocumentUncheckedCreateWithoutCaseInput>
  }

  export type CaseReminderCreateWithoutCaseInput = {
    id?: string
    reminderDate: Date | string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseReminderUncheckedCreateWithoutCaseInput = {
    id?: string
    reminderDate: Date | string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseReminderCreateOrConnectWithoutCaseInput = {
    where: CaseReminderWhereUniqueInput
    create: XOR<CaseReminderCreateWithoutCaseInput, CaseReminderUncheckedCreateWithoutCaseInput>
  }

  export type CaseReminderCreateManyCaseInputEnvelope = {
    data: CaseReminderCreateManyCaseInput | CaseReminderCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type CaseInvoiceCreateWithoutCaseInput = {
    id?: string
    amount: number
    status: string
    dueDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseInvoiceUncheckedCreateWithoutCaseInput = {
    id?: string
    amount: number
    status: string
    dueDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseInvoiceCreateOrConnectWithoutCaseInput = {
    where: CaseInvoiceWhereUniqueInput
    create: XOR<CaseInvoiceCreateWithoutCaseInput, CaseInvoiceUncheckedCreateWithoutCaseInput>
  }

  export type CaseInvoiceCreateManyCaseInputEnvelope = {
    data: CaseInvoiceCreateManyCaseInput | CaseInvoiceCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type CaseBillingCreateWithoutCaseInput = {
    id?: string
    amount: number
    currency?: string
    rateType?: $Enums.CaseRateType
    paymentStatus?: $Enums.PaymentStatus
    paymentMethod?: $Enums.PaymentMethod
    paymentDate?: Date | string | null
    billingNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseBillingUncheckedCreateWithoutCaseInput = {
    id?: string
    amount: number
    currency?: string
    rateType?: $Enums.CaseRateType
    paymentStatus?: $Enums.PaymentStatus
    paymentMethod?: $Enums.PaymentMethod
    paymentDate?: Date | string | null
    billingNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseBillingCreateOrConnectWithoutCaseInput = {
    where: CaseBillingWhereUniqueInput
    create: XOR<CaseBillingCreateWithoutCaseInput, CaseBillingUncheckedCreateWithoutCaseInput>
  }

  export type CaseNoteCreateWithoutCaseInput = {
    id?: string
    note?: string | null
    createdAt?: Date | string
  }

  export type CaseNoteUncheckedCreateWithoutCaseInput = {
    id?: string
    note?: string | null
    createdAt?: Date | string
  }

  export type CaseNoteCreateOrConnectWithoutCaseInput = {
    where: CaseNoteWhereUniqueInput
    create: XOR<CaseNoteCreateWithoutCaseInput, CaseNoteUncheckedCreateWithoutCaseInput>
  }

  export type TeamClientUpsertWithoutCasesInput = {
    update: XOR<TeamClientUpdateWithoutCasesInput, TeamClientUncheckedUpdateWithoutCasesInput>
    create: XOR<TeamClientCreateWithoutCasesInput, TeamClientUncheckedCreateWithoutCasesInput>
    where?: TeamClientWhereInput
  }

  export type TeamClientUpdateToOneWithWhereWithoutCasesInput = {
    where?: TeamClientWhereInput
    data: XOR<TeamClientUpdateWithoutCasesInput, TeamClientUncheckedUpdateWithoutCasesInput>
  }

  export type TeamClientUpdateWithoutCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTeamClientNestedInput
  }

  export type TeamClientUncheckedUpdateWithoutCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamAdminUpsertWithoutCasesInput = {
    update: XOR<TeamAdminUpdateWithoutCasesInput, TeamAdminUncheckedUpdateWithoutCasesInput>
    create: XOR<TeamAdminCreateWithoutCasesInput, TeamAdminUncheckedCreateWithoutCasesInput>
    where?: TeamAdminWhereInput
  }

  export type TeamAdminUpdateToOneWithWhereWithoutCasesInput = {
    where?: TeamAdminWhereInput
    data: XOR<TeamAdminUpdateWithoutCasesInput, TeamAdminUncheckedUpdateWithoutCasesInput>
  }

  export type TeamAdminUpdateWithoutCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTeamAdminNestedInput
  }

  export type TeamAdminUncheckedUpdateWithoutCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMembershipUpsertWithWhereUniqueWithoutCaseInput = {
    where: TeamMembershipWhereUniqueInput
    update: XOR<TeamMembershipUpdateWithoutCaseInput, TeamMembershipUncheckedUpdateWithoutCaseInput>
    create: XOR<TeamMembershipCreateWithoutCaseInput, TeamMembershipUncheckedCreateWithoutCaseInput>
  }

  export type TeamMembershipUpdateWithWhereUniqueWithoutCaseInput = {
    where: TeamMembershipWhereUniqueInput
    data: XOR<TeamMembershipUpdateWithoutCaseInput, TeamMembershipUncheckedUpdateWithoutCaseInput>
  }

  export type TeamMembershipUpdateManyWithWhereWithoutCaseInput = {
    where: TeamMembershipScalarWhereInput
    data: XOR<TeamMembershipUpdateManyMutationInput, TeamMembershipUncheckedUpdateManyWithoutCaseInput>
  }

  export type OpponentUpsertWithoutCaseInput = {
    update: XOR<OpponentUpdateWithoutCaseInput, OpponentUncheckedUpdateWithoutCaseInput>
    create: XOR<OpponentCreateWithoutCaseInput, OpponentUncheckedCreateWithoutCaseInput>
    where?: OpponentWhereInput
  }

  export type OpponentUpdateToOneWithWhereWithoutCaseInput = {
    where?: OpponentWhereInput
    data: XOR<OpponentUpdateWithoutCaseInput, OpponentUncheckedUpdateWithoutCaseInput>
  }

  export type OpponentUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type OpponentUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type CaseTagUpsertWithoutCaseInput = {
    update: XOR<CaseTagUpdateWithoutCaseInput, CaseTagUncheckedUpdateWithoutCaseInput>
    create: XOR<CaseTagCreateWithoutCaseInput, CaseTagUncheckedCreateWithoutCaseInput>
    where?: CaseTagWhereInput
  }

  export type CaseTagUpdateToOneWithWhereWithoutCaseInput = {
    where?: CaseTagWhereInput
    data: XOR<CaseTagUpdateWithoutCaseInput, CaseTagUncheckedUpdateWithoutCaseInput>
  }

  export type CaseTagUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type CaseTagUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type CaseDocumentUpsertWithoutCaseInput = {
    update: XOR<CaseDocumentUpdateWithoutCaseInput, CaseDocumentUncheckedUpdateWithoutCaseInput>
    create: XOR<CaseDocumentCreateWithoutCaseInput, CaseDocumentUncheckedCreateWithoutCaseInput>
    where?: CaseDocumentWhereInput
  }

  export type CaseDocumentUpdateToOneWithWhereWithoutCaseInput = {
    where?: CaseDocumentWhereInput
    data: XOR<CaseDocumentUpdateWithoutCaseInput, CaseDocumentUncheckedUpdateWithoutCaseInput>
  }

  export type CaseDocumentUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseDocumentUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseReminderUpsertWithWhereUniqueWithoutCaseInput = {
    where: CaseReminderWhereUniqueInput
    update: XOR<CaseReminderUpdateWithoutCaseInput, CaseReminderUncheckedUpdateWithoutCaseInput>
    create: XOR<CaseReminderCreateWithoutCaseInput, CaseReminderUncheckedCreateWithoutCaseInput>
  }

  export type CaseReminderUpdateWithWhereUniqueWithoutCaseInput = {
    where: CaseReminderWhereUniqueInput
    data: XOR<CaseReminderUpdateWithoutCaseInput, CaseReminderUncheckedUpdateWithoutCaseInput>
  }

  export type CaseReminderUpdateManyWithWhereWithoutCaseInput = {
    where: CaseReminderScalarWhereInput
    data: XOR<CaseReminderUpdateManyMutationInput, CaseReminderUncheckedUpdateManyWithoutCaseInput>
  }

  export type CaseReminderScalarWhereInput = {
    AND?: CaseReminderScalarWhereInput | CaseReminderScalarWhereInput[]
    OR?: CaseReminderScalarWhereInput[]
    NOT?: CaseReminderScalarWhereInput | CaseReminderScalarWhereInput[]
    id?: StringFilter<"CaseReminder"> | string
    caseId?: StringFilter<"CaseReminder"> | string
    reminderDate?: DateTimeFilter<"CaseReminder"> | Date | string
    description?: StringFilter<"CaseReminder"> | string
    createdAt?: DateTimeFilter<"CaseReminder"> | Date | string
    updatedAt?: DateTimeFilter<"CaseReminder"> | Date | string
  }

  export type CaseInvoiceUpsertWithWhereUniqueWithoutCaseInput = {
    where: CaseInvoiceWhereUniqueInput
    update: XOR<CaseInvoiceUpdateWithoutCaseInput, CaseInvoiceUncheckedUpdateWithoutCaseInput>
    create: XOR<CaseInvoiceCreateWithoutCaseInput, CaseInvoiceUncheckedCreateWithoutCaseInput>
  }

  export type CaseInvoiceUpdateWithWhereUniqueWithoutCaseInput = {
    where: CaseInvoiceWhereUniqueInput
    data: XOR<CaseInvoiceUpdateWithoutCaseInput, CaseInvoiceUncheckedUpdateWithoutCaseInput>
  }

  export type CaseInvoiceUpdateManyWithWhereWithoutCaseInput = {
    where: CaseInvoiceScalarWhereInput
    data: XOR<CaseInvoiceUpdateManyMutationInput, CaseInvoiceUncheckedUpdateManyWithoutCaseInput>
  }

  export type CaseInvoiceScalarWhereInput = {
    AND?: CaseInvoiceScalarWhereInput | CaseInvoiceScalarWhereInput[]
    OR?: CaseInvoiceScalarWhereInput[]
    NOT?: CaseInvoiceScalarWhereInput | CaseInvoiceScalarWhereInput[]
    id?: StringFilter<"CaseInvoice"> | string
    caseId?: StringFilter<"CaseInvoice"> | string
    amount?: FloatFilter<"CaseInvoice"> | number
    status?: StringFilter<"CaseInvoice"> | string
    dueDate?: DateTimeFilter<"CaseInvoice"> | Date | string
    createdAt?: DateTimeFilter<"CaseInvoice"> | Date | string
    updatedAt?: DateTimeFilter<"CaseInvoice"> | Date | string
  }

  export type CaseBillingUpsertWithoutCaseInput = {
    update: XOR<CaseBillingUpdateWithoutCaseInput, CaseBillingUncheckedUpdateWithoutCaseInput>
    create: XOR<CaseBillingCreateWithoutCaseInput, CaseBillingUncheckedCreateWithoutCaseInput>
    where?: CaseBillingWhereInput
  }

  export type CaseBillingUpdateToOneWithWhereWithoutCaseInput = {
    where?: CaseBillingWhereInput
    data: XOR<CaseBillingUpdateWithoutCaseInput, CaseBillingUncheckedUpdateWithoutCaseInput>
  }

  export type CaseBillingUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    rateType?: EnumCaseRateTypeFieldUpdateOperationsInput | $Enums.CaseRateType
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseBillingUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    rateType?: EnumCaseRateTypeFieldUpdateOperationsInput | $Enums.CaseRateType
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseNoteUpsertWithoutCaseInput = {
    update: XOR<CaseNoteUpdateWithoutCaseInput, CaseNoteUncheckedUpdateWithoutCaseInput>
    create: XOR<CaseNoteCreateWithoutCaseInput, CaseNoteUncheckedCreateWithoutCaseInput>
    where?: CaseNoteWhereInput
  }

  export type CaseNoteUpdateToOneWithWhereWithoutCaseInput = {
    where?: CaseNoteWhereInput
    data: XOR<CaseNoteUpdateWithoutCaseInput, CaseNoteUncheckedUpdateWithoutCaseInput>
  }

  export type CaseNoteUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseNoteUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseCreateWithoutCaseNoteInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    createdAt?: Date | string
    updatedAt?: Date | string
    client: TeamClientCreateNestedOneWithoutCasesInput
    admin: TeamAdminCreateNestedOneWithoutCasesInput
    members?: TeamMembershipCreateNestedManyWithoutCaseInput
    Opponent?: OpponentCreateNestedOneWithoutCaseInput
    caseTag?: CaseTagCreateNestedOneWithoutCaseInput
    caseDocument?: CaseDocumentCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderCreateNestedManyWithoutCaseInput
    caseInvoice?: CaseInvoiceCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingCreateNestedOneWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutCaseNoteInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    clientId: string
    adminId: string
    opponentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: TeamMembershipUncheckedCreateNestedManyWithoutCaseInput
    caseTag?: CaseTagUncheckedCreateNestedOneWithoutCaseInput
    caseDocument?: CaseDocumentUncheckedCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderUncheckedCreateNestedManyWithoutCaseInput
    caseInvoice?: CaseInvoiceUncheckedCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingUncheckedCreateNestedOneWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutCaseNoteInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutCaseNoteInput, CaseUncheckedCreateWithoutCaseNoteInput>
  }

  export type CaseUpsertWithoutCaseNoteInput = {
    update: XOR<CaseUpdateWithoutCaseNoteInput, CaseUncheckedUpdateWithoutCaseNoteInput>
    create: XOR<CaseCreateWithoutCaseNoteInput, CaseUncheckedCreateWithoutCaseNoteInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutCaseNoteInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutCaseNoteInput, CaseUncheckedUpdateWithoutCaseNoteInput>
  }

  export type CaseUpdateWithoutCaseNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: TeamClientUpdateOneRequiredWithoutCasesNestedInput
    admin?: TeamAdminUpdateOneRequiredWithoutCasesNestedInput
    members?: TeamMembershipUpdateManyWithoutCaseNestedInput
    Opponent?: OpponentUpdateOneWithoutCaseNestedInput
    caseTag?: CaseTagUpdateOneWithoutCaseNestedInput
    caseDocument?: CaseDocumentUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUpdateManyWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUpdateOneWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutCaseNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    clientId?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    opponentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: TeamMembershipUncheckedUpdateManyWithoutCaseNestedInput
    caseTag?: CaseTagUncheckedUpdateOneWithoutCaseNestedInput
    caseDocument?: CaseDocumentUncheckedUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUncheckedUpdateManyWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUncheckedUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type CaseCreateWithoutCaseDocumentInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    createdAt?: Date | string
    updatedAt?: Date | string
    client: TeamClientCreateNestedOneWithoutCasesInput
    admin: TeamAdminCreateNestedOneWithoutCasesInput
    members?: TeamMembershipCreateNestedManyWithoutCaseInput
    Opponent?: OpponentCreateNestedOneWithoutCaseInput
    caseTag?: CaseTagCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderCreateNestedManyWithoutCaseInput
    caseInvoice?: CaseInvoiceCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingCreateNestedOneWithoutCaseInput
    caseNote?: CaseNoteCreateNestedOneWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutCaseDocumentInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    clientId: string
    adminId: string
    opponentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: TeamMembershipUncheckedCreateNestedManyWithoutCaseInput
    caseTag?: CaseTagUncheckedCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderUncheckedCreateNestedManyWithoutCaseInput
    caseInvoice?: CaseInvoiceUncheckedCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingUncheckedCreateNestedOneWithoutCaseInput
    caseNote?: CaseNoteUncheckedCreateNestedOneWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutCaseDocumentInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutCaseDocumentInput, CaseUncheckedCreateWithoutCaseDocumentInput>
  }

  export type CaseUpsertWithoutCaseDocumentInput = {
    update: XOR<CaseUpdateWithoutCaseDocumentInput, CaseUncheckedUpdateWithoutCaseDocumentInput>
    create: XOR<CaseCreateWithoutCaseDocumentInput, CaseUncheckedCreateWithoutCaseDocumentInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutCaseDocumentInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutCaseDocumentInput, CaseUncheckedUpdateWithoutCaseDocumentInput>
  }

  export type CaseUpdateWithoutCaseDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: TeamClientUpdateOneRequiredWithoutCasesNestedInput
    admin?: TeamAdminUpdateOneRequiredWithoutCasesNestedInput
    members?: TeamMembershipUpdateManyWithoutCaseNestedInput
    Opponent?: OpponentUpdateOneWithoutCaseNestedInput
    caseTag?: CaseTagUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUpdateManyWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUpdateOneWithoutCaseNestedInput
    caseNote?: CaseNoteUpdateOneWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutCaseDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    clientId?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    opponentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: TeamMembershipUncheckedUpdateManyWithoutCaseNestedInput
    caseTag?: CaseTagUncheckedUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUncheckedUpdateManyWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUncheckedUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUncheckedUpdateOneWithoutCaseNestedInput
    caseNote?: CaseNoteUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type CaseCreateWithoutCaseReminderInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    createdAt?: Date | string
    updatedAt?: Date | string
    client: TeamClientCreateNestedOneWithoutCasesInput
    admin: TeamAdminCreateNestedOneWithoutCasesInput
    members?: TeamMembershipCreateNestedManyWithoutCaseInput
    Opponent?: OpponentCreateNestedOneWithoutCaseInput
    caseTag?: CaseTagCreateNestedOneWithoutCaseInput
    caseDocument?: CaseDocumentCreateNestedOneWithoutCaseInput
    caseInvoice?: CaseInvoiceCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingCreateNestedOneWithoutCaseInput
    caseNote?: CaseNoteCreateNestedOneWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutCaseReminderInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    clientId: string
    adminId: string
    opponentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: TeamMembershipUncheckedCreateNestedManyWithoutCaseInput
    caseTag?: CaseTagUncheckedCreateNestedOneWithoutCaseInput
    caseDocument?: CaseDocumentUncheckedCreateNestedOneWithoutCaseInput
    caseInvoice?: CaseInvoiceUncheckedCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingUncheckedCreateNestedOneWithoutCaseInput
    caseNote?: CaseNoteUncheckedCreateNestedOneWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutCaseReminderInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutCaseReminderInput, CaseUncheckedCreateWithoutCaseReminderInput>
  }

  export type CaseUpsertWithoutCaseReminderInput = {
    update: XOR<CaseUpdateWithoutCaseReminderInput, CaseUncheckedUpdateWithoutCaseReminderInput>
    create: XOR<CaseCreateWithoutCaseReminderInput, CaseUncheckedCreateWithoutCaseReminderInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutCaseReminderInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutCaseReminderInput, CaseUncheckedUpdateWithoutCaseReminderInput>
  }

  export type CaseUpdateWithoutCaseReminderInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: TeamClientUpdateOneRequiredWithoutCasesNestedInput
    admin?: TeamAdminUpdateOneRequiredWithoutCasesNestedInput
    members?: TeamMembershipUpdateManyWithoutCaseNestedInput
    Opponent?: OpponentUpdateOneWithoutCaseNestedInput
    caseTag?: CaseTagUpdateOneWithoutCaseNestedInput
    caseDocument?: CaseDocumentUpdateOneWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUpdateOneWithoutCaseNestedInput
    caseNote?: CaseNoteUpdateOneWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutCaseReminderInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    clientId?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    opponentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: TeamMembershipUncheckedUpdateManyWithoutCaseNestedInput
    caseTag?: CaseTagUncheckedUpdateOneWithoutCaseNestedInput
    caseDocument?: CaseDocumentUncheckedUpdateOneWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUncheckedUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUncheckedUpdateOneWithoutCaseNestedInput
    caseNote?: CaseNoteUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type CaseCreateWithoutCaseInvoiceInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    createdAt?: Date | string
    updatedAt?: Date | string
    client: TeamClientCreateNestedOneWithoutCasesInput
    admin: TeamAdminCreateNestedOneWithoutCasesInput
    members?: TeamMembershipCreateNestedManyWithoutCaseInput
    Opponent?: OpponentCreateNestedOneWithoutCaseInput
    caseTag?: CaseTagCreateNestedOneWithoutCaseInput
    caseDocument?: CaseDocumentCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingCreateNestedOneWithoutCaseInput
    caseNote?: CaseNoteCreateNestedOneWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutCaseInvoiceInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    clientId: string
    adminId: string
    opponentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: TeamMembershipUncheckedCreateNestedManyWithoutCaseInput
    caseTag?: CaseTagUncheckedCreateNestedOneWithoutCaseInput
    caseDocument?: CaseDocumentUncheckedCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderUncheckedCreateNestedManyWithoutCaseInput
    caseBillings?: CaseBillingUncheckedCreateNestedOneWithoutCaseInput
    caseNote?: CaseNoteUncheckedCreateNestedOneWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutCaseInvoiceInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutCaseInvoiceInput, CaseUncheckedCreateWithoutCaseInvoiceInput>
  }

  export type CaseUpsertWithoutCaseInvoiceInput = {
    update: XOR<CaseUpdateWithoutCaseInvoiceInput, CaseUncheckedUpdateWithoutCaseInvoiceInput>
    create: XOR<CaseCreateWithoutCaseInvoiceInput, CaseUncheckedCreateWithoutCaseInvoiceInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutCaseInvoiceInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutCaseInvoiceInput, CaseUncheckedUpdateWithoutCaseInvoiceInput>
  }

  export type CaseUpdateWithoutCaseInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: TeamClientUpdateOneRequiredWithoutCasesNestedInput
    admin?: TeamAdminUpdateOneRequiredWithoutCasesNestedInput
    members?: TeamMembershipUpdateManyWithoutCaseNestedInput
    Opponent?: OpponentUpdateOneWithoutCaseNestedInput
    caseTag?: CaseTagUpdateOneWithoutCaseNestedInput
    caseDocument?: CaseDocumentUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUpdateOneWithoutCaseNestedInput
    caseNote?: CaseNoteUpdateOneWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutCaseInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    clientId?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    opponentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: TeamMembershipUncheckedUpdateManyWithoutCaseNestedInput
    caseTag?: CaseTagUncheckedUpdateOneWithoutCaseNestedInput
    caseDocument?: CaseDocumentUncheckedUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUncheckedUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUncheckedUpdateOneWithoutCaseNestedInput
    caseNote?: CaseNoteUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type CaseCreateWithoutCaseBillingsInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    createdAt?: Date | string
    updatedAt?: Date | string
    client: TeamClientCreateNestedOneWithoutCasesInput
    admin: TeamAdminCreateNestedOneWithoutCasesInput
    members?: TeamMembershipCreateNestedManyWithoutCaseInput
    Opponent?: OpponentCreateNestedOneWithoutCaseInput
    caseTag?: CaseTagCreateNestedOneWithoutCaseInput
    caseDocument?: CaseDocumentCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderCreateNestedManyWithoutCaseInput
    caseInvoice?: CaseInvoiceCreateNestedManyWithoutCaseInput
    caseNote?: CaseNoteCreateNestedOneWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutCaseBillingsInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    clientId: string
    adminId: string
    opponentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: TeamMembershipUncheckedCreateNestedManyWithoutCaseInput
    caseTag?: CaseTagUncheckedCreateNestedOneWithoutCaseInput
    caseDocument?: CaseDocumentUncheckedCreateNestedOneWithoutCaseInput
    caseReminder?: CaseReminderUncheckedCreateNestedManyWithoutCaseInput
    caseInvoice?: CaseInvoiceUncheckedCreateNestedManyWithoutCaseInput
    caseNote?: CaseNoteUncheckedCreateNestedOneWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutCaseBillingsInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutCaseBillingsInput, CaseUncheckedCreateWithoutCaseBillingsInput>
  }

  export type CaseUpsertWithoutCaseBillingsInput = {
    update: XOR<CaseUpdateWithoutCaseBillingsInput, CaseUncheckedUpdateWithoutCaseBillingsInput>
    create: XOR<CaseCreateWithoutCaseBillingsInput, CaseUncheckedCreateWithoutCaseBillingsInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutCaseBillingsInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutCaseBillingsInput, CaseUncheckedUpdateWithoutCaseBillingsInput>
  }

  export type CaseUpdateWithoutCaseBillingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: TeamClientUpdateOneRequiredWithoutCasesNestedInput
    admin?: TeamAdminUpdateOneRequiredWithoutCasesNestedInput
    members?: TeamMembershipUpdateManyWithoutCaseNestedInput
    Opponent?: OpponentUpdateOneWithoutCaseNestedInput
    caseTag?: CaseTagUpdateOneWithoutCaseNestedInput
    caseDocument?: CaseDocumentUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUpdateManyWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUpdateManyWithoutCaseNestedInput
    caseNote?: CaseNoteUpdateOneWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutCaseBillingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    clientId?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    opponentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: TeamMembershipUncheckedUpdateManyWithoutCaseNestedInput
    caseTag?: CaseTagUncheckedUpdateOneWithoutCaseNestedInput
    caseDocument?: CaseDocumentUncheckedUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUncheckedUpdateManyWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUncheckedUpdateManyWithoutCaseNestedInput
    caseNote?: CaseNoteUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type UserCreateWithoutDocumentsInput = {
    id?: string
    firstName: string
    lastName?: string | null
    userName: string
    email: string
    userProfile?: string | null
    password: string
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    chatToken?: string | null
    Session?: SessionCreateNestedOneWithoutUserInput
    UserAddress?: AddressCreateNestedOneWithoutUserInput
    TeamAdmin?: TeamAdminCreateNestedOneWithoutUserInput
    TeamMember?: TeamMemberCreateNestedOneWithoutUserInput
    TeamClient?: TeamClientCreateNestedOneWithoutUserInput
    ToDoList?: ToDoListCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutDocumentsInput = {
    id?: string
    firstName: string
    lastName?: string | null
    userName: string
    email: string
    userProfile?: string | null
    password: string
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    chatToken?: string | null
    Session?: SessionUncheckedCreateNestedOneWithoutUserInput
    UserAddress?: AddressUncheckedCreateNestedOneWithoutUserInput
    TeamAdmin?: TeamAdminUncheckedCreateNestedOneWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedOneWithoutUserInput
    TeamClient?: TeamClientUncheckedCreateNestedOneWithoutUserInput
    ToDoList?: ToDoListUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutDocumentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
  }

  export type UserUpsertWithoutDocumentsInput = {
    update: XOR<UserUpdateWithoutDocumentsInput, UserUncheckedUpdateWithoutDocumentsInput>
    create: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDocumentsInput, UserUncheckedUpdateWithoutDocumentsInput>
  }

  export type UserUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userProfile?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    chatToken?: NullableStringFieldUpdateOperationsInput | string | null
    Session?: SessionUpdateOneWithoutUserNestedInput
    UserAddress?: AddressUpdateOneWithoutUserNestedInput
    TeamAdmin?: TeamAdminUpdateOneWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateOneWithoutUserNestedInput
    TeamClient?: TeamClientUpdateOneWithoutUserNestedInput
    ToDoList?: ToDoListUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userProfile?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    chatToken?: NullableStringFieldUpdateOperationsInput | string | null
    Session?: SessionUncheckedUpdateOneWithoutUserNestedInput
    UserAddress?: AddressUncheckedUpdateOneWithoutUserNestedInput
    TeamAdmin?: TeamAdminUncheckedUpdateOneWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateOneWithoutUserNestedInput
    TeamClient?: TeamClientUncheckedUpdateOneWithoutUserNestedInput
    ToDoList?: ToDoListUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type DocumentCreateManyUserInput = {
    id?: string
    title?: string | null
    initialContent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ToDoListCreateManyCreatedByInput = {
    id?: string
    task: string
    isTaskChecked?: boolean
    taskForDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    initialContent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    initialContent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    initialContent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ToDoListUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    task?: StringFieldUpdateOperationsInput | string
    isTaskChecked?: BoolFieldUpdateOperationsInput | boolean
    taskForDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ToDoListUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    task?: StringFieldUpdateOperationsInput | string
    isTaskChecked?: BoolFieldUpdateOperationsInput | boolean
    taskForDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ToDoListUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    task?: StringFieldUpdateOperationsInput | string
    isTaskChecked?: BoolFieldUpdateOperationsInput | boolean
    taskForDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseCreateManyAdminInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    clientId: string
    opponentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: TeamClientUpdateOneRequiredWithoutCasesNestedInput
    members?: TeamMembershipUpdateManyWithoutCaseNestedInput
    Opponent?: OpponentUpdateOneWithoutCaseNestedInput
    caseTag?: CaseTagUpdateOneWithoutCaseNestedInput
    caseDocument?: CaseDocumentUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUpdateManyWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUpdateOneWithoutCaseNestedInput
    caseNote?: CaseNoteUpdateOneWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    clientId?: StringFieldUpdateOperationsInput | string
    opponentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: TeamMembershipUncheckedUpdateManyWithoutCaseNestedInput
    caseTag?: CaseTagUncheckedUpdateOneWithoutCaseNestedInput
    caseDocument?: CaseDocumentUncheckedUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUncheckedUpdateManyWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUncheckedUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUncheckedUpdateOneWithoutCaseNestedInput
    caseNote?: CaseNoteUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateManyWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    clientId?: StringFieldUpdateOperationsInput | string
    opponentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMembershipCreateManyTeamMemberInput = {
    id?: string
    caseId: string
    joinedAt?: Date | string
  }

  export type TeamMembershipUpdateWithoutTeamMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutMembersNestedInput
  }

  export type TeamMembershipUncheckedUpdateWithoutTeamMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMembershipUncheckedUpdateManyWithoutTeamMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseCreateManyClientInput = {
    id?: string
    title: string
    description?: string | null
    practiseArea?: $Enums.PracticeArea
    arrivalDate?: Date | string | null
    status?: $Enums.CaseStatus | null
    matterPriority?: $Enums.matterPriority
    internalRefNumber?: string | null
    filedDate?: Date | string | null
    closedDate?: Date | string | null
    estimatedCloseDate?: Date | string | null
    stage?: $Enums.CaseStage
    adminId: string
    opponentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: TeamAdminUpdateOneRequiredWithoutCasesNestedInput
    members?: TeamMembershipUpdateManyWithoutCaseNestedInput
    Opponent?: OpponentUpdateOneWithoutCaseNestedInput
    caseTag?: CaseTagUpdateOneWithoutCaseNestedInput
    caseDocument?: CaseDocumentUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUpdateManyWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUpdateOneWithoutCaseNestedInput
    caseNote?: CaseNoteUpdateOneWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    adminId?: StringFieldUpdateOperationsInput | string
    opponentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: TeamMembershipUncheckedUpdateManyWithoutCaseNestedInput
    caseTag?: CaseTagUncheckedUpdateOneWithoutCaseNestedInput
    caseDocument?: CaseDocumentUncheckedUpdateOneWithoutCaseNestedInput
    caseReminder?: CaseReminderUncheckedUpdateManyWithoutCaseNestedInput
    caseInvoice?: CaseInvoiceUncheckedUpdateManyWithoutCaseNestedInput
    caseBillings?: CaseBillingUncheckedUpdateOneWithoutCaseNestedInput
    caseNote?: CaseNoteUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    practiseArea?: EnumPracticeAreaFieldUpdateOperationsInput | $Enums.PracticeArea
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus | null
    matterPriority?: EnummatterPriorityFieldUpdateOperationsInput | $Enums.matterPriority
    internalRefNumber?: NullableStringFieldUpdateOperationsInput | string | null
    filedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedCloseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stage?: EnumCaseStageFieldUpdateOperationsInput | $Enums.CaseStage
    adminId?: StringFieldUpdateOperationsInput | string
    opponentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMembershipCreateManyCaseInput = {
    id?: string
    teamMemberId: string
    joinedAt?: Date | string
  }

  export type CaseReminderCreateManyCaseInput = {
    id?: string
    reminderDate: Date | string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseInvoiceCreateManyCaseInput = {
    id?: string
    amount: number
    status: string
    dueDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamMembershipUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamMember?: TeamMemberUpdateOneRequiredWithoutMembershipsNestedInput
  }

  export type TeamMembershipUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamMemberId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMembershipUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamMemberId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseReminderUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    reminderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseReminderUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    reminderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseReminderUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    reminderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseInvoiceUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseInvoiceUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseInvoiceUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}